<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a12" title="">
  <file path="Amfphp\ClassLoader.php" hash="3eb2baa04978148c6d87514d22e74426" package="Amfphp\Core">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Core"/>
    </docblock>
    <include line="24" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="25" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="26" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="27" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="28" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="29" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="30" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="33" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="34" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="35" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="36" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="37" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="38" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="39" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="40" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="43" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="44" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="45" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="46" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="47" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="50" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="51" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="52" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="53" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="54" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="55" type="Require Once" package="Default">
      <name/>
    </include>
    <constant namespace="global" line="21" package="Amfphp\Core">
      <name>AMFPHP_ROOTPATH</name>
      <full_name>\AMFPHP_ROOTPATH</full_name>
      <value>dirname(__FILE__) . DIRECTORY_SEPARATOR</value>
    </constant>
  </file>
  <file path="Amfphp\Core\Amf\Constants.php" hash="6eabcd2b9e14eed4c0aa58c56c6150a4" package="Amfphp\Core\Amf">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Core_Amf"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="18" package="Amfphp\Core\Amf">
      <extends/>
      <name>Amfphp_Core_Amf_Constants</name>
      <full_name>\Amfphp_Core_Amf_Constants</full_name>
      <docblock line="12">
        <description>constants relative to the Amf format</description>
        <long-description/>
        <tag line="12" name="package" description="Amfphp_Core_Amf"/>
        <tag line="12" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <constant namespace="global" line="22" package="Amfphp\Core\Amf">
        <name>CLIENT_SUCCESS_METHOD</name>
        <full_name>CLIENT_SUCCESS_METHOD</full_name>
        <value>'/onResult'</value>
        <docblock line="19">
          <description>The success method name</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="global" line="26" package="Amfphp\Core\Amf">
        <name>CLIENT_FAILURE_METHOD</name>
        <full_name>CLIENT_FAILURE_METHOD</full_name>
        <value>'/onStatus'</value>
        <docblock line="23">
          <description>The status method name</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="global" line="31" package="Amfphp\Core\Amf">
        <name>DEFAULT_REQUEST_RESPONSE_URI</name>
        <full_name>DEFAULT_REQUEST_RESPONSE_URI</full_name>
        <value>'/1'</value>
        <docblock line="28">
          <description>used when there is an error and the request response uri is not available</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="global" line="35" package="Amfphp\Core\Amf">
        <name>CONTENT_TYPE</name>
        <full_name>CONTENT_TYPE</full_name>
        <value>'application/x-amf'</value>
        <docblock line="32">
          <description>The AMf content type, for use in the headers</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="global" line="41" package="Amfphp\Core\Amf">
        <name>FIELD_EXPLICIT_TYPE</name>
        <full_name>FIELD_EXPLICIT_TYPE</full_name>
        <value>'_explicitType'</value>
        <docblock line="36">
          <description>this is the field where the class name of an object must be set so that it can be sent as a strongly typed object.</description>
          <long-description>&lt;p&gt;try to use this where possible, but it can't be everywhere because we would need to use ReflectionClass::hasProperty, and that is only with PHP 5.1&lt;/p&gt;</long-description>
        </docblock>
      </constant>
      <constant namespace="global" line="45" package="Amfphp\Core\Amf">
        <name>FIELD_EXTERNALIZED_DATA</name>
        <full_name>FIELD_EXTERNALIZED_DATA</full_name>
        <value>'_externalizedData'</value>
        <docblock line="42">
          <description>if an object is marked as externalizable(AMF3 and later), this is where the externalized data goes.</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="global" line="50" package="Amfphp\Core\Amf">
        <name>CREDENTIALS_HEADER_NAME</name>
        <full_name>CREDENTIALS_HEADER_NAME</full_name>
        <value>'Credentials'</value>
        <docblock line="47">
          <description>this is the name of the credentials header.</description>
          <long-description>&lt;p&gt;can be used for AS3, but is mostly AS2 only&lt;/p&gt;</long-description>
        </docblock>
      </constant>
      <constant namespace="global" line="55" package="Amfphp\Core\Amf">
        <name>CREDENTIALS_FIELD_USERID</name>
        <full_name>CREDENTIALS_FIELD_USERID</full_name>
        <value>'userid'</value>
        <docblock line="52">
          <description>the user id field in the credentials header</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="global" line="60" package="Amfphp\Core\Amf">
        <name>CREDENTIALS_FIELD_PASSWORD</name>
        <full_name>CREDENTIALS_FIELD_PASSWORD</full_name>
        <value>'password'</value>
        <docblock line="57">
          <description>the password field in the credentials header</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="global" line="65" package="Amfphp\Core\Amf">
        <name>AMF0_ENCODING</name>
        <full_name>AMF0_ENCODING</full_name>
        <value>0</value>
        <docblock line="62">
          <description>amf0 encoding</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="global" line="70" package="Amfphp\Core\Amf">
        <name>AMF3_ENCODING</name>
        <full_name>AMF3_ENCODING</full_name>
        <value>3</value>
        <docblock line="67">
          <description>amf3 encoding</description>
          <long-description/>
        </docblock>
      </constant>
    </class>
  </file>
  <file path="Amfphp\Core\Amf\Deserializer.php" hash="925af851d9cb58db9a92010a576418f8" package="Amfphp\Core\Amf">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Core_Amf"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="19" package="Amfphp\Core\Amf">
      <extends/>
      <implements>\Amfphp_Core_Common_IDeserializer</implements>
      <name>Amfphp_Core_Amf_Deserializer</name>
      <full_name>\Amfphp_Core_Amf_Deserializer</full_name>
      <docblock line="13">
        <description>Amfphp_Core_Amf_Deserializer takes the raw amf input stream and converts it PHP objects
representing the data.</description>
        <long-description/>
        <tag line="13" name="package" description="Amfphp_Core_Amf"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="24" namespace="global" package="Default">
        <name>$rawData</name>
        <default/>
        <docblock line="20">
          <description>data to deserialize</description>
          <long-description/>
          <tag line="20" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="32" namespace="global" package="Default">
        <name>$messagesLeftToProcess</name>
        <default/>
        <docblock line="26">
          <description>The number of Messages in the packet left to process</description>
          <long-description/>
          <tag line="26" name="access" description="protected"/>
          <tag line="26" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="40" namespace="global" package="Default">
        <name>$currentByte</name>
        <default/>
        <docblock line="34">
          <description>The current seek cursor of the stream</description>
          <long-description/>
          <tag line="34" name="access" description="protected"/>
          <tag line="34" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="48" namespace="global" package="Default">
        <name>$headersLeftToProcess</name>
        <default/>
        <docblock line="42">
          <description>The number of headers in the packet left to process</description>
          <long-description/>
          <tag line="42" name="access" description="protected"/>
          <tag line="42" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="54" namespace="global" package="Default">
        <name>$deserializedPacket</name>
        <default/>
        <docblock line="50">
          <description>the Packet contained in the serialized data</description>
          <long-description/>
          <tag line="50" name="var" description="" type="\&lt;Amfphp_Core_Amf_Packet&gt;">
            <type by_reference="false">\&lt;Amfphp_Core_Amf_Packet&gt;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="60" namespace="global" package="Default">
        <name>$storedStrings</name>
        <default/>
        <docblock line="56">
          <description>strings stored for tracking references(amf3)</description>
          <long-description/>
          <tag line="56" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="66" namespace="global" package="Default">
        <name>$storedObjects</name>
        <default/>
        <docblock line="62">
          <description>objects stored for tracking references(amf3)</description>
          <long-description/>
          <tag line="62" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="72" namespace="global" package="Default">
        <name>$storedDefinitions</name>
        <default/>
        <docblock line="68">
          <description>class definitions(traits) stored for tracking references(amf3)</description>
          <long-description/>
          <tag line="68" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="78" namespace="global" package="Default">
        <name>$amf0storedObjects</name>
        <default/>
        <docblock line="74">
          <description>objects stored for tracking references(amf0)</description>
          <long-description/>
          <tag line="74" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="87" package="Amfphp\Core\Amf">
        <name>deserialize</name>
        <full_name>deserialize</full_name>
        <docblock line="80">
          <description>convert from text/binary to php object</description>
          <long-description/>
          <tag line="80" name="param" description="" type="array" variable="$getData">
            <type by_reference="false">array</type>
          </tag>
          <tag line="80" name="param" description="" type="array" variable="$postData">
            <type by_reference="false">array</type>
          </tag>
          <tag line="80" name="param" description="" type="string" variable="$rawPostData">
            <type by_reference="false">string</type>
          </tag>
          <tag line="80" name="return" description="" type="\Amfphp_Core_Amf_Packet">
            <type by_reference="false">\Amfphp_Core_Amf_Packet</type>
          </tag>
        </docblock>
        <argument line="87">
          <name>$getData</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="87">
          <name>$postData</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="87">
          <name>$rawPostData</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="99" package="Amfphp\Core\Amf">
        <name>resetReferences</name>
        <full_name>resetReferences</full_name>
        <docblock line="96">
          <description>reset reference stores</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="111" package="Amfphp\Core\Amf">
        <name>readHeaders</name>
        <full_name>readHeaders</full_name>
        <docblock line="107">
          <description>readHeaders converts that header section of the amf Packet into php obects.</description>
          <long-description>&lt;p&gt;Header information typically contains meta data about the Packet.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="145" package="Amfphp\Core\Amf">
        <name>readMessages</name>
        <full_name>readMessages</full_name>
        <docblock line="142">
          <description>read messages in AMF packet</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="167" package="Amfphp\Core\Amf">
        <name>readInt</name>
        <full_name>readInt</full_name>
        <docblock line="161">
          <description>readInt grabs the next 2 bytes and returns the next two bytes, shifted and combined
to produce the resulting integer</description>
          <long-description/>
          <tag line="161" name="return" description="The resulting integer from the next 2 bytes" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="178" package="Amfphp\Core\Amf">
        <name>readUTF</name>
        <full_name>readUTF</full_name>
        <docblock line="172">
          <description>readUTF first grabs the next 2 bytes which represent the string length.</description>
          <long-description>&lt;p&gt;Then it grabs the next (len) bytes of the resulting string.&lt;/p&gt;</long-description>
          <tag line="172" name="return" description="The utf8 decoded string" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="196" package="Amfphp\Core\Amf">
        <name>readByte</name>
        <full_name>readByte</full_name>
        <docblock line="191">
          <description>readByte grabs the next byte from the data stream and returns it.</description>
          <long-description/>
          <tag line="191" name="return" description="The next byte converted into an integer" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="207" package="Amfphp\Core\Amf">
        <name>readData</name>
        <full_name>readData</full_name>
        <docblock line="200">
          <description>readData is the main switch for mapping a type code to an actual
implementation for deciphering it.</description>
          <long-description/>
          <tag line="200" name="param" description="The $type integer" type="mixed" variable="$type">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="200" name="return" description="The php version of the data in the Packet block" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="207">
          <name>$type</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="259" package="Amfphp\Core\Amf">
        <name>readDouble</name>
        <full_name>readDouble</full_name>
        <docblock line="253">
          <description>readDouble reads the floating point value from the bytes stream and properly orders
the bytes depending on the system architecture.</description>
          <long-description/>
          <tag line="253" name="return" description="The floating point value of the next 8 bytes" type="float">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="275" package="Amfphp\Core\Amf">
        <name>readObject</name>
        <full_name>readObject</full_name>
        <docblock line="269">
          <description>readObject reads the name/value properties of the amf Packet and converts them into
their equivilent php representation</description>
          <long-description/>
          <tag line="269" name="return" description="The php object filled with the data" type="Object">
            <type by_reference="false">Object</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="295" package="Amfphp\Core\Amf">
        <name>readReference</name>
        <full_name>readReference</full_name>
        <docblock line="287">
          <description>readReference replaces the old readFlushedSO.</description>
          <long-description>&lt;p&gt;It treats where there
are references to other objects. Currently it does not resolve the
object as this would involve a serious amount of overhead, unless
you have a genius idea&lt;/p&gt;</long-description>
          <tag line="287" name="return" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="305" package="Amfphp\Core\Amf">
        <name>readMixedArray</name>
        <full_name>readMixedArray</full_name>
        <docblock line="300">
          <description>readMixedArray turns an array with numeric and string indexes into a php array</description>
          <long-description/>
          <tag line="300" name="return" description="The php array with mixed indexes" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="317" package="Amfphp\Core\Amf">
        <name>readMixedObject</name>
        <full_name>readMixedObject</full_name>
        <docblock line="311">
          <description>readMixedObject reads the name/value properties of the amf Packet and converts
numeric looking keys to numeric keys</description>
          <long-description/>
          <tag line="311" name="return" description="The php array with the object data" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="337" package="Amfphp\Core\Amf">
        <name>readArray</name>
        <full_name>readArray</full_name>
        <docblock line="332">
          <description>readArray turns an all numeric keyed actionscript array into a php array.</description>
          <long-description/>
          <tag line="332" name="return" description="The php array" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="354" package="Amfphp\Core\Amf">
        <name>readDate</name>
        <full_name>readDate</full_name>
        <docblock line="348">
          <description>readDate reads a date from the amf Packet and returns the time in ms.</description>
          <long-description>&lt;p&gt;This method is still under development.&lt;/p&gt;</long-description>
          <tag line="348" name="return" description="a container with the date in ms." type="\Amfphp_Core_Amf_Types_Date">
            <type by_reference="false">\Amfphp_Core_Amf_Types_Date</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="365" package="Amfphp\Core\Amf">
        <name>readXml</name>
        <full_name>readXml</full_name>
        <docblock line="361">
          <description>read xml</description>
          <long-description/>
          <tag line="361" name="return" description="" type="\Amfphp_Core_Amf_Types_Xml">
            <type by_reference="false">\Amfphp_Core_Amf_Types_Xml</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="376" package="Amfphp\Core\Amf">
        <name>readLongUTF</name>
        <full_name>readLongUTF</full_name>
        <docblock line="370">
          <description>readLongUTF first grabs the next 4 bytes which represent the string length.</description>
          <long-description>&lt;p&gt;Then it grabs the next (len) bytes of the resulting in the string&lt;/p&gt;</long-description>
          <tag line="370" name="return" description="The utf8 decoded string" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="391" package="Amfphp\Core\Amf">
        <name>readCustomClass</name>
        <full_name>readCustomClass</full_name>
        <docblock line="384">
          <description>readCustomClass reads the amf content associated with a class instance which was registered
with Object.registerClass.</description>
          <long-description>&lt;p&gt;In order to preserve the class name an additional property is assigned
to the object Amfphp_Core_Amf_Constants::FIELD_EXPLICIT_TYPE.  This property will be overwritten if it existed within the class already.&lt;/p&gt;</long-description>
          <tag line="384" name="return" description="The php representation of the object" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="410" package="Amfphp\Core\Amf">
        <name>readAmf3Data</name>
        <full_name>readAmf3Data</full_name>
        <docblock line="406">
          <description>read the type byte, then call the corresponding amf3 data reading function</description>
          <long-description/>
          <tag line="406" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="451" package="Amfphp\Core\Amf">
        <name>readAmf3Int</name>
        <full_name>readAmf3Int</full_name>
        <docblock line="444">
          <description>Handle decoding of the variable-length representation
which gives seven bits of value per serialized byte by using the high-order bit
of each byte as a continuation flag.</description>
          <long-description/>
          <tag line="444" name="return" description="integer value" type="\read">
            <type by_reference="false">\read</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="489" package="Amfphp\Core\Amf">
        <name>readAmf3Date</name>
        <full_name>readAmf3Date</full_name>
        <docblock line="484">
          <description>read amf 3 date</description>
          <long-description/>
          <tag line="484" name="return" description="" type="boolean|\Amfphp_Core_Amf_Types_Date">
            <type by_reference="false">boolean</type>
            <type by_reference="false">\Amfphp_Core_Amf_Types_Date</type>
          </tag>
          <tag line="484" name="throws" description="" type="\Amfphp_Core_Exception">
            <type by_reference="false">\Amfphp_Core_Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="512" package="Amfphp\Core\Amf">
        <name>readAmf3String</name>
        <full_name>readAmf3String</full_name>
        <docblock line="507">
          <description>readString</description>
          <long-description/>
          <tag line="507" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="538" package="Amfphp\Core\Amf">
        <name>readAmf3Xml</name>
        <full_name>readAmf3Xml</full_name>
        <docblock line="534">
          <description>read amf 3 xml</description>
          <long-description/>
          <tag line="534" name="return" description="" type="\Amfphp_Core_Amf_Types_Xml">
            <type by_reference="false">\Amfphp_Core_Amf_Types_Xml</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="555" package="Amfphp\Core\Amf">
        <name>readAmf3XmlDocument</name>
        <full_name>readAmf3XmlDocument</full_name>
        <docblock line="551">
          <description>read amf 3 xml doc</description>
          <long-description/>
          <tag line="551" name="return" description="" type="\Amfphp_Core_Amf_Types_Xml">
            <type by_reference="false">\Amfphp_Core_Amf_Types_Xml</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="572" package="Amfphp\Core\Amf">
        <name>readAmf3ByteArray</name>
        <full_name>readAmf3ByteArray</full_name>
        <docblock line="568">
          <description>read Amf 3 byte array</description>
          <long-description/>
          <tag line="568" name="return" description="" type="\Amfphp_Core_Amf_Types_ByteArray">
            <type by_reference="false">\Amfphp_Core_Amf_Types_ByteArray</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="589" package="Amfphp\Core\Amf">
        <name>readAmf3Array</name>
        <full_name>readAmf3Array</full_name>
        <docblock line="585">
          <description>read amf 3 array</description>
          <long-description/>
          <tag line="585" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="618" package="Amfphp\Core\Amf">
        <name>readAmf3Object</name>
        <full_name>readAmf3Object</full_name>
        <docblock line="614">
          <description>read amf 3 object</description>
          <long-description/>
          <tag line="614" name="return" description="" type="\stdClass">
            <type by_reference="false">\stdClass</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="697" package="Amfphp\Core\Amf">
        <name>readLong</name>
        <full_name>readLong</full_name>
        <docblock line="692">
          <description>readLong grabs the next 4 bytes shifts and combines them to produce an integer</description>
          <long-description/>
          <tag line="692" name="return" description="The resulting integer from the next 4 bytes" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="709" package="Amfphp\Core\Amf">
        <name>readBuffer</name>
        <full_name>readBuffer</full_name>
        <docblock line="704">
          <description>read some data and move pointer</description>
          <long-description/>
          <tag line="704" name="param" description="" type="\type" variable="$len">
            <type by_reference="false">\type</type>
          </tag>
          <tag line="704" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="709">
          <name>$len</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Core\Amf\Handler.php" hash="ba8da949e0b1491d8ad2753fd3baca9c" package="Amfphp\Core\Amf">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Core_Amf"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="20" package="Amfphp\Core\Amf">
      <extends/>
      <implements>\Amfphp_Core_Common_IDeserializer</implements>
      <implements>\Amfphp_Core_Common_IDeserializedRequestHandler</implements>
      <implements>\Amfphp_Core_Common_IExceptionHandler</implements>
      <implements>\Amfphp_Core_Common_ISerializer</implements>
      <name>Amfphp_Core_Amf_Handler</name>
      <full_name>\Amfphp_Core_Amf_Handler</full_name>
      <docblock line="13">
        <description>This is the default handler for the gateway.</description>
        <long-description>&lt;p&gt;It's job is to handle everything that is specific to Amf for the gateway.&lt;/p&gt;</long-description>
        <tag line="13" name="todo" description="determine if indirection for serializer/deserializer necessary. Makes gateway code lighter, but is cumbersome"/>
        <tag line="13" name="package" description="Amfphp_Core_Amf"/>
        <tag line="13" name="author" description="Ariel Sommeria-Klein"/>
      </docblock>
      <constant namespace="global" line="30" package="Amfphp\Core\Amf">
        <name>FILTER_AMF_REQUEST_HEADER_HANDLER</name>
        <full_name>FILTER_AMF_REQUEST_HEADER_HANDLER</full_name>
        <value>'FILTER_AMF_REQUEST_HEADER_HANDLER'</value>
        <docblock line="21">
          <description>filter called for each amf request header, to give a plugin the chance to handle it.</description>
          <long-description>&lt;p&gt;Unless a plugin handles them, amf headers are ignored
Headers embedded in the serialized requests are regarded to be a Amf specific, so they get their filter in Amf Handler&lt;/p&gt;</long-description>
          <tag line="21" name="param" description="null at call. Return if the plugin can handle" type="Object" variable="$handler.">
            <type by_reference="false">Object</type>
          </tag>
          <tag line="21" name="param" description="the request header" type="\Amfphp_Core_Amf_Header" variable="$header">
            <type by_reference="false">\Amfphp_Core_Amf_Header</type>
          </tag>
          <tag line="21" name="todo" description="consider an interface for $handler. Maybe overkill here"/>
        </docblock>
      </constant>
      <constant namespace="global" line="39" package="Amfphp\Core\Amf">
        <name>FILTER_AMF_REQUEST_MESSAGE_HANDLER</name>
        <full_name>FILTER_AMF_REQUEST_MESSAGE_HANDLER</full_name>
        <value>'FILTER_AMF_REQUEST_MESSAGE_HANDLER'</value>
        <docblock line="32">
          <description>filter called for each amf request message, to give a plugin the chance to handle it.</description>
          <long-description>&lt;p&gt;This is for the Flex Messaging plugin to be able to intercept the message and say it wants to handle it&lt;/p&gt;</long-description>
          <tag line="32" name="param" description="null at call. Return if the plugin can handle" type="Object" variable="$handler.">
            <type by_reference="false">Object</type>
          </tag>
          <tag line="32" name="param" description="the request message" type="\Amfphp_Core_Amf_Message" variable="$requestMessage">
            <type by_reference="false">\Amfphp_Core_Amf_Message</type>
          </tag>
          <tag line="32" name="todo" description="consider an interface for $handler. Maybe overkill here"/>
        </docblock>
      </constant>
      <constant namespace="global" line="47" package="Amfphp\Core\Amf">
        <name>FILTER_AMF_EXCEPTION_HANDLER</name>
        <full_name>FILTER_AMF_EXCEPTION_HANDLER</full_name>
        <value>'FILTER_AMF_EXCEPTION_HANDLER'</value>
        <docblock line="41">
          <description>filter called for exception handling an Amf packet/message, to give a plugin the chance to handle it.</description>
          <long-description>&lt;p&gt;This is for the Flex Messaging plugin to be able to intercept the exception and say it wants to handle it&lt;/p&gt;</long-description>
          <tag line="41" name="param" description="null at call. Return if the plugin can handle" type="Object" variable="$handler.">
            <type by_reference="false">Object</type>
          </tag>
          <tag line="41" name="todo" description="consider an interface for $handler. Maybe overkill here"/>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="54" namespace="global" package="Default">
        <name>$lastRequestMessageResponseUri</name>
        <default/>
        <docblock line="49">
          <description>Amf specifies that an error message must be aimed at an end point.</description>
          <long-description>&lt;p&gt;This stores the last message's response Uri to be able to give this end point
in case of an exception during the handling of the message. The default is '/1', because a response Uri is not always available&lt;/p&gt;</long-description>
          <tag line="49" name="var" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="61" namespace="global" package="Default">
        <name>$returnErrorDetails</name>
        <default>true</default>
        <docblock line="56">
          <description>return error details</description>
          <long-description/>
          <tag line="56" name="see" description="\Amfphp_Core_Config::CONFIG_RETURN_ERROR_DETAILS" refers="\Amfphp_Core_Config::CONFIG_RETURN_ERROR_DETAILS"/>
          <tag line="56" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="67" namespace="global" package="Default">
        <name>$requestPacket</name>
        <default/>
        <docblock line="63">
          <description>use this to manipulate the packet directly from your services.</description>
          <long-description>&lt;p&gt;This is an advanced option, and should be used with caution!&lt;/p&gt;</long-description>
          <tag line="63" name="var" description="" type="\Amfphp_Core_Amf_Packet">
            <type by_reference="false">\Amfphp_Core_Amf_Packet</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="73" namespace="global" package="Default">
        <name>$responsePacket</name>
        <default/>
        <docblock line="69">
          <description>use this to manipulate the packet directly from your services.</description>
          <long-description>&lt;p&gt;This is an advanced option, and should be used with caution!&lt;/p&gt;</long-description>
          <tag line="69" name="var" description="" type="\Amfphp_Core_Amf_Packet">
            <type by_reference="false">\Amfphp_Core_Amf_Packet</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="79" package="Amfphp\Core\Amf">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="75">
          <description>constructor</description>
          <long-description/>
          <tag line="75" name="param" description="" type="array" variable="$sharedConfig">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$sharedConfig</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="94" package="Amfphp\Core\Amf">
        <name>deserialize</name>
        <full_name>deserialize</full_name>
        <docblock line="86">
          <description>deserialize</description>
          <long-description/>
          <tag line="86" name="see" description="\Amfphp_Core_Common_IDeserializer" refers="\Amfphp_Core_Common_IDeserializer"/>
          <tag line="86" name="param" description="" type="array" variable="$getData">
            <type by_reference="false">array</type>
          </tag>
          <tag line="86" name="param" description="" type="array" variable="$postData">
            <type by_reference="false">array</type>
          </tag>
          <tag line="86" name="param" description="" type="string" variable="$rawPostData">
            <type by_reference="false">string</type>
          </tag>
          <tag line="86" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="94">
          <name>$getData</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="94">
          <name>$postData</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="94">
          <name>$rawPostData</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="106" package="Amfphp\Core\Amf">
        <name>getServiceCallParameters</name>
        <full_name>getServiceCallParameters</full_name>
        <docblock line="100">
          <description>creates a ServiceCallParameters object from an Amfphp_Core_Amf_Message
supported separators in the targetUri are '/' and '.'</description>
          <long-description/>
          <tag line="100" name="param" description="" type="\Amfphp_Core_Amf_Message" variable="$Amfphp_Core_Amf_Message">
            <type by_reference="false">\Amfphp_Core_Amf_Message</type>
          </tag>
          <tag line="100" name="return" description="" type="\Amfphp_Core_Common_ServiceCallParameters">
            <type by_reference="false">\Amfphp_Core_Common_ServiceCallParameters</type>
          </tag>
        </docblock>
        <argument line="106">
          <name>$Amfphp_Core_Amf_Message</name>
          <default/>
          <type>\Amfphp_Core_Amf_Message</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="124" package="Amfphp\Core\Amf">
        <name>handleRequestMessage</name>
        <full_name>handleRequestMessage</full_name>
        <docblock line="116">
          <description>process a request and generate a response.</description>
          <long-description>&lt;p&gt;throws an Exception if anything fails, so caller must encapsulate in try/catch&lt;/p&gt;</long-description>
          <tag line="116" name="param" description="" type="\Amfphp_Core_Amf_Message" variable="$requestMessage">
            <type by_reference="false">\Amfphp_Core_Amf_Message</type>
          </tag>
          <tag line="116" name="param" description="" type="\Amfphp_Core_Common_ServiceRouter" variable="$serviceRouter">
            <type by_reference="false">\Amfphp_Core_Common_ServiceRouter</type>
          </tag>
          <tag line="116" name="return" description="the response Message for the request" type="\Amfphp_Core_Amf_Message">
            <type by_reference="false">\Amfphp_Core_Amf_Message</type>
          </tag>
        </docblock>
        <argument line="124">
          <name>$requestMessage</name>
          <default/>
          <type>\Amfphp_Core_Amf_Message</type>
        </argument>
        <argument line="124">
          <name>$serviceRouter</name>
          <default/>
          <type>\Amfphp_Core_Common_ServiceRouter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="150" package="Amfphp\Core\Amf">
        <name>handleDeserializedRequest</name>
        <full_name>handleDeserializedRequest</full_name>
        <docblock line="143">
          <description>handle deserialized request</description>
          <long-description/>
          <tag line="143" name="see" description="\Amfphp_Core_Common_IDeserializedRequestHandler" refers="\Amfphp_Core_Common_IDeserializedRequestHandler"/>
          <tag line="143" name="param" description="" type="mixed" variable="$deserializedRequest">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="143" name="param" description="" type="\Amfphp_Core_Common_ServiceRouter" variable="$serviceRouter">
            <type by_reference="false">\Amfphp_Core_Common_ServiceRouter</type>
          </tag>
          <tag line="143" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="150">
          <name>$deserializedRequest</name>
          <default/>
          <type/>
        </argument>
        <argument line="150">
          <name>$serviceRouter</name>
          <default/>
          <type>\Amfphp_Core_Common_ServiceRouter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="186" package="Amfphp\Core\Amf">
        <name>handleException</name>
        <full_name>handleException</full_name>
        <docblock line="180">
          <description>handle exception</description>
          <long-description/>
          <tag line="180" name="see" description="\Amfphp_Core_Common_IExceptionHandler" refers="\Amfphp_Core_Common_IExceptionHandler"/>
          <tag line="180" name="param" description="" type="\Exception" variable="$exception">
            <type by_reference="false">\Exception</type>
          </tag>
          <tag line="180" name="return" description="" type="\Amfphp_Core_Amf_Packet">
            <type by_reference="false">\Amfphp_Core_Amf_Packet</type>
          </tag>
        </docblock>
        <argument line="186">
          <name>$exception</name>
          <default/>
          <type>\Exception</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="222" package="Amfphp\Core\Amf">
        <name>serialize</name>
        <full_name>serialize</full_name>
        <docblock line="216">
          <description>serialize</description>
          <long-description/>
          <tag line="216" name="see" description="\Amfphp_Core_Common_ISerializer" refers="\Amfphp_Core_Common_ISerializer"/>
          <tag line="216" name="param" description="" type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="216" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="222">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Core\Amf\Header.php" hash="8cc94455a04de83b8138e496bedc4fc7" package="Amfphp\Core\Amf">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Core_Amf"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="18" package="Amfphp\Core\Amf">
      <extends/>
      <name>Amfphp_Core_Amf_Header</name>
      <full_name>\Amfphp_Core_Amf_Header</full_name>
      <docblock line="13">
        <description>Amfphp_Core_Amf_Header is a data type that represents a single header passed via Amf</description>
        <long-description/>
        <tag line="13" name="package" description="Amfphp_Core_Amf"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="25" namespace="global" package="Default">
        <name>$name</name>
        <default/>
        <docblock line="20">
          <description>Name is the string name of the header key</description>
          <long-description/>
          <tag line="20" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="35" namespace="global" package="Default">
        <name>$required</name>
        <default/>
        <docblock line="27">
          <description>Required is a boolean determining whether the remote system
must understand this header in order to operate.</description>
          <long-description>&lt;p&gt;If the system
does not understand the header then it should not execute the
method call.&lt;/p&gt;</long-description>
          <tag line="27" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="42" namespace="global" package="Default">
        <name>$data</name>
        <default/>
        <docblock line="37">
          <description>data is the actual object data of the header key</description>
          <long-description/>
          <tag line="37" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="50" package="Amfphp\Core\Amf">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="44">
          <description>Amfphp_Core_Amf_Header is the Constructor function for the Amfphp_Core_Amf_Header data type.</description>
          <long-description/>
          <tag line="44" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="44" name="param" description="" type="boolean" variable="$required">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="44" name="param" description="" type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$name</name>
          <default>''</default>
          <type/>
        </argument>
        <argument line="50">
          <name>$required</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="50">
          <name>$data</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Core\Amf\Message.php" hash="d86fa5791dd5a840d7278ceedfa9e6b4" package="Amfphp\Core\Amf">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Core_Amf"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="19" package="Amfphp\Core\Amf">
      <extends/>
      <name>Amfphp_Core_Amf_Message</name>
      <full_name>\Amfphp_Core_Amf_Message</full_name>
      <docblock line="13">
        <description>Amfphp_Core_Amf_Message is a data type that encapsulates all of the various properties a Message object can have.</description>
        <long-description/>
        <tag line="13" name="package" description="Amfphp_Core_Amf"/>
        <tag line="13" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="33" namespace="global" package="Default">
        <name>$targetUri</name>
        <default>''</default>
        <docblock line="21">
          <description>inthe case of a request:
parsed to a service name and a function name.</description>
          <long-description>&lt;p&gt;supported separators for the targetUri are '.' and '/'
The service name can either be just the name of the class (TestService) or include a path(package/TestService)
example of full targetUri package/TestService/mirrorFunction&lt;/p&gt;

&lt;p&gt;in the case of a response:
the request responseUri + OK/KO
for example: /1/onResult or /1/onStatus&lt;/p&gt;</long-description>
          <tag line="21" name="var" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="44" namespace="global" package="Default">
        <name>$responseUri</name>
        <default>''</default>
        <docblock line="35">
          <description>in the case of a request:
operation name, for example /1</description>
          <long-description>&lt;p&gt;in the case of a response:
undefined&lt;/p&gt;</long-description>
          <tag line="35" name="var" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="50" namespace="global" package="Default">
        <name>$data</name>
        <default/>
        <docblock line="46">
          <description>data</description>
          <long-description/>
          <tag line="46" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="58" package="Amfphp\Core\Amf">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="52">
          <description>constructor</description>
          <long-description/>
          <tag line="52" name="param" description="" type="String" variable="$targetUri">
            <type by_reference="false">String</type>
          </tag>
          <tag line="52" name="param" description="" type="String" variable="$responseUri">
            <type by_reference="false">String</type>
          </tag>
          <tag line="52" name="param" description="" type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="58">
          <name>$targetUri</name>
          <default>''</default>
          <type/>
        </argument>
        <argument line="58">
          <name>$responseUri</name>
          <default>''</default>
          <type/>
        </argument>
        <argument line="58">
          <name>$data</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Core\Amf\Packet.php" hash="bb5f4c74b7b483f07f4ccb4876576c2f" package="Amfphp\Core\Amf">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Core_Amf"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="18" package="Amfphp\Core\Amf">
      <extends/>
      <name>Amfphp_Core_Amf_Packet</name>
      <full_name>\Amfphp_Core_Amf_Packet</full_name>
      <docblock line="12">
        <description>content holder for an Amf Packet.</description>
        <long-description/>
        <tag line="12" name="package" description="Amfphp_Core_Amf"/>
        <tag line="12" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="24" namespace="global" package="Default">
        <name>$headers</name>
        <default/>
        <docblock line="19">
          <description>The place to keep the headers data</description>
          <long-description/>
          <tag line="19" name="var" description="" type="\&lt;array&gt;">
            <type by_reference="false">\&lt;array&gt;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="31" namespace="global" package="Default">
        <name>$messages</name>
        <default/>
        <docblock line="26">
          <description>The place to keep the Message elements</description>
          <long-description/>
          <tag line="26" name="var" description="" type="\&lt;array&gt;">
            <type by_reference="false">\&lt;array&gt;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="37" namespace="global" package="Default">
        <name>$amfVersion</name>
        <default/>
        <docblock line="33">
          <description>either 0 or 3.</description>
          <long-description>&lt;p&gt;This is stored here when deserializing, because the serializer needs the info&lt;/p&gt;</long-description>
          <tag line="33" name="var" description="" type="\&lt;int&gt;">
            <type by_reference="false">\&lt;int&gt;</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="45" package="Amfphp\Core\Amf">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="40">
          <description>The constructor function for a new Amf object.</description>
          <long-description>&lt;p&gt;All the constructor does is initialize the headers and Messages containers&lt;/p&gt;</long-description>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Amfphp\Core\Amf\Serializer.php" hash="b42722da61d565879d465f91049bf2a2" package="Amfphp\Core\Amf">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Core_Amf"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="21" package="Amfphp\Core\Amf">
      <extends/>
      <implements>\Amfphp_Core_Common_ISerializer</implements>
      <name>Amfphp_Core_Amf_Serializer</name>
      <full_name>\Amfphp_Core_Amf_Serializer</full_name>
      <docblock line="13">
        <description>AmfSerializer manages the job of translating PHP objects into
the actionscript equivalent via Amf.</description>
        <long-description>&lt;p&gt;The main method of the serializer
is the serialize method which takes and AmfObject as it's argument
and builds the resulting Amf Message.&lt;/p&gt;</long-description>
        <tag line="13" name="package" description="Amfphp_Core_Amf"/>
      </docblock>
      <constant namespace="global" line="39" package="Amfphp\Core\Amf">
        <name>MAX_STORED_OBJECTS</name>
        <full_name>MAX_STORED_OBJECTS</full_name>
        <value>1024</value>
        <docblock line="35">
          <description>the maximum amount of objects stored for reference</description>
          <long-description/>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="27" namespace="global" package="Default">
        <name>$outBuffer</name>
        <default/>
        <docblock line="23">
          <description/>
          <long-description/>
          <tag line="23" name="var" description="the output stream" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="33" namespace="global" package="Default">
        <name>$packet</name>
        <default/>
        <docblock line="29">
          <description>packet</description>
          <long-description/>
          <tag line="29" name="var" description="" type="\Amfphp_Core_Amf_Packet">
            <type by_reference="false">\Amfphp_Core_Amf_Packet</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="46" namespace="global" package="Default">
        <name>$Amf0StoredObjects</name>
        <default/>
        <docblock line="41">
          <description>used for Amf0 references</description>
          <long-description/>
          <tag line="41" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="53" namespace="global" package="Default">
        <name>$storedObjects</name>
        <default/>
        <docblock line="48">
          <description>used for Amf3 references</description>
          <long-description/>
          <tag line="48" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="59" namespace="global" package="Default">
        <name>$storedStrings</name>
        <default/>
        <docblock line="55">
          <description>amf3 references to strings</description>
          <long-description/>
          <tag line="55" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="65" namespace="global" package="Default">
        <name>$className2TraitsInfo</name>
        <default/>
        <docblock line="61">
          <description>used for traits references.</description>
          <long-description>&lt;p&gt;key: class name. value: array(reference id, array(property names))&lt;/p&gt;</long-description>
          <tag line="61" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="71" package="Amfphp\Core\Amf">
        <name>serialize</name>
        <full_name>serialize</full_name>
        <docblock line="67">
          <description>converts from php object to binary</description>
          <long-description/>
          <tag line="67" name="param" description="" type="\Amfphp_Core_Amf_Packet" variable="$data">
            <type by_reference="false">\Amfphp_Core_Amf_Packet</type>
          </tag>
        </docblock>
        <argument line="71">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="121" package="Amfphp\Core\Amf">
        <name>resetReferences</name>
        <full_name>resetReferences</full_name>
        <docblock line="118">
          <description>initialize reference arrays and counters.</description>
          <long-description>&lt;p&gt;Call before writing a body or a header, as the indices are local to each message body or header&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="132" package="Amfphp\Core\Amf">
        <name>getOutput</name>
        <full_name>getOutput</full_name>
        <docblock line="128">
          <description>get serialized data output</description>
          <long-description/>
          <tag line="128" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="142" package="Amfphp\Core\Amf">
        <name>writeByte</name>
        <full_name>writeByte</full_name>
        <docblock line="136">
          <description>writeByte writes a singe byte to the output stream
0-255 range</description>
          <long-description/>
          <tag line="136" name="param" description="An int that can be converted to a byte" type="int" variable="$b">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="142">
          <name>$b</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="152" package="Amfphp\Core\Amf">
        <name>writeInt</name>
        <full_name>writeInt</full_name>
        <docblock line="146">
          <description>writeInt takes an int and writes it as 2 bytes to the output stream
0-65535 range</description>
          <long-description/>
          <tag line="146" name="param" description="An integer to convert to a 2 byte binary string" type="int" variable="$n">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="152">
          <name>$n</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="162" package="Amfphp\Core\Amf">
        <name>writeLong</name>
        <full_name>writeLong</full_name>
        <docblock line="156">
          <description>writeLong takes an int, float or double and converts it to a 4 byte binary string and
adds it to the output buffer</description>
          <long-description/>
          <tag line="156" name="param" description="A long to convert to a 4 byte binary string" type="\long" variable="$l">
            <type by_reference="false">\long</type>
          </tag>
        </docblock>
        <argument line="162">
          <name>$l</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="173" package="Amfphp\Core\Amf">
        <name>writeDouble</name>
        <full_name>writeDouble</full_name>
        <docblock line="166">
          <description>writeDouble takes a float as the input and writes it to the output stream.</description>
          <long-description>&lt;p&gt;Then if the system is big-endian, it reverses the bytes order because all
doubles passed via remoting are passed little-endian.&lt;/p&gt;</long-description>
          <tag line="166" name="param" description="The double to add to the output buffer" type="double" variable="$d">
            <type by_reference="false">double</type>
          </tag>
        </docblock>
        <argument line="173">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="190" package="Amfphp\Core\Amf">
        <name>writeUtf</name>
        <full_name>writeUtf</full_name>
        <docblock line="184">
          <description>writeUTF takes and input string, writes the length as an int and then
appends the string to the output buffer</description>
          <long-description/>
          <tag line="184" name="param" description="The string less than 65535 characters to add to the stream" type="string" variable="$s">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="190">
          <name>$s</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="202" package="Amfphp\Core\Amf">
        <name>writeLongUtf</name>
        <full_name>writeLongUtf</full_name>
        <docblock line="195">
          <description>writeLongUTF will write a string longer than 65535 characters.</description>
          <long-description>&lt;p&gt;It works exactly as writeUTF does except uses a long for the length
flag.&lt;/p&gt;</long-description>
          <tag line="195" name="param" description="A string to add to the byte stream" type="string" variable="$s">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="202">
          <name>$s</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="212" package="Amfphp\Core\Amf">
        <name>writeBoolean</name>
        <full_name>writeBoolean</full_name>
        <docblock line="207">
          <description>writeBoolean writes the boolean code (0x01) and the data to the output stream</description>
          <long-description/>
          <tag line="207" name="param" description="The boolean value" type="bool" variable="$d">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="212">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="225" package="Amfphp\Core\Amf">
        <name>writeString</name>
        <full_name>writeString</full_name>
        <docblock line="217">
          <description>writeString writes the string code (0x02) and the UTF8 encoded
string to the output stream.</description>
          <long-description>&lt;p&gt;Note: strings are truncated to 64k max length. Use XML as type
to send longer strings&lt;/p&gt;</long-description>
          <tag line="217" name="param" description="The string data" type="string" variable="$d">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="225">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="241" package="Amfphp\Core\Amf">
        <name>writeXML</name>
        <full_name>writeXML</full_name>
        <docblock line="236">
          <description>writeXML writes the xml code (0x0F) and the XML string to the output stream
Note: strips whitespace</description>
          <long-description/>
          <tag line="236" name="param" description="" type="\Amfphp_Core_Amf_Types_Xml" variable="$d">
            <type by_reference="false">\Amfphp_Core_Amf_Types_Xml</type>
          </tag>
        </docblock>
        <argument line="241">
          <name>$d</name>
          <default/>
          <type>\Amfphp_Core_Amf_Types_Xml</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="253" package="Amfphp\Core\Amf">
        <name>writeDate</name>
        <full_name>writeDate</full_name>
        <docblock line="248">
          <description>writeDate writes the date code (0x0B) and the date value (milliseconds from 1 January 1970) to the output stream, along with an empty unsupported timezone</description>
          <long-description/>
          <tag line="248" name="param" description="The date value" type="\Amfphp_Core_Amf_Types_Date" variable="$d">
            <type by_reference="false">\Amfphp_Core_Amf_Types_Date</type>
          </tag>
        </docblock>
        <argument line="253">
          <name>$d</name>
          <default/>
          <type>\Amfphp_Core_Amf_Types_Date</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="265" package="Amfphp\Core\Amf">
        <name>writeNumber</name>
        <full_name>writeNumber</full_name>
        <docblock line="259">
          <description>writeNumber writes the number code (0x00) and the numeric data to the output stream
All numbers passed through remoting are floats.</description>
          <long-description/>
          <tag line="259" name="param" description="The numeric data" type="int" variable="$d">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="265">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="273" package="Amfphp\Core\Amf">
        <name>writeNull</name>
        <full_name>writeNull</full_name>
        <docblock line="270">
          <description>writeNull writes the null code (0x05) to the output stream</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="280" package="Amfphp\Core\Amf">
        <name>writeUndefined</name>
        <full_name>writeUndefined</full_name>
        <docblock line="277">
          <description>writeUndefined writes the Undefined code (0x06) to the output stream</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="287" package="Amfphp\Core\Amf">
        <name>writeObjectEnd</name>
        <full_name>writeObjectEnd</full_name>
        <docblock line="284">
          <description>writeObjectEnd writes the object end code (0x009) to the output stream</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="299" package="Amfphp\Core\Amf">
        <name>writeArrayOrObject</name>
        <full_name>writeArrayOrObject</full_name>
        <docblock line="292">
          <description>writeArrayOrObject first determines if the PHP array contains all numeric indexes
or a mix of keys.</description>
          <long-description>&lt;p&gt;Then it either writes the array code (0x0A) or the
object code (0x03) and then the associated data.&lt;/p&gt;</long-description>
          <tag line="292" name="param" description="The php array" type="array" variable="$d">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="299">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="352" package="Amfphp\Core\Amf">
        <name>writeReference</name>
        <full_name>writeReference</full_name>
        <docblock line="348">
          <description>write reference</description>
          <long-description/>
          <tag line="348" name="param" description="" type="int" variable="$num">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="352">
          <name>$num</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="364" package="Amfphp\Core\Amf">
        <name>writeObjectFromArray</name>
        <full_name>writeObjectFromArray</full_name>
        <docblock line="357">
          <description>writeObjectFromArray handles writing a php array with string or mixed keys.</description>
          <long-description>&lt;p&gt;It does
not write the object code as that is handled by the writeArrayOrObject and this method
is shared with the CustomClass writer which doesn't use the object code.&lt;/p&gt;</long-description>
          <tag line="357" name="param" description="The php array with string keys" type="array" variable="$d">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="364">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="378" package="Amfphp\Core\Amf">
        <name>writeAnonymousObject</name>
        <full_name>writeAnonymousObject</full_name>
        <docblock line="372">
          <description>handles writing an anoynous object (stdClass)
 can also be a reference</description>
          <long-description/>
          <tag line="372" name="param" description="The php object to write" type="\stdClass" variable="$d">
            <type by_reference="false">\stdClass</type>
          </tag>
        </docblock>
        <argument line="378">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="398" package="Amfphp\Core\Amf">
        <name>writeTypedObject</name>
        <full_name>writeTypedObject</full_name>
        <docblock line="391">
          <description>writeTypedObject takes an instance of a class and writes the variables defined
in it to the output stream.</description>
          <long-description>&lt;p&gt;To accomplish this we just blanket grab all of the object vars with get_object_vars, minus the Amfphp_Core_Amf_Constants::FIELD_EXPLICIT_TYPE field, whiuch is used as class name&lt;/p&gt;</long-description>
          <tag line="391" name="param" description="The object to serialize the properties. The deserializer looks for Amfphp_Core_Amf_Constants::FIELD_EXPLICIT_TYPE on this object and writes it as the class name." type="object" variable="$d">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="398">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="428" package="Amfphp\Core\Amf">
        <name>writeData</name>
        <full_name>writeData</full_name>
        <docblock line="421">
          <description>writeData checks to see if the type was declared and then either
auto negotiates the type or relies on the user defined type to
serialize the data into Amf</description>
          <long-description/>
          <tag line="421" name="param" description="The data" type="mixed" variable="$d">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="428">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="479" package="Amfphp\Core\Amf">
        <name>writeAmf3Data</name>
        <full_name>writeAmf3Data</full_name>
        <docblock line="474">
          <description>write amf 3 data</description>
          <long-description/>
          <tag line="474" name="todo" description="no type markers (&quot;\6', for example) in this method!"/>
          <tag line="474" name="param" description="" type="mixed" variable="$d">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="479">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="533" package="Amfphp\Core\Amf">
        <name>writeAmf3Undefined</name>
        <full_name>writeAmf3Undefined</full_name>
        <docblock line="528">
          <description>Write undefined (Amf3).</description>
          <long-description/>
          <tag line="528" name="return" description="" type="\nothing">
            <type by_reference="false">\nothing</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="542" package="Amfphp\Core\Amf">
        <name>writeAmf3Null</name>
        <full_name>writeAmf3Null</full_name>
        <docblock line="537">
          <description>Write NULL (Amf3).</description>
          <long-description/>
          <tag line="537" name="return" description="" type="\nothing">
            <type by_reference="false">\nothing</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="553" package="Amfphp\Core\Amf">
        <name>writeAmf3Bool</name>
        <full_name>writeAmf3Bool</full_name>
        <docblock line="546">
          <description>Write a boolean (Amf3).</description>
          <long-description/>
          <tag line="546" name="param" description="the boolean to serialise" type="bool" variable="$d">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="546" name="return" description="" type="\nothing">
            <type by_reference="false">\nothing</type>
          </tag>
        </docblock>
        <argument line="553">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="566" package="Amfphp\Core\Amf">
        <name>writeAmf3Int</name>
        <full_name>writeAmf3Int</full_name>
        <docblock line="557">
          <description>Write an (un-)signed integer (Amf3).</description>
          <long-description/>
          <tag line="557" name="see" description="\getAmf3Int()" refers="\getAmf3Int()"/>
          <tag line="557" name="param" description="the integer to serialise" type="int" variable="$d">
            <type by_reference="false">int</type>
          </tag>
          <tag line="557" name="return" description="" type="\nothing">
            <type by_reference="false">\nothing</type>
          </tag>
        </docblock>
        <argument line="566">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="584" package="Amfphp\Core\Amf">
        <name>writeAmf3String</name>
        <full_name>writeAmf3String</full_name>
        <docblock line="570">
          <description>Write a string (Amf3).</description>
          <long-description>&lt;p&gt;Strings are stored in a cache and in case the same string
is written again, a reference to the string is sent instead of the string itself.&lt;/p&gt;

&lt;p&gt;note: Sending strings larger than 268435455 (2^28-1 byte) will (silently) fail!&lt;/p&gt;

&lt;p&gt;note: The string marker is NOT sent here and has to be sent before, if needed.&lt;/p&gt;</long-description>
          <tag line="570" name="param" description="the string to send" type="string" variable="$d">
            <type by_reference="false">string</type>
          </tag>
          <tag line="570" name="return" description="reference index inside the lookup table is returned. In case of an empty&#13;&#10;string which is sent in a special way, NULL is returned." type="\The">
            <type by_reference="false">\The</type>
          </tag>
        </docblock>
        <argument line="584">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="609" package="Amfphp\Core\Amf">
        <name>writeAmf3AnonymousObject</name>
        <full_name>writeAmf3AnonymousObject</full_name>
        <docblock line="598">
          <description>handles writing an anoynous object (stdClass)
 can also be a reference
Also creates a bogus traits entry, as even an anonymous object has traits.</description>
          <long-description>&lt;p&gt;In this way a reference to a class trait will have the right id.&lt;/p&gt;</long-description>
          <tag line="598" name="todo" description="it would seem that to create only one traits entry for an anonymous object would be the way to go. this&#13;&#10;however messes things up in both Flash and Charles Proxy. For testing call discovery service using AMF. investigate."/>
          <tag line="598" name="param" description="The php object to write" type="\stdClass" variable="$d">
            <type by_reference="false">\stdClass</type>
          </tag>
          <tag line="598" name="param" description="Boolean This is used by writeAmf3Array, where the reference has already been taken care of,&#13;&#10;so there this method is called with false" type="\doReference" variable="$doReference">
            <type by_reference="false">\doReference</type>
          </tag>
        </docblock>
        <argument line="609">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
        <argument line="609">
          <name>$doReference</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="638" package="Amfphp\Core\Amf">
        <name>writeAmf3Array</name>
        <full_name>writeAmf3Array</full_name>
        <docblock line="634">
          <description>write amf3 array</description>
          <long-description/>
          <tag line="634" name="param" description="" type="array" variable="$d">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="638">
          <name>$d</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="703" package="Amfphp\Core\Amf">
        <name>getAmf3Int</name>
        <full_name>getAmf3Int</full_name>
        <docblock line="688">
          <description>Return the serialisation of the given integer (Amf3).</description>
          <long-description>&lt;p&gt;note: There does not seem to be a way to distinguish between signed and unsigned integers.
This method just sends the lowest 29 bit as-is, and the receiver is responsible to interpret
the result as signed or unsigned based on some context.&lt;/p&gt;

&lt;p&gt;note: The limit imposed by Amf3 is 29 bit. So in case the given integer is longer than 29 bit,
only the lowest 29 bits will be serialised. No error will be logged!&lt;/p&gt;</long-description>
          <tag line="688" name="TODO" description="refactor into writeAmf3Int"/>
          <tag line="688" name="param" description="the integer to serialise" type="int" variable="$d">
            <type by_reference="false">int</type>
          </tag>
          <tag line="688" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="703">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="736" package="Amfphp\Core\Amf">
        <name>writeAmf3Number</name>
        <full_name>writeAmf3Number</full_name>
        <docblock line="732">
          <description>write Amf3 Number</description>
          <long-description/>
          <tag line="732" name="param" description="" type="\number" variable="$d">
            <type by_reference="false">\number</type>
          </tag>
        </docblock>
        <argument line="736">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="751" package="Amfphp\Core\Amf">
        <name>writeAmf3Xml</name>
        <full_name>writeAmf3Xml</full_name>
        <docblock line="747">
          <description>write Amfphp_Core_Amf_Types_Xml in amf3</description>
          <long-description/>
          <tag line="747" name="param" description="" type="\Amfphp_Core_Amf_Types_Xml" variable="$d">
            <type by_reference="false">\Amfphp_Core_Amf_Types_Xml</type>
          </tag>
        </docblock>
        <argument line="751">
          <name>$d</name>
          <default/>
          <type>\Amfphp_Core_Amf_Types_Xml</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="761" package="Amfphp\Core\Amf">
        <name>writeAmf3XmlDocument</name>
        <full_name>writeAmf3XmlDocument</full_name>
        <docblock line="757">
          <description>write Amfphp_Core_Amf_Types_XmlDocument in amf3</description>
          <long-description/>
          <tag line="757" name="param" description="" type="\Amfphp_Core_Amf_Types_XmlDocument" variable="$d">
            <type by_reference="false">\Amfphp_Core_Amf_Types_XmlDocument</type>
          </tag>
        </docblock>
        <argument line="761">
          <name>$d</name>
          <default/>
          <type>\Amfphp_Core_Amf_Types_XmlDocument</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="771" package="Amfphp\Core\Amf">
        <name>writeAmf3Date</name>
        <full_name>writeAmf3Date</full_name>
        <docblock line="767">
          <description>write Amfphp_Core_Amf_Types_Date in amf 3</description>
          <long-description/>
          <tag line="767" name="param" description="" type="\Amfphp_Core_Amf_Types_Date" variable="$d">
            <type by_reference="false">\Amfphp_Core_Amf_Types_Date</type>
          </tag>
        </docblock>
        <argument line="771">
          <name>$d</name>
          <default/>
          <type>\Amfphp_Core_Amf_Types_Date</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="781" package="Amfphp\Core\Amf">
        <name>writeAmf3ByteArray</name>
        <full_name>writeAmf3ByteArray</full_name>
        <docblock line="777">
          <description>write Amfphp_Core_Amf_Types_ByteArray in amf3</description>
          <long-description/>
          <tag line="777" name="param" description="" type="\Amfphp_Core_Amf_Types_ByteArray" variable="$d">
            <type by_reference="false">\Amfphp_Core_Amf_Types_ByteArray</type>
          </tag>
        </docblock>
        <argument line="781">
          <name>$d</name>
          <default/>
          <type>\Amfphp_Core_Amf_Types_ByteArray</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="809" package="Amfphp\Core\Amf">
        <name>handleReference</name>
        <full_name>handleReference</full_name>
        <docblock line="791">
          <description>looks if $obj already has a reference.</description>
          <long-description>&lt;p&gt;If it does, write it, and return true. If not, add it to the references array.
Depending on whether or not the spl_object_hash function can be used ( available (PHP &gt;= 5.2), and can only be used on an object)
things are handled a bit differently:
- if possible, objects are hashed and the hash is used as a key to the references array. So the array has the structure hash =&gt; reference
- if not, the object is pushed to the references array, and array_search is used. So the array has the structure reference =&gt; object.
maxing out the number of stored references improves performance(tested with an array of 9000 identical objects). This may be because isset's performance
is linked to the size of the array. weird...
note on using $references[$count] = &amp;amp;$obj; rather than
$references[] = &amp;amp;$obj;
the first one is right, the second is not, as with the second one we could end up with the following:
some object hash =&gt; 0, 0 =&gt; array. (it should be 1 =&gt; array)&lt;/p&gt;

&lt;p&gt;This also means that 2 completely separate instances of a class but with the same values will be written fully twice if we can't use the hash system&lt;/p&gt;</long-description>
          <tag line="791" name="param" description="" type="mixed" variable="$obj">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="791" name="param" description="" type="array" variable="$references">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="809">
          <name>$obj</name>
          <default/>
          <type/>
        </argument>
        <argument line="809">
          <name>$references</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="854" package="Amfphp\Core\Amf">
        <name>writeAmf3TypedObject</name>
        <full_name>writeAmf3TypedObject</full_name>
        <docblock line="848">
          <description>writes a typed object.</description>
          <long-description>&lt;p&gt;Type is determined by having an "explicit type" field. If this field is
not set, call writeAmf3AnonymousObject
write all properties as sealed members.&lt;/p&gt;</long-description>
          <tag line="848" name="param" description="" type="object" variable="$d">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="854">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Core\Amf\Types\ByteArray.php" hash="eca7d0651fbf73cb6614372c9da8ac9b" package="Amfphp\Core\Amf">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Core_Amf"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="19" package="Amfphp\Core\Amf\Types">
      <extends/>
      <name>Amfphp_Core_Amf_Types_ByteArray</name>
      <full_name>\Amfphp_Core_Amf_Types_ByteArray</full_name>
      <docblock line="13">
        <description>Amf byte arrays will be converted to and from this class</description>
        <long-description/>
        <tag line="13" name="package" description="Amfphp_Core_Amf_Types"/>
        <tag line="13" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="25" namespace="global" package="Default">
        <name>$data</name>
        <default/>
        <docblock line="21">
          <description>data</description>
          <long-description/>
          <tag line="21" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="31" package="Amfphp\Core\Amf\Types">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="27">
          <description>constructor</description>
          <long-description/>
          <tag line="27" name="param" description="" type="string" variable="$data">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Core\Amf\Types\Date.php" hash="4577a6eddfdb1c66e456dd1f6f65859f" package="Amfphp\Core\Amf\Types">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Core_Amf_Types"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="19" package="Amfphp\Core\Amf\Types">
      <extends/>
      <name>Amfphp_Core_Amf_Types_Date</name>
      <full_name>\Amfphp_Core_Amf_Types_Date</full_name>
      <docblock line="12">
        <description>Amf dates will be converted to and from this class.</description>
        <long-description>&lt;p&gt;The PHP DateTime class is for PHP &gt;= 5.2.0, and setTimestamp for PHP &gt;= 5.3.0, so it can't be used in amfPHP
Of course feel free to use it yourself if your host supports it.&lt;/p&gt;</long-description>
        <tag line="12" name="package" description="Amfphp_Core_Amf_Types"/>
        <tag line="12" name="author" description="Danny Kopping"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="25" namespace="global" package="Default">
        <name>$timeStamp</name>
        <default/>
        <docblock line="21">
          <description>number of ms since 1st Jan 1970</description>
          <long-description/>
          <tag line="21" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="31" package="Amfphp\Core\Amf\Types">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="27">
          <description>time stamp</description>
          <long-description/>
          <tag line="27" name="param" description="" type="integer" variable="$timeStamp">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$timeStamp</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Core\Amf\Types\Undefined.php" hash="ae33bf7cdbb02e5ba74e2b9b223b6dde" package="Amfphp\Core\Amf">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Core_Amf"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="17" package="Amfphp\Core\Amf\Types">
      <extends/>
      <name>Amfphp_Core_Amf_Types_Undefined</name>
      <full_name>\Amfphp_Core_Amf_Types_Undefined</full_name>
      <docblock line="12">
        <description>Amf Undefined will be converted to and from this class</description>
        <long-description/>
        <tag line="12" name="package" description="Amfphp_Core_Amf_Types"/>
        <tag line="12" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
    </class>
  </file>
  <file path="Amfphp\Core\Amf\Types\Xml.php" hash="a294b1cd13ea62dba70dfc283d75ebe0" package="Amfphp\Core\Amf">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Core_Amf"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="21" package="Amfphp\Core\Amf\Types">
      <extends/>
      <name>Amfphp_Core_Amf_Types_Xml</name>
      <full_name>\Amfphp_Core_Amf_Types_Xml</full_name>
      <docblock line="13">
        <description>Amf xml (not the AS3/AMF3 XMLDocument) will be converted to and from this class.</description>
        <long-description>&lt;p&gt;PHP has many libs to manipulate XML, and it is not up to amfPHP to choose which one to use. Furthermore, AS3 has 2 XML types, XML and and XMLDocument.
So amfPHP just wraps the string data in these types, and iut is up to the user to parse the contained string data&lt;/p&gt;</long-description>
        <tag line="13" name="package" description="Amfphp_Core_Amf_Types"/>
        <tag line="13" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="27" namespace="global" package="Default">
        <name>$data</name>
        <default/>
        <docblock line="23">
          <description>data</description>
          <long-description/>
          <tag line="23" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="33" package="Amfphp\Core\Amf\Types">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="29">
          <description>constructor</description>
          <long-description/>
          <tag line="29" name="param" description="" type="string" variable="$data">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="33">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Core\Amf\Types\XmlDocument.php" hash="bd05519a982c347d24db6d64cb9013d9" package="Amfphp\Core\Amf">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Core_Amf"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="20" package="Amfphp\Core\Amf\Types">
      <extends/>
      <name>Amfphp_Core_Amf_Types_XmlDocument</name>
      <full_name>\Amfphp_Core_Amf_Types_XmlDocument</full_name>
      <docblock line="13">
        <description>AS3 XMLDocument type.</description>
        <long-description/>
        <tag line="13" name="see" description="\global\Amfphp_Core_Amf_Types_Xml" refers="\global\Amfphp_Core_Amf_Types_Xml"/>
        <tag line="13" name="package" description="Amfphp_Core_Amf_Types"/>
        <tag line="13" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="26" namespace="global" package="Default">
        <name>$data</name>
        <default/>
        <docblock line="22">
          <description>data</description>
          <long-description/>
          <tag line="22" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="32" package="Amfphp\Core\Amf\Types">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="28">
          <description>constructor</description>
          <long-description/>
          <tag line="28" name="param" description="" type="string" variable="$data">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Core\Amf\Util.php" hash="36e4742989fd6d5e58882f6ff7d4f963" package="Amfphp\Core\Amf">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Core_Amf"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="19" package="Amfphp\Core\Amf">
      <extends/>
      <name>Amfphp_Core_Amf_Util</name>
      <full_name>\Amfphp_Core_Amf_Util</full_name>
      <docblock line="13">
        <description>utils for Amf handling</description>
        <long-description/>
        <tag line="13" name="package" description="Amfphp_Core_Amf"/>
        <tag line="13" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="25" package="Amfphp\Core\Amf">
        <name>isSystemBigEndian</name>
        <full_name>isSystemBigEndian</full_name>
        <docblock line="21">
          <description>looks if the system is Big Endain or not</description>
          <long-description/>
          <tag line="21" name="return" description="" type="\&lt;Boolean&gt;">
            <type by_reference="false">\&lt;Boolean&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="40" package="Amfphp\Core\Amf">
        <name>applyFunctionToContainedObjects</name>
        <full_name>applyFunctionToContainedObjects</full_name>
        <docblock line="30">
          <description>applies a function to all objects contained by $obj and $obj itself.</description>
          <long-description>&lt;p&gt;iterates on $obj and its sub objects, which can iether be arrays or objects&lt;/p&gt;</long-description>
          <tag line="30" name="param" description="the object/array that will be iterated on" type="mixed" variable="$obj">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="30" name="param" description="the function to apply to obj and subobjs. must take 1 parameter, and return the modified object" type="array" variable="$callBack">
            <type by_reference="false">array</type>
          </tag>
          <tag line="30" name="param" description="current recursion depth. The first call should be made with this set 0. default is 0" type="int" variable="$recursionDepth">
            <type by_reference="false">int</type>
          </tag>
          <tag line="30" name="param" description="default is 30" type="int" variable="$maxRecursionDepth">
            <type by_reference="false">int</type>
          </tag>
          <tag line="30" name="param" description="ignore objects with type in Amfphp_Core_Amf_Types package. could maybe be replaced by a regexp, but this is better for performance" type="bool" variable="$ignoreAmfTypes">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="30" name="return" description="array or object, depending on type of $obj" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$obj</name>
          <default/>
          <type/>
        </argument>
        <argument line="40">
          <name>$callBack</name>
          <default/>
          <type/>
        </argument>
        <argument line="40">
          <name>$recursionDepth</name>
          <default>0</default>
          <type/>
        </argument>
        <argument line="40">
          <name>$maxRecursionDepth</name>
          <default>30</default>
          <type/>
        </argument>
        <argument line="40">
          <name>$ignoreAmfTypes</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="84" package="Amfphp\Core\Amf">
        <name>is_undefined</name>
        <full_name>is_undefined</full_name>
        <docblock line="77">
          <description>Determines whether an object is the ActionScript type 'undefined'</description>
          <long-description/>
          <tag line="77" name="static" description=""/>
          <tag line="77" name="param" description="" type="\" variable="$obj"/>
          <tag line="77" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="84">
          <name>$obj</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="95" package="Amfphp\Core\Amf">
        <name>is_byteArray</name>
        <full_name>is_byteArray</full_name>
        <docblock line="88">
          <description>Determines whether an object is the ActionScript type 'ByteArray'</description>
          <long-description/>
          <tag line="88" name="static" description=""/>
          <tag line="88" name="param" description="" type="\" variable="$obj"/>
          <tag line="88" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="95">
          <name>$obj</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="106" package="Amfphp\Core\Amf">
        <name>is_date</name>
        <full_name>is_date</full_name>
        <docblock line="99">
          <description>Determines whether an object is the ActionScript type 'Date'</description>
          <long-description/>
          <tag line="99" name="static" description=""/>
          <tag line="99" name="param" description="" type="\" variable="$obj"/>
          <tag line="99" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="106">
          <name>$obj</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="117" package="Amfphp\Core\Amf">
        <name>is_Xml</name>
        <full_name>is_Xml</full_name>
        <docblock line="110">
          <description>Determines whether an object is the ActionScript type 'XML'</description>
          <long-description/>
          <tag line="110" name="static" description=""/>
          <tag line="110" name="param" description="" type="\" variable="$obj"/>
          <tag line="110" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="117">
          <name>$obj</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="128" package="Amfphp\Core\Amf">
        <name>is_XmlDocument</name>
        <full_name>is_XmlDocument</full_name>
        <docblock line="121">
          <description>Determines whether an object is the ActionScript type 'XmlDoument'</description>
          <long-description/>
          <tag line="121" name="static" description=""/>
          <tag line="121" name="param" description="" type="\" variable="$obj"/>
          <tag line="121" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="128">
          <name>$obj</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Core\Common\ClassFindInfo.php" hash="9fa3d39938044009d9d4eed6d9465f60" package="Amfphp\Core\Common">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Core_Common"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="20" package="Amfphp\Core\Common">
      <extends/>
      <name>Amfphp_Core_Common_ClassFindInfo</name>
      <full_name>\Amfphp_Core_Common_ClassFindInfo</full_name>
      <docblock line="13">
        <description>The information necessary for a service router to be able to load a class' file and instanciate it
could be extended later with namespaces when they become mainstream</description>
        <long-description/>
        <tag line="13" name="package" description="Amfphp_Core_Common"/>
        <tag line="13" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="26" namespace="global" package="Default">
        <name>$absolutePath</name>
        <default/>
        <docblock line="22">
          <description>the absolute path to the file containing the class definition</description>
          <long-description/>
          <tag line="22" name="var" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="32" namespace="global" package="Default">
        <name>$className</name>
        <default/>
        <docblock line="28">
          <description>the name of the class.</description>
          <long-description/>
          <tag line="28" name="var" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="39" package="Amfphp\Core\Common">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="34">
          <description>constructor</description>
          <long-description/>
          <tag line="34" name="param" description="" type="String" variable="$absolutePath">
            <type by_reference="false">String</type>
          </tag>
          <tag line="34" name="param" description="" type="String" variable="$className">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$absolutePath</name>
          <default/>
          <type/>
        </argument>
        <argument line="39">
          <name>$className</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Core\Common\IDeserializedRequestHandler.php" hash="c7b1f69122db80e566ce55c50008d09f" package="Amfphp\Core\Common">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Core_Common"/>
    </docblock>
    <interface namespace="global" line="18" package="Amfphp\Core\Common">
      <name>Amfphp_Core_Common_IDeserializedRequestHandler</name>
      <full_name>\Amfphp_Core_Common_IDeserializedRequestHandler</full_name>
      <docblock line="13">
        <description>interface for a class that can handle a deserialized request</description>
        <long-description/>
        <tag line="13" name="package" description="Amfphp_Core_Common"/>
        <tag line="13" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="26" package="Amfphp\Core\Common">
        <name>handleDeserializedRequest</name>
        <full_name>handleDeserializedRequest</full_name>
        <docblock line="20">
          <description>handle the deserialized request, usually by making a series of calls to a service.</description>
          <long-description>&lt;p&gt;This should not handle exceptions, as this is done separately&lt;/p&gt;</long-description>
          <tag line="20" name="param" description="For Amf, this is an AmfPacket" type="mixed" variable="$deserializedRequest">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="20" name="param" description="the service router created and configured by the gateway" type="\Amfphp_Core_Common_ServiceRouter" variable="$serviceRouter">
            <type by_reference="false">\Amfphp_Core_Common_ServiceRouter</type>
          </tag>
          <tag line="20" name="return" description="the response object.  For Amf, this is an AmfPacket" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="26">
          <name>$deserializedRequest</name>
          <default/>
          <type/>
        </argument>
        <argument line="26">
          <name>$serviceRouter</name>
          <default/>
          <type>\Amfphp_Core_Common_ServiceRouter</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="Amfphp\Core\Common\IDeserializer.php" hash="aba783b9ff218b39acc4a37106523724" package="Amfphp\Core\Common">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Core_Common"/>
    </docblock>
    <interface namespace="global" line="17" package="Amfphp\Core\Common">
      <name>Amfphp_Core_Common_IDeserializer</name>
      <full_name>\Amfphp_Core_Common_IDeserializer</full_name>
      <docblock line="12">
        <description>interface for deserializers.</description>
        <long-description/>
        <tag line="12" name="package" description="Amfphp_Core_Common"/>
        <tag line="12" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="26" package="Amfphp\Core\Common">
        <name>deserialize</name>
        <full_name>deserialize</full_name>
        <docblock line="19">
          <description>deserialize the data.</description>
          <long-description/>
          <tag line="19" name="param" description="typically the $_GET array." type="array" variable="$getData">
            <type by_reference="false">array</type>
          </tag>
          <tag line="19" name="param" description="typically the $_POST array." type="array" variable="$postData">
            <type by_reference="false">array</type>
          </tag>
          <tag line="19" name="param" description="" type="String" variable="$rawPostData">
            <type by_reference="false">String</type>
          </tag>
          <tag line="19" name="return" description="the deserialized data. For example an Amf packet." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="26">
          <name>$getData</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="26">
          <name>$postData</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="26">
          <name>$rawPostData</name>
          <default/>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="Amfphp\Core\Common\IExceptionHandler.php" hash="c693158cb633a4eb4f6578ad7e99e66b" package="Amfphp\Core\Common">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Core_Common"/>
    </docblock>
    <interface namespace="global" line="20" package="Amfphp\Core\Common">
      <name>Amfphp_Core_Common_IExceptionHandler</name>
      <full_name>\Amfphp_Core_Common_IExceptionHandler</full_name>
      <docblock line="13">
        <description>An exception handler is passed an exception and must translate that into something that is serializable.</description>
        <long-description>&lt;p&gt;In the case of Amf, it must return an Amfphp_Core_Amf_Packet object
containing the relevant information&lt;/p&gt;</long-description>
        <tag line="13" name="package" description="Amfphp_Core_Common"/>
        <tag line="13" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="26" package="Amfphp\Core\Common">
        <name>handleException</name>
        <full_name>handleException</full_name>
        <docblock line="21">
          <description>generates an object describing the exception.</description>
          <long-description/>
          <tag line="21" name="param" description="the exception object to analyze" type="\Exception" variable="$exception">
            <type by_reference="false">\Exception</type>
          </tag>
          <tag line="21" name="return" description="an object describing the error, that will be serialized and sent back to the client" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="26">
          <name>$exception</name>
          <default/>
          <type>\Exception</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="Amfphp\Core\Common\ISerializer.php" hash="f809e0650088a4fcbafdfbfda71962c7" package="Amfphp\Core\Common">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Core_Common"/>
    </docblock>
    <interface namespace="global" line="17" package="Amfphp\Core\Common">
      <name>Amfphp_Core_Common_ISerializer</name>
      <full_name>\Amfphp_Core_Common_ISerializer</full_name>
      <docblock line="12">
        <description>interface for serializers.</description>
        <long-description/>
        <tag line="12" name="package" description="Amfphp_Core_Common"/>
        <tag line="12" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="24" package="Amfphp\Core\Common">
        <name>serialize</name>
        <full_name>serialize</full_name>
        <docblock line="19">
          <description>Calling this executes the serialization.</description>
          <long-description>&lt;p&gt;The return type is noted as a String, but is a binary stream. echo it to the output buffer&lt;/p&gt;</long-description>
          <tag line="19" name="param" description="the data to serialize." type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="19" name="return" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="Amfphp\Core\Common\ServiceCallParameters.php" hash="4411ce67541f27112362ac43800736d2" package="Amfphp\Core\Common">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Core_Common"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="19" package="Amfphp\Core\Common">
      <extends/>
      <name>Amfphp_Core_Common_ServiceCallParameters</name>
      <full_name>\Amfphp_Core_Common_ServiceCallParameters</full_name>
      <docblock line="12">
        <description>place holder class for the variables necessary to make a service call</description>
        <long-description/>
        <tag line="12" name="package" description="Amfphp_Core_Common"/>
        <tag line="12" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="29" namespace="global" package="Default">
        <name>$serviceName</name>
        <default/>
        <docblock line="22">
          <description>the name of the service.</description>
          <long-description>&lt;p&gt;The service name can either be just the name of the class (TestService) or include a path(package/TestService)
separator for path can only be '/'&lt;/p&gt;</long-description>
          <tag line="22" name="var" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="35" namespace="global" package="Default">
        <name>$methodName</name>
        <default/>
        <docblock line="31">
          <description>the name of the method to execute on the service object</description>
          <long-description/>
          <tag line="31" name="var" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="41" namespace="global" package="Default">
        <name>$methodParameters</name>
        <default/>
        <docblock line="37">
          <description>the parameters to pass to the method being called on the service</description>
          <long-description/>
          <tag line="37" name="var" description="" type="\&lt;array&gt;">
            <type by_reference="false">\&lt;array&gt;</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="Amfphp\Core\Common\ServiceRouter.php" hash="6942c6b5329e055e95f74f7a437ea7ac" package="Amfphp\Core\Common">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Core_Common"/>
    </docblock>
    <include line="76" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="88" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="21" package="Amfphp\Core\Common">
      <extends/>
      <name>Amfphp_Core_Common_ServiceRouter</name>
      <full_name>\Amfphp_Core_Common_ServiceRouter</full_name>
      <docblock line="13">
        <description>The Service Router class is responsible for executing the remote service method and returning it's value.</description>
        <long-description>&lt;p&gt;based on the old 'Executive' of php 1.9. It looks for a service either explicitely defined in a
ClassFindInfo object, or in a service folder.&lt;/p&gt;</long-description>
        <tag line="13" name="package" description="Amfphp_Core_Common"/>
        <tag line="13" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <constant namespace="global" line="29" package="Amfphp\Core\Common">
        <name>FILTER_SERVICE_OBJECT</name>
        <full_name>FILTER_SERVICE_OBJECT</full_name>
        <value>'FILTER_SERVICE_OBJECT'</value>
        <docblock line="22">
          <description>filter called when the service object is created.</description>
          <long-description>&lt;p&gt;Useful for authentication&lt;/p&gt;</long-description>
          <tag line="22" name="param" description="" type="Object" variable="$serviceObject">
            <type by_reference="false">Object</type>
          </tag>
          <tag line="22" name="param" description="" type="string" variable="$serviceName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="22" name="param" description="" type="string" variable="$methodName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="22" name="param" description="" type="array" variable="$parameters">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="public" line="34" namespace="global" package="Default">
        <name>$serviceFolderPaths</name>
        <default/>
        <docblock line="30">
          <description>paths to folders containing services(relative or absolute)</description>
          <long-description/>
          <tag line="30" name="var" description="of paths" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="40" namespace="global" package="Default">
        <name>$serviceNames2ClassFindInfo</name>
        <default/>
        <docblock line="36">
          <description/>
          <long-description/>
          <tag line="36" name="var" description="of ClassFindInfo" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="46" namespace="global" package="Default">
        <name>$checkArgumentCount</name>
        <default/>
        <docblock line="42">
          <description>check parameters.</description>
          <long-description>&lt;p&gt;This is useful for development, but should be disabled for production&lt;/p&gt;</long-description>
          <tag line="42" name="var" description="" type="Boolean">
            <type by_reference="false">Boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="54" package="Amfphp\Core\Common">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="48">
          <description>constructor</description>
          <long-description/>
          <tag line="48" name="param" description="folders containing service classes" type="array" variable="$serviceFolderPaths">
            <type by_reference="false">array</type>
          </tag>
          <tag line="48" name="param" description="a dictionary of service classes represented in a ClassFindInfo." type="array" variable="$serviceNames2ClassFindInfo">
            <type by_reference="false">array</type>
          </tag>
          <tag line="48" name="param" description="" type="Boolean" variable="$checkArgumentCount">
            <type by_reference="false">Boolean</type>
          </tag>
        </docblock>
        <argument line="54">
          <name>$serviceFolderPaths</name>
          <default/>
          <type/>
        </argument>
        <argument line="54">
          <name>$serviceNames2ClassFindInfo</name>
          <default/>
          <type/>
        </argument>
        <argument line="54">
          <name>$checkArgumentCount</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="72" package="Amfphp\Core\Common">
        <name>getServiceObjectStatically</name>
        <full_name>getServiceObjectStatically</full_name>
        <docblock line="60">
          <description>get a service object by its name.</description>
          <long-description>&lt;p&gt;Looks for a match in serviceNames2ClassFindInfo, then in the defined service folders.
If none found, an exception is thrown&lt;/p&gt;</long-description>
          <tag line="60" name="todo" description="maybe option for a fully qualified class name.&#13;&#10;this method is static so that it can be used also by the discovery service&#13;&#10; '__' are replaced by '/' to help the client generator support packages without messing with folders and the like"/>
          <tag line="60" name="param" description="" type="\type" variable="$serviceName">
            <type by_reference="false">\type</type>
          </tag>
          <tag line="60" name="param" description="" type="array" variable="$serviceFolderPaths">
            <type by_reference="false">array</type>
          </tag>
          <tag line="60" name="param" description="" type="array" variable="$serviceNames2ClassFindInfo">
            <type by_reference="false">array</type>
          </tag>
          <tag line="60" name="return" description="service object" type="Object">
            <type by_reference="false">Object</type>
          </tag>
        </docblock>
        <argument line="72">
          <name>$serviceName</name>
          <default/>
          <type/>
        </argument>
        <argument line="72">
          <name>$serviceFolderPaths</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="72">
          <name>$serviceNames2ClassFindInfo</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="107" package="Amfphp\Core\Common">
        <name>getServiceObject</name>
        <full_name>getServiceObject</full_name>
        <docblock line="102">
          <description>get service object</description>
          <long-description/>
          <tag line="102" name="param" description="" type="String" variable="$serviceName">
            <type by_reference="false">String</type>
          </tag>
          <tag line="102" name="return" description="service object" type="Object">
            <type by_reference="false">Object</type>
          </tag>
        </docblock>
        <argument line="107">
          <name>$serviceName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="122" package="Amfphp\Core\Common">
        <name>executeServiceCall</name>
        <full_name>executeServiceCall</full_name>
        <docblock line="111">
          <description>loads and instanciates a service class matching $serviceName, then calls the function defined by $methodName using $parameters as parameters
throws an exception if service not found.</description>
          <long-description>&lt;p&gt;if the service exists but not the function, an exception is thrown by call_user_func_array. It is pretty explicit, so no further code was added&lt;/p&gt;</long-description>
          <tag line="111" name="param" description="" type="string" variable="$serviceName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="111" name="param" description="" type="string" variable="$methodName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="111" name="param" description="" type="array" variable="$parameters">
            <type by_reference="false">array</type>
          </tag>
          <tag line="111" name="return" description="the result of the function call" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="122">
          <name>$serviceName</name>
          <default/>
          <type/>
        </argument>
        <argument line="122">
          <name>$methodName</name>
          <default/>
          <type/>
        </argument>
        <argument line="122">
          <name>$parameters</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Core\Config.php" hash="6b1cd021c2c6558a031ca939e9878f74" package="Amfphp\Core">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Core"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="19" package="Amfphp\Core">
      <extends/>
      <name>Amfphp_Core_Config</name>
      <full_name>\Amfphp_Core_Config</full_name>
      <docblock line="13">
        <description>responsable for loading and maintaining Amfphp configuration</description>
        <long-description/>
        <tag line="13" name="package" description="Amfphp_Core"/>
        <tag line="13" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <constant namespace="global" line="77" package="Amfphp\Core">
        <name>CONFIG_RETURN_ERROR_DETAILS</name>
        <full_name>CONFIG_RETURN_ERROR_DETAILS</full_name>
        <value>'returnErrorDetails'</value>
        <docblock line="67">
          <description>if true, there will be detailed information in the error messages, including confidential information like paths.</description>
          <long-description>&lt;p&gt;So it is advised to set to true for development purposes and to false in production.
default is true.
Set in the shared config.
for example
$this-&gt;sharedConfig[self::CONFIG_RETURN_ERROR_DETAILS] = true;&lt;/p&gt;</long-description>
          <tag line="67" name="var" description="" type="Boolean">
            <type by_reference="false">Boolean</type>
          </tag>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="public" line="25" namespace="global" package="Default">
        <name>$serviceFolderPaths</name>
        <default/>
        <docblock line="21">
          <description>paths to folders containing services(relative or absolute)</description>
          <long-description/>
          <tag line="21" name="var" description="of paths" type="\&lt;array&gt;">
            <type by_reference="false">\&lt;array&gt;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="34" namespace="global" package="Default">
        <name>$serviceNames2ClassFindInfo</name>
        <default/>
        <docblock line="27">
          <description>a dictionary of service classes represented in a ClassFindInfo.</description>
          <long-description>&lt;p&gt;The key is the name of the service, the value is the class find info.
for example: $serviceNames2ClassFindInfo["AmfphpDiscoveryService"] = new Amfphp_Core_Common_ClassFindInfo( dirname(&lt;strong&gt;FILE&lt;/strong&gt;) . '/AmfphpDiscoveryService.php', 'AmfphpDiscoveryService');
The forward slash is important, don't use "\'!&lt;/p&gt;</long-description>
          <tag line="27" name="var" description="of ClassFindInfo" type="\&lt;array&gt;">
            <type by_reference="false">\&lt;array&gt;</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="42" namespace="global" package="Default">
        <name>$checkArgumentCount</name>
        <default>true</default>
        <docblock line="36">
          <description>set to true if you want the service router to check if the number of arguments received by amfPHP matches with the method being called.</description>
          <long-description>&lt;p&gt;This should be set to false in production for performance reasons
default is true&lt;/p&gt;</long-description>
          <tag line="36" name="var" description="" type="Boolean">
            <type by_reference="false">Boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="48" namespace="global" package="Default">
        <name>$pluginsFolders</name>
        <default/>
        <docblock line="44">
          <description>paths to the folder containing the plugins.</description>
          <long-description>&lt;p&gt;defaults to AMFPHP_ROOTPATH . '/Plugins/'&lt;/p&gt;</long-description>
          <tag line="44" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="58" namespace="global" package="Default">
        <name>$pluginsConfig</name>
        <default/>
        <docblock line="50">
          <description>array containing untyped plugin configuration data.</description>
          <long-description>&lt;p&gt;Add as needed. The advised format is the name of the plugin as key, and then
paramName/paramValue pairs as an array.
example: array('plugin' =&gt; array( 'paramName' =&gt;'paramValue'))
The array( 'paramName' =&gt;'paramValue') will be passed as is to the plugin at construction time.&lt;/p&gt;</long-description>
          <tag line="50" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="65" namespace="global" package="Default">
        <name>$sharedConfig</name>
        <default/>
        <docblock line="60">
          <description>array containing configuration data that is shared between the plugins.</description>
          <long-description>&lt;p&gt;The format is paramName/paramValue pairs as an array.&lt;/p&gt;</long-description>
          <tag line="60" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="83" namespace="global" package="Default">
        <name>$disabledPlugins</name>
        <default/>
        <docblock line="79">
          <description>array of plugins that are available but should be disabled</description>
          <long-description/>
          <tag line="79" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="88" package="Amfphp\Core">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="85">
          <description>constructor</description>
          <long-description/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Amfphp\Core\Exception.php" hash="0ec225c1d7df9a9a6c9f815e6bb09fc9" package="Amfphp\Core">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Core"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="18" package="Amfphp\Core">
      <extends>\Exception</extends>
      <name>Amfphp_Core_Exception</name>
      <full_name>\Amfphp_Core_Exception</full_name>
      <docblock line="12">
        <description>just a type to distinguish between Amfphp exceptions and any other exceptions</description>
        <long-description/>
        <tag line="12" name="package" description="Amfphp_Core"/>
        <tag line="12" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
    </class>
  </file>
  <file path="Amfphp\Core\FilterManager.php" hash="975d30140204f413f1466fc98ea7648e" package="Amfphp\Core">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Core"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="38" package="Amfphp\Core">
      <extends/>
      <name>Amfphp_Core_FilterManager</name>
      <full_name>\Amfphp_Core_FilterManager</full_name>
      <docblock line="12">
        <description>Filters are provided by Amfphp to allow your contexts to 'filter into' the rest of Amfphp, i.e.</description>
        <long-description>&lt;p&gt;to call functions in your context at specific times&lt;br /&gt;
Call addFilter to register a filter, with a default priority of 10, and call callFilter to actually execute the filter&lt;/p&gt;

&lt;p&gt;The data structure is as follows:
all registered filters : associative array ( filter name =&gt; name filters)
name filters : associative array containing filters for one filter name (priority =&gt; priority filters)
priority filters: numbered array containing filters for one filter name and one priority [callback1, callback2, etc.]&lt;/p&gt;

&lt;p&gt;So for example if you were to call:
addFilter("FILTER_1", $obj, "method1");
addFilter("FILTER_1", $obj, "method2");
addFilter("FILTER_1", $obj, "method3", 15);
addFilter("FILTER_2", $obj, "method4");&lt;/p&gt;

&lt;p&gt;the structure would be
"FILTER_1" =&gt; array(
                     10 =&gt; [callback for method1, callback for method2]
                     15 =&gt; [callback for method3]
"FILTER_2" =&gt; array(
                     10 =&gt; [callback for method4]&lt;/p&gt;

&lt;p&gt;This is a singleton, so use getInstance&lt;/p&gt;</long-description>
        <tag line="12" name="package" description="Amfphp_Core"/>
        <tag line="12" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="42" namespace="global" package="Default">
        <name>$allFilters</name>
        <default>NULL</default>
        <docblock line="39">
          <description>all registered filters</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="47" namespace="global" package="Default">
        <name>$instance</name>
        <default>NULL</default>
        <docblock line="44">
          <description>protected instance of singleton</description>
          <long-description/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="51" package="Amfphp\Core">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="48">
          <description>constructor</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="59" package="Amfphp\Core">
        <name>getInstance</name>
        <full_name>getInstance</full_name>
        <docblock line="55">
          <description>get instance</description>
          <long-description/>
          <tag line="55" name="return" description="" type="\Amfphp_Core_FilterManager">
            <type by_reference="false">\Amfphp_Core_FilterManager</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="75" package="Amfphp\Core">
        <name>callFilters</name>
        <full_name>callFilters</full_name>
        <docblock line="66">
          <description>call the functions registered for the given filter.</description>
          <long-description>&lt;p&gt;There can be as many parameters as necessary, but only the first
one can be changed and and returned by the callees.
The other parameters must be considered as context, and should not be modified by the callees, and will not be returned to the caller.&lt;/p&gt;

&lt;p&gt;param 1: String $filterName the name of the filter which was used in addFilter( a string)
following params: parameters for the function call. As many as necessary can be passed, but only the first will be filtered&lt;/p&gt;</long-description>
          <tag line="66" name="return" description="the first call parameter, as filtered by the callees." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="116" package="Amfphp\Core">
        <name>addFilter</name>
        <full_name>addFilter</full_name>
        <docblock line="104">
          <description>register an object method for the given filter
call this method in your contexts to be notified when the filter occures</description>
          <long-description/>
          <tag line="104" name="see" description="\http://php.net/manual/en/function.call-user-func.php" refers="\http://php.net/manual/en/function.call-user-func.php"/>
          <tag line="104" name="see" description="\http://www.php.net/manual/en/language.pseudo-types.php#language.types.callback" refers="\http://www.php.net/manual/en/language.pseudo-types.php#language.types.callback"/>
          <tag line="104" name="param" description="the name of the filter" type="String" variable="$filterName">
            <type by_reference="false">String</type>
          </tag>
          <tag line="104" name="param" description="the object on which to call the method" type="Object" variable="$object">
            <type by_reference="false">Object</type>
          </tag>
          <tag line="104" name="param" description="the name of the method to call on the object" type="String" variable="$methodName">
            <type by_reference="false">String</type>
          </tag>
          <tag line="104" name="param" description="" type="int" variable="$priority">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="116">
          <name>$filterName</name>
          <default/>
          <type/>
        </argument>
        <argument line="116">
          <name>$object</name>
          <default/>
          <type/>
        </argument>
        <argument line="116">
          <name>$methodName</name>
          <default/>
          <type/>
        </argument>
        <argument line="116">
          <name>$priority</name>
          <default>10</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Core\Gateway.php" hash="7a6a5e1a68c3e34f217605669ada2dba" package="Amfphp\Core">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Core"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="20" package="Amfphp\Core">
      <extends/>
      <name>Amfphp_Core_Gateway</name>
      <full_name>\Amfphp_Core_Gateway</full_name>
      <docblock line="13">
        <description>where everything comes together in amfphp.</description>
        <long-description>&lt;p&gt;The class used for the entry point of a remoting call&lt;/p&gt;</long-description>
        <tag line="13" name="package" description="Amfphp_Core"/>
        <tag line="13" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <constant namespace="global" line="26" package="Amfphp\Core">
        <name>FILTER_SERVICE_FOLDER_PATHS</name>
        <full_name>FILTER_SERVICE_FOLDER_PATHS</full_name>
        <value>'FILTER_SERVICE_FOLDER_PATHS'</value>
        <docblock line="22">
          <description>filter just after plugin init.</description>
          <long-description>&lt;p&gt;Use this to add a service folder for a plugin&lt;/p&gt;</long-description>
          <tag line="22" name="param" description="serviceFolderPaths array of absolute paths" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="global" line="32" package="Amfphp\Core">
        <name>FILTER_SERVICE_NAMES_2_CLASS_FIND_INFO</name>
        <full_name>FILTER_SERVICE_NAMES_2_CLASS_FIND_INFO</full_name>
        <value>'FILTER_SERVICE_NAMES_2_CLASS_FIND_INFO'</value>
        <docblock line="28">
          <description>filter just after plugin init.</description>
          <long-description>&lt;p&gt;Use this to add a service for a plugin when a service folder isn't enough&lt;/p&gt;</long-description>
          <tag line="28" name="param" description="serviceNames2ClassFindInfo array of ClassFindInfo. Key is the service nane" type="array" variable="">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="global" line="39" package="Amfphp\Core">
        <name>FILTER_SERIALIZED_REQUEST</name>
        <full_name>FILTER_SERIALIZED_REQUEST</full_name>
        <value>'FILTER_SERIALIZED_REQUEST'</value>
        <docblock line="34">
          <description>filter called when the serialized request comes in.</description>
          <long-description/>
          <tag line="34" name="todo" description="this filter only allows manipulation of raw post data, and is as such a bit misleading. Maybe rename and do filters for GET and POST"/>
          <tag line="34" name="param" description="the raw http data" type="String" variable="$rawData">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="global" line="47" package="Amfphp\Core">
        <name>FILTER_DESERIALIZER</name>
        <full_name>FILTER_DESERIALIZER</full_name>
        <value>'FILTER_DESERIALIZER'</value>
        <docblock line="41">
          <description>filter called to allow a plugin to override the default amf deserializer.</description>
          <long-description>&lt;p&gt;Plugin should return a Amfphp_Core_Common_IDeserializer if it recognizes the content type&lt;/p&gt;</long-description>
          <tag line="41" name="param" description="the deserializer. null at call in gateway." type="\Amfphp_Core_Common_IDeserializer" variable="$deserializer">
            <type by_reference="false">\Amfphp_Core_Common_IDeserializer</type>
          </tag>
          <tag line="41" name="param" description="" type="String" variable="$contentType">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="global" line="53" package="Amfphp\Core">
        <name>FILTER_DESERIALIZED_REQUEST</name>
        <full_name>FILTER_DESERIALIZED_REQUEST</full_name>
        <value>'FILTER_DESERIALIZED_REQUEST'</value>
        <docblock line="49">
          <description>filter called after the request is deserialized.</description>
          <long-description>&lt;p&gt;The callee can modify the data and return it.&lt;/p&gt;</long-description>
          <tag line="49" name="param" description="" type="mixed" variable="$deserializedRequest">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="global" line="61" package="Amfphp\Core">
        <name>FILTER_DESERIALIZED_REQUEST_HANDLER</name>
        <full_name>FILTER_DESERIALIZED_REQUEST_HANDLER</full_name>
        <value>'FILTER_DESERIALIZED_REQUEST_HANDLER'</value>
        <docblock line="55">
          <description>filter called to allow a plugin to override the default amf deserialized request handler.</description>
          <long-description>&lt;p&gt;Plugin should return a Amfphp_Core_Common_IDeserializedRequestHandler if it recognizes the request&lt;/p&gt;</long-description>
          <tag line="55" name="param" description="null at call in gateway." type="\Amfphp_Core_Common_IDeserializedRequestHandler" variable="$deserializedRequestHandler">
            <type by_reference="false">\Amfphp_Core_Common_IDeserializedRequestHandler</type>
          </tag>
          <tag line="55" name="param" description="" type="String" variable="$contentType">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="global" line="67" package="Amfphp\Core">
        <name>FILTER_DESERIALIZED_RESPONSE</name>
        <full_name>FILTER_DESERIALIZED_RESPONSE</full_name>
        <value>'FILTER_DESERIALIZED_RESPONSE'</value>
        <docblock line="63">
          <description>filter called when the response is ready but not yet serialized.</description>
          <long-description>&lt;p&gt;The callee can modify the data and return it.&lt;/p&gt;</long-description>
          <tag line="63" name="param" description="" type="\" variable="$deserializedResponse"/>
        </docblock>
      </constant>
      <constant namespace="global" line="76" package="Amfphp\Core">
        <name>FILTER_EXCEPTION_HANDLER</name>
        <full_name>FILTER_EXCEPTION_HANDLER</full_name>
        <value>'FILTER_EXCEPTION_HANDLER'</value>
        <docblock line="69">
          <description>filter called to allow a plugin to override the default amf exception handler.</description>
          <long-description>&lt;p&gt;If the plugin takes over the handling of the request message,
it must set this to a proper Amfphp_Core_Common_IExceptionHandler&lt;/p&gt;</long-description>
          <tag line="69" name="param" description="null at call in gateway." type="\Amfphp_Core_Common_IExceptionHandler" variable="$exceptionHandler.">
            <type by_reference="false">\Amfphp_Core_Common_IExceptionHandler</type>
          </tag>
          <tag line="69" name="param" description="" type="String" variable="$contentType">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="global" line="84" package="Amfphp\Core">
        <name>FILTER_SERIALIZER</name>
        <full_name>FILTER_SERIALIZER</full_name>
        <value>'FILTER_SERIALIZER'</value>
        <docblock line="78">
          <description>filter called to allow a plugin to override the default amf serializer.</description>
          <long-description/>
          <tag line="78" name="param" description="the serializer. null at call in gateway." type="\Amfphp_Core_Common_ISerializer" variable="$serializer">
            <type by_reference="false">\Amfphp_Core_Common_ISerializer</type>
          </tag>
          <tag line="78" name="param" description="Plugin sets to a Amfphp_Core_Common_ISerializer if it recognizes the content type" type="String" variable="$contentType">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="global" line="90" package="Amfphp\Core">
        <name>FILTER_SERIALIZED_RESPONSE</name>
        <full_name>FILTER_SERIALIZED_RESPONSE</full_name>
        <value>'FILTER_SERIALIZED_RESPONSE'</value>
        <docblock line="86">
          <description>filter called when the packet response is ready and serialized.</description>
          <long-description/>
          <tag line="86" name="param" description="the raw http data" type="String" variable="$rawData">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="global" line="97" package="Amfphp\Core">
        <name>FILTER_HEADERS</name>
        <full_name>FILTER_HEADERS</full_name>
        <value>'FILTER_HEADERS'</value>
        <docblock line="92">
          <description>filter called to get the headers</description>
          <long-description/>
          <tag line="92" name="param" description="an associative array of headers. For example array('Content-Type' =&gt; 'application/x-amf')" type="array" variable="$headers">
            <type by_reference="false">array</type>
          </tag>
          <tag line="92" name="param" description="" type="String" variable="$contentType">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="104" namespace="global" package="Default">
        <name>$config</name>
        <default/>
        <docblock line="100">
          <description>config.</description>
          <long-description/>
          <tag line="100" name="var" description="" type="\Amfphp_Core_Config">
            <type by_reference="false">\Amfphp_Core_Config</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="110" namespace="global" package="Default">
        <name>$getData</name>
        <default/>
        <docblock line="106">
          <description>typically the $_GET array.</description>
          <long-description/>
          <tag line="106" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="116" namespace="global" package="Default">
        <name>$postData</name>
        <default/>
        <docblock line="112">
          <description>typically the $_POST array.</description>
          <long-description/>
          <tag line="112" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="122" namespace="global" package="Default">
        <name>$contentType</name>
        <default/>
        <docblock line="118">
          <description>the content type.</description>
          <long-description>&lt;p&gt;For example for amf, application/x-amf&lt;/p&gt;</long-description>
          <tag line="118" name="var" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="128" namespace="global" package="Default">
        <name>$rawInputData</name>
        <default/>
        <docblock line="124">
          <description>the serialized request</description>
          <long-description/>
          <tag line="124" name="var" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="134" namespace="global" package="Default">
        <name>$rawOutputData</name>
        <default/>
        <docblock line="130">
          <description>the serialized response</description>
          <long-description/>
          <tag line="130" name="var" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="147" package="Amfphp\Core">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="139">
          <description>constructor</description>
          <long-description/>
          <tag line="139" name="param" description="typically the $_GET array." type="array" variable="$getData">
            <type by_reference="false">array</type>
          </tag>
          <tag line="139" name="param" description="typically the $_POST array." type="array" variable="$postData">
            <type by_reference="false">array</type>
          </tag>
          <tag line="139" name="param" description="" type="String" variable="$rawInputData">
            <type by_reference="false">String</type>
          </tag>
          <tag line="139" name="param" description="" type="String" variable="$contentType">
            <type by_reference="false">String</type>
          </tag>
          <tag line="139" name="param" description="optional. The default config object will be used if null" type="\Amfphp_Core_Config" variable="$config">
            <type by_reference="false">\Amfphp_Core_Config</type>
          </tag>
        </docblock>
        <argument line="147">
          <name>$getData</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="147">
          <name>$postData</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="147">
          <name>$rawInputData</name>
          <default/>
          <type/>
        </argument>
        <argument line="147">
          <name>$contentType</name>
          <default/>
          <type/>
        </argument>
        <argument line="147">
          <name>$config</name>
          <default>null</default>
          <type>\Amfphp_Core_Config</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="167" package="Amfphp\Core">
        <name>service</name>
        <full_name>service</full_name>
        <docblock line="160">
          <description>The service method runs the gateway application.</description>
          <long-description>&lt;p&gt;It deserializes the raw data passed into the constructor as an Amfphp_Core_Amf_Packet, handles the headers,
handles the messages as requests to services, and returns the responses from the services
It does not however handle output headers, gzip compression, etc. that is the job of the calling script&lt;/p&gt;</long-description>
          <tag line="160" name="return" description="the serialized amf packet containg the service responses" type="\&lt;String&gt;">
            <type by_reference="false">\&lt;String&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="230" package="Amfphp\Core">
        <name>getResponseHeaders</name>
        <full_name>getResponseHeaders</full_name>
        <docblock line="226">
          <description>get the response headers.</description>
          <long-description>&lt;p&gt;Creates an associative array of headers, then filters them, then returns an array of strings&lt;/p&gt;</long-description>
          <tag line="226" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="245" package="Amfphp\Core">
        <name>output</name>
        <full_name>output</full_name>
        <docblock line="242">
          <description>helper function for sending gateway data to output stream</description>
          <long-description/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Amfphp\Core\HttpRequestGatewayFactory.php" hash="1c337cde65b29e14f89cf51c8006c91f" package="Amfphp\Core">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Core"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="19" package="Amfphp\Core">
      <extends/>
      <name>Amfphp_Core_HttpRequestGatewayFactory</name>
      <full_name>\Amfphp_Core_HttpRequestGatewayFactory</full_name>
      <docblock line="12">
        <description>A gateway factory's job is to create a gateway.</description>
        <long-description>&lt;p&gt;There can be many gateway factories, but as such the only one for now is this one,
which creates a gateway assuming that the data to be processed is in an http request and thus available through the usual php globals&lt;/p&gt;</long-description>
        <tag line="12" name="package" description="Amfphp_Core"/>
        <tag line="12" name="author" description="Ariel Sommeria-Klein"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="global" line="29" package="Amfphp\Core">
        <name>getRawPostData</name>
        <full_name>getRawPostData</full_name>
        <docblock line="23">
          <description>there seems to be some confusion in the php doc as to where best to get the raw post data from.</description>
          <long-description>&lt;p&gt;try $GLOBALS['HTTP_RAW_POST_DATA'] and php://input&lt;/p&gt;</long-description>
          <tag line="23" name="return" description="it's a binary stream, but there seems to be no better type than String for this." type="\&lt;String&gt;">
            <type by_reference="false">\&lt;String&gt;</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="44" package="Amfphp\Core">
        <name>createGateway</name>
        <full_name>createGateway</full_name>
        <docblock line="38">
          <description>create the gateway.</description>
          <long-description>&lt;p&gt;content type is recovered by looking at the GET parameter contentType. If it isn't set, it looks in the content headers.&lt;/p&gt;</long-description>
          <tag line="38" name="param" description="optional. If null, the gateway will use the default" type="\Amfphp_Core_Config" variable="$config">
            <type by_reference="false">\Amfphp_Core_Config</type>
          </tag>
          <tag line="38" name="return" description="" type="\Amfphp_Core_Gateway">
            <type by_reference="false">\Amfphp_Core_Gateway</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$config</name>
          <default>null</default>
          <type>\Amfphp_Core_Config</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Core\PluginManager.php" hash="4d5eba257df0b50d47e6d89c672d13b9" package="Amfphp\Core">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Core"/>
    </docblock>
    <include line="95" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="24" package="Amfphp\Core">
      <extends/>
      <name>Amfphp_Core_PluginManager</name>
      <full_name>\Amfphp_Core_PluginManager</full_name>
      <docblock line="13">
        <description>Loads plugins for Amfphp.</description>
        <long-description>&lt;p&gt;Plugins consist of a folder in the plugins folder. The folder and the class
should all have the same name. The file containing the class should be named with the class name with the '.php' suffix added.
It is the loaded class' responsability to load any  other resources that the plugin needs from the same folder.
 A plugin interacts with Amfphp by using the Amfphp_Core_FilterManager to register its functions
to be called at specific times with specific parameters during execution.
It's a singleton, so use getInstance&lt;/p&gt;</long-description>
        <tag line="13" name="package" description="Amfphp_Core"/>
        <tag line="13" name="author" description="Ariel Sommeria-Klein"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="31" namespace="global" package="Default">
        <name>$instance</name>
        <default>NULL</default>
        <docblock line="26">
          <description>protected instance of singleton</description>
          <long-description/>
          <tag line="26" name="var" description="" type="\Amfphp_Core_PluginManager">
            <type by_reference="false">\Amfphp_Core_PluginManager</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="37" namespace="global" package="Default">
        <name>$pluginInstances</name>
        <default/>
        <docblock line="33">
          <description>plugin instances</description>
          <long-description/>
          <tag line="33" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="42" package="Amfphp\Core">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="39">
          <description>constructor</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="50" package="Amfphp\Core">
        <name>getInstance</name>
        <full_name>getInstance</full_name>
        <docblock line="46">
          <description>gives access to the singleton</description>
          <long-description/>
          <tag line="46" name="return" description="" type="\Amfphp_Core_PluginManager">
            <type by_reference="false">\Amfphp_Core_PluginManager</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="65" package="Amfphp\Core">
        <name>loadPlugins</name>
        <full_name>loadPlugins</full_name>
        <docblock line="57">
          <description>load the plugins</description>
          <long-description/>
          <tag line="57" name="param" description="where to load the plugins from. Absolute paths. For example Amfphp/Plugins/" type="array" variable="$pluginFolders">
            <type by_reference="false">array</type>
          </tag>
          <tag line="57" name="param" description="optional. an array containing the plugin configuration, using the plugin name as key." type="array" variable="$pluginsConfig">
            <type by_reference="false">array</type>
          </tag>
          <tag line="57" name="param" description="optional. if both a specific config and a shared config are available, concatenate them to create the plugin config.&#13;&#10;Otherwise use whatever is not null" type="array" variable="$sharedConfig">
            <type by_reference="false">array</type>
          </tag>
          <tag line="57" name="param" description="optional.  an array of names of plugins to disable" type="array" variable="$disabledPlugins">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$pluginFolders</name>
          <default/>
          <type/>
        </argument>
        <argument line="65">
          <name>$pluginsConfig</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <argument line="65">
          <name>$sharedConfig</name>
          <default>null</default>
          <type>array</type>
        </argument>
        <argument line="65">
          <name>$disabledPlugins</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\index.php" hash="05bc377328f121118b17b27023dc7db7" package="Amfphp">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp"/>
    </docblock>
    <include line="15" type="Require Once" package="Default">
      <name/>
      <docblock line="12">
        <description>includes</description>
        <long-description/>
      </docblock>
    </include>
  </file>
  <file path="Amfphp\Plugins\AmfphpAuthentication\AmfphpAuthentication.php" hash="818c76c10ef79abbe06a4b87e5ce7a3f" package="Amfphp\Plugins\Authentication">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Plugins_Authentication"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="48" package="Amfphp\Plugins\Authentication">
      <extends/>
      <name>AmfphpAuthentication</name>
      <full_name>\AmfphpAuthentication</full_name>
      <docblock line="13">
        <description>Authentication for Amfphp.</description>
        <long-description>&lt;p&gt;This plugin can be deactivated if the project doesn't need to protect access to its services.&lt;/p&gt;

&lt;p&gt;On a service object, the plugin looks for a method called _getMethodRoles. If the method exists, the plugin will look for a role in the session that matches the role.
If the roles don't match, an Exception is thrown.
The _getMethodRoles takes a parameter $methodName, and must return an array of strings containing acceptable roles for the method. If the return value is null,
it is considered that that particular method is not protected.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function _getMethodRoles($methodName){
   if($methodName == 'adminMethod'){
       return array('admin');
   }else{
       return null;
   }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To authenticate a user, the plugin looks for a 'login' method. This method can either be called
explicitly, or by setting a header with the name 'Credentials', containing {userid: userid, password: password}, as defined by the AS2
NetConnection.setCredentials method. It is considered good practise to have a 'logout' method, though this is optional
The login method returns a role in a 'string'. It takes 2 parameters, the user id and the password.
The logout method should call AmfphpAuthentication::clearSessionInfo();&lt;/p&gt;

&lt;p&gt;See the AuthenticationService class in the test data for an example of an implementation.&lt;/p&gt;

&lt;p&gt;Roles are stored in an associative array in $_SESSION[self::SESSION_FIELD_ROLES], using the role as key for easy access&lt;/p&gt;</long-description>
        <tag line="13" name="link" description="https://github.com/silexlabs/amfphp-2.0/blob/master/Tests/TestData/Services/AuthenticationService.php" link="https://github.com/silexlabs/amfphp-2.0/blob/master/Tests/TestData/Services/AuthenticationService.php"/>
        <tag line="13" name="package" description="Amfphp_Plugins_Authentication"/>
        <tag line="13" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <constant namespace="global" line="53" package="Amfphp\Plugins\Authentication">
        <name>SESSION_FIELD_ROLES</name>
        <full_name>SESSION_FIELD_ROLES</full_name>
        <value>'amfphp_roles'</value>
        <docblock line="49">
          <description>the field in the session where the roles array is stored</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="global" line="58" package="Amfphp\Plugins\Authentication">
        <name>METHOD_GET_METHOD_ROLES</name>
        <full_name>METHOD_GET_METHOD_ROLES</full_name>
        <value>'_getMethodRoles'</value>
        <docblock line="55">
          <description>the name of the method on the service where the method roles are given</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="global" line="63" package="Amfphp\Plugins\Authentication">
        <name>METHOD_LOGIN</name>
        <full_name>METHOD_LOGIN</full_name>
        <value>'login'</value>
        <docblock line="60">
          <description>the name of the login method</description>
          <long-description/>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="public" line="69" namespace="global" package="Default">
        <name>$headerUserId</name>
        <default/>
        <docblock line="65">
          <description>the user id passed in the credentials header</description>
          <long-description/>
          <tag line="65" name="var" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="75" namespace="global" package="Default">
        <name>$headerPassword</name>
        <default/>
        <docblock line="71">
          <description>the password passed in the credentials header</description>
          <long-description/>
          <tag line="71" name="var" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="81" package="Amfphp\Plugins\Authentication">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="77">
          <description>constructor.</description>
          <long-description/>
          <tag line="77" name="param" description="optional key/value pairs in an associative array. Used to override default configuration values." type="array" variable="$config">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$config</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="95" package="Amfphp\Plugins\Authentication">
        <name>filterAmfRequestHeaderHandler</name>
        <full_name>filterAmfRequestHeaderHandler</full_name>
        <docblock line="89">
          <description>filter amf request header handler</description>
          <long-description/>
          <tag line="89" name="param" description="" type="Object" variable="$handler">
            <type by_reference="false">Object</type>
          </tag>
          <tag line="89" name="param" description="the request header" type="\Amfphp_Core_Amf_Header" variable="$header">
            <type by_reference="false">\Amfphp_Core_Amf_Header</type>
          </tag>
          <tag line="89" name="return" description="" type="\AmfphpAuthentication">
            <type by_reference="false">\AmfphpAuthentication</type>
          </tag>
        </docblock>
        <argument line="95">
          <name>$handler</name>
          <default/>
          <type/>
        </argument>
        <argument line="95">
          <name>$header</name>
          <default/>
          <type>\Amfphp_Core_Amf_Header</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="111" package="Amfphp\Plugins\Authentication">
        <name>filterServiceObject</name>
        <full_name>filterServiceObject</full_name>
        <docblock line="101">
          <description>called when the service object is created, just before the method call.</description>
          <long-description>&lt;p&gt;Tries to authenticate if a credentials header was sent in the packet.
Throws an exception if the roles don't match&lt;/p&gt;</long-description>
          <tag line="101" name="param" description="" type="\&lt;Object&gt;" variable="$serviceObject">
            <type by_reference="false">\&lt;Object&gt;</type>
          </tag>
          <tag line="101" name="param" description="" type="\&lt;String&gt;" variable="$serviceName">
            <type by_reference="false">\&lt;String&gt;</type>
          </tag>
          <tag line="101" name="param" description="" type="\&lt;String&gt;" variable="$methodName">
            <type by_reference="false">\&lt;String&gt;</type>
          </tag>
          <tag line="101" name="return" description="" type="\&lt;array&gt;">
            <type by_reference="false">\&lt;array&gt;</type>
          </tag>
        </docblock>
        <argument line="111">
          <name>$serviceObject</name>
          <default/>
          <type/>
        </argument>
        <argument line="111">
          <name>$serviceName</name>
          <default/>
          <type/>
        </argument>
        <argument line="111">
          <name>$methodName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="153" package="Amfphp\Plugins\Authentication">
        <name>clearSessionInfo</name>
        <full_name>clearSessionInfo</full_name>
        <docblock line="150">
          <description>clears the session info set by the plugin.</description>
          <long-description>&lt;p&gt;Use to logout&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="166" package="Amfphp\Plugins\Authentication">
        <name>addRole</name>
        <full_name>addRole</full_name>
        <docblock line="162">
          <description>add role</description>
          <long-description/>
          <tag line="162" name="param" description="" type="String" variable="$roleToAdd">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="166">
          <name>$roleToAdd</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="183" package="Amfphp\Plugins\Authentication">
        <name>handleRequestHeader</name>
        <full_name>handleRequestHeader</full_name>
        <docblock line="178">
          <description>looks for a 'Credentials' request header.</description>
          <long-description>&lt;p&gt;If there is one, uses it to try to authentify the user.&lt;/p&gt;</long-description>
          <tag line="178" name="param" description="the request header" type="\Amfphp_Core_Amf_Header" variable="$header">
            <type by_reference="false">\Amfphp_Core_Amf_Header</type>
          </tag>
          <tag line="178" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="183">
          <name>$header</name>
          <default/>
          <type>\Amfphp_Core_Amf_Header</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Plugins\AmfphpCharsetConverter\AmfphpCharsetConverter.php" hash="7f2728c3df5650798b29dbb7b8cb58fc" package="Amfphp\Plugins\CharsetConverter">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Plugins_CharsetConverter"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="20" package="Amfphp\Plugins\CharsetConverter">
      <extends/>
      <name>AmfphpCharsetConverter</name>
      <full_name>\AmfphpCharsetConverter</full_name>
      <docblock line="12">
        <description>Converts strings to the right encoding in incoming and outgoing packets.</description>
        <long-description>&lt;p&gt;This plugin can be deactivated if all three tiers (DB, PHP, client) use the same charset, usually utf8.
This works for nested objects.&lt;/p&gt;</long-description>
        <tag line="12" name="package" description="Amfphp_Plugins_CharsetConverter"/>
        <tag line="12" name="author" description="Ariel Sommeria-Klein"/>
      </docblock>
      <constant namespace="global" line="24" package="Amfphp\Plugins\CharsetConverter">
        <name>METHOD_NONE</name>
        <full_name>METHOD_NONE</full_name>
        <value>'none'</value>
        <docblock line="21">
          <description>don't do anything</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="global" line="29" package="Amfphp\Plugins\CharsetConverter">
        <name>METHOD_ICONV</name>
        <full_name>METHOD_ICONV</full_name>
        <value>'iconv'</value>
        <docblock line="26">
          <description>uses the iconv library for reencoding</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="global" line="34" package="Amfphp\Plugins\CharsetConverter">
        <name>METHOD_MBSTRING</name>
        <full_name>METHOD_MBSTRING</full_name>
        <value>'mbstring'</value>
        <docblock line="31">
          <description>uses the mbstring library for reencoding</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="global" line="39" package="Amfphp\Plugins\CharsetConverter">
        <name>METHOD_RECODE</name>
        <full_name>METHOD_RECODE</full_name>
        <value>'recode'</value>
        <docblock line="36">
          <description>uses the recode library for reencoding</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="global" line="44" package="Amfphp\Plugins\CharsetConverter">
        <name>METHOD_UTF8_DECODE</name>
        <full_name>METHOD_UTF8_DECODE</full_name>
        <value>'utf8_decode'</value>
        <docblock line="41">
          <description>uses the XML function utf8_decode and encode for reencoding - ISO-8859-1 only</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="global" line="55" package="Amfphp\Plugins\CharsetConverter">
        <name>DIRECTION_PHP_TO_CLIENT</name>
        <full_name>DIRECTION_PHP_TO_CLIENT</full_name>
        <value>0</value>
        <docblock line="52">
          <description>transliterate direction</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="global" line="60" package="Amfphp\Plugins\CharsetConverter">
        <name>DIRECTION_CLIENT_TO_PHP</name>
        <full_name>DIRECTION_CLIENT_TO_PHP</full_name>
        <value>1</value>
        <docblock line="57">
          <description>transliterate direction</description>
          <long-description/>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="public" line="50" namespace="global" package="Default">
        <name>$method</name>
        <default/>
        <docblock line="46">
          <description>the reencoding method.</description>
          <long-description>&lt;p&gt;One of the METHOD_XXX consts defined above.&lt;/p&gt;</long-description>
          <tag line="46" name="var" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="69" namespace="global" package="Default">
        <name>$phpCharset</name>
        <default/>
        <docblock line="62">
          <description>the Charset that is used in php default utf-8.</description>
          <long-description>&lt;p&gt;See all the possible codepages for iconv here:
http://www.gnu.org/software/libiconv/&lt;/p&gt;</long-description>
          <tag line="62" name="var" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="79" namespace="global" package="Default">
        <name>$clientCharset</name>
        <default/>
        <docblock line="72">
          <description>the Charset that is used by the client.</description>
          <long-description>&lt;p&gt;default utf-8
See all the possible codepages for iconv here:
http://www.gnu.org/software/libiconv/&lt;/p&gt;</long-description>
          <tag line="72" name="var" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="85" package="Amfphp\Plugins\CharsetConverter">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="81">
          <description>constructor.</description>
          <long-description/>
          <tag line="81" name="param" description="optional key/value pairs in an associative array. Used to override default configuration values." type="array" variable="$config">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="85">
          <name>$config</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="120" package="Amfphp\Plugins\CharsetConverter">
        <name>filterDeserializedRequest</name>
        <full_name>filterDeserializedRequest</full_name>
        <docblock line="115">
          <description>converts untyped objects to their typed counterparts.</description>
          <long-description>&lt;p&gt;Loads the class if necessary&lt;/p&gt;</long-description>
          <tag line="115" name="param" description="" type="mixed" variable="$deserializedRequest">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="115" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="120">
          <name>$deserializedRequest</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="131" package="Amfphp\Plugins\CharsetConverter">
        <name>filterDeserializedResponse</name>
        <full_name>filterDeserializedResponse</full_name>
        <docblock line="126">
          <description>looks at the response and sets the explicit type field so that the serializer sends it properly</description>
          <long-description/>
          <tag line="126" name="param" description="" type="mixed" variable="$deserializedResponse">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="126" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="131">
          <name>$deserializedResponse</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="144" package="Amfphp\Plugins\CharsetConverter">
        <name>transliterate</name>
        <full_name>transliterate</full_name>
        <docblock line="138">
          <description>convert the string.</description>
          <long-description>&lt;p&gt;finds the proper encoding depending on direction&lt;/p&gt;</long-description>
          <tag line="138" name="param" description="data to convert" type="String" variable="$string">
            <type by_reference="false">String</type>
          </tag>
          <tag line="138" name="param" description="one of the DIRECTION_XXX consts described above" type="int" variable="$direction">
            <type by_reference="false">int</type>
          </tag>
          <tag line="138" name="return" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="144">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
        <argument line="144">
          <name>$direction</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="184" package="Amfphp\Plugins\CharsetConverter">
        <name>convertStringFromClientToPhpCharsets</name>
        <full_name>convertStringFromClientToPhpCharsets</full_name>
        <docblock line="177">
          <description>converts the strings
note: This is not a recursive function.</description>
          <long-description>&lt;p&gt;Rather the recursion is handled by Amfphp_Core_Amf_Util::applyFunctionToContainedObjects.
must be public so that Amfphp_Core_Amf_Util::applyFunctionToContainedObjects can call it&lt;/p&gt;</long-description>
          <tag line="177" name="param" description="" type="mixed" variable="$obj">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="177" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="184">
          <name>$obj</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="200" package="Amfphp\Plugins\CharsetConverter">
        <name>convertStringFromPhpToClientCharsets</name>
        <full_name>convertStringFromPhpToClientCharsets</full_name>
        <docblock line="193">
          <description>note: This is not a recursive function.</description>
          <long-description>&lt;p&gt;Rather the recusrion is handled by Amfphp_Core_Amf_Util::applyFunctionToContainedObjects.
must be public so that Amfphp_Core_Amf_Util::applyFunctionToContainedObjects can call it&lt;/p&gt;</long-description>
          <tag line="193" name="param" description="" type="mixed" variable="$obj">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="193" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="200">
          <name>$obj</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Plugins\AmfphpCustomClassConverter\AmfphpCustomClassConverter.php" hash="037aea8fc4638df3953a5e5534f02075" package="Amfphp\Plugins\CustomClassConverter">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Plugins_CustomClassConverter"/>
    </docblock>
    <include line="117" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="50" package="Amfphp\Plugins\CustomClassConverter">
      <extends/>
      <name>AmfphpCustomClassConverter</name>
      <full_name>\AmfphpCustomClassConverter</full_name>
      <docblock line="13">
        <description>Converts data from incoming packets with explicit types to custom classes, and vice versa for the outgoing packets.</description>
        <long-description>&lt;p&gt;This plugin can be deactivated if the project doesn't use custom classes.&lt;/p&gt;

&lt;p&gt;The AMF deserializer reads a typed AMF object as a stdObj class, and sets the AMF type to a reserved "explicit type" field.
This plugin will look at deserialized data and try to convert any such objects to a real custom class.&lt;/p&gt;

&lt;p&gt;It works in the opposite way on the way out: The AMF serializer needs a stdObj class with the explicit type marker set
to write a typed AMF object. This plugin will convert any typed PHP objects to a stdObj with the explicit type marker set.&lt;/p&gt;

&lt;p&gt;The explicit type marker is defined in Amfphp_Core_Amf_Constants&lt;/p&gt;

&lt;p&gt;If after deserialization the custom class is not found, the object is unmodified and the explicit type marker is left set.
If the explicit type marker is already set in an outgoing object, the value is left as is.&lt;/p&gt;

&lt;p&gt;This works for nested objects.&lt;/p&gt;

&lt;p&gt;If you don't need strong typing in PHP but would like the objects in your client to be strongly typed, you can:
For example a stdObj like this will be returned in AMF as MyVO&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$returnObj = new stdObj();
$explicitTypeField = Amfphp_Core_Amf_Constants::FIELD_EXPLICIT_TYPE;
$returnObj-&gt;$explicitTypeField = "MyVO";
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are using Flash, remember that you need to register the class alias so that Flash converts the MyVO AMF object to a Flash MyVO object.
If you are using Flex you can do this with the RemoteClass metadata tag.&lt;/p&gt;</long-description>
        <tag line="13" name="see" description="\global\Amfphp_Core_Amf_Constants::FIELD_EXPLICIT_TYPE" refers="\global\Amfphp_Core_Amf_Constants::FIELD_EXPLICIT_TYPE"/>
        <tag line="13" name="link" description="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/net/package.html#registerClassAlias%28%29" link="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/net/package.html#registerClassAlias%28%29"/>
        <tag line="13" name="link" description="http://livedocs.adobe.com/flex/3/html/metadata_3.html#198729" link="http://livedocs.adobe.com/flex/3/html/metadata_3.html#198729"/>
        <tag line="13" name="package" description="Amfphp_Plugins_CustomClassConverter"/>
        <tag line="13" name="author" description="Ariel Sommeria-Klein"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="57" namespace="global" package="Default">
        <name>$customClassFolderPaths</name>
        <default/>
        <docblock line="52">
          <description>paths to folders containing custom classes(relative or absolute)
default is /Services/Vo/</description>
          <long-description/>
          <tag line="52" name="var" description="of paths" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="63" package="Amfphp\Plugins\CustomClassConverter">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="59">
          <description>constructor.</description>
          <long-description/>
          <tag line="59" name="param" description="optional key/value pairs in an associative array. Used to override default configuration values." type="array" variable="$config">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$config</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="81" package="Amfphp\Plugins\CustomClassConverter">
        <name>filterDeserializedRequest</name>
        <full_name>filterDeserializedRequest</full_name>
        <docblock line="76">
          <description>converts untyped objects to their typed counterparts.</description>
          <long-description>&lt;p&gt;Loads the class if necessary&lt;/p&gt;</long-description>
          <tag line="76" name="param" description="" type="mixed" variable="$deserializedRequest">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="76" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$deserializedRequest</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="91" package="Amfphp\Plugins\CustomClassConverter">
        <name>filterDeserializedResponse</name>
        <full_name>filterDeserializedResponse</full_name>
        <docblock line="86">
          <description>looks at the outgoing packet and sets the explicit type field so that the serializer sends it properly</description>
          <long-description/>
          <tag line="86" name="param" description="" type="mixed" variable="$deserializedResponse">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="86" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="91">
          <name>$deserializedResponse</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="106" package="Amfphp\Plugins\CustomClassConverter">
        <name>convertToTyped</name>
        <full_name>convertToTyped</full_name>
        <docblock line="96">
          <description>if the object contains an explicit type marker, this method attempts to convert it to its typed counterpart
if the typed class is already available, then simply creates a new instance of it.</description>
          <long-description>&lt;p&gt;If not,
attempts to load the file from the available service folders.
If then the class is still not available, the object is not converted
note: This is not a recursive function. Rather the recusrion is handled by Amfphp_Core_Amf_Util::applyFunctionToContainedObjects.
must be public so that Amfphp_Core_Amf_Util::applyFunctionToContainedObjects can call it&lt;/p&gt;</long-description>
          <tag line="96" name="param" description="" type="mixed" variable="$obj">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="96" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="106">
          <name>$obj</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="146" package="Amfphp\Plugins\CustomClassConverter">
        <name>markExplicitType</name>
        <full_name>markExplicitType</full_name>
        <docblock line="137">
          <description>sets the the explicit type marker on the object and its sub-objects.</description>
          <long-description>&lt;p&gt;This is only done if it not already set, as in some cases
the service class might want to do this manually.
note: This is not a recursive function. Rather the recusrion is handled by Amfphp_Core_Amf_Util::applyFunctionToContainedObjects.
must be public so that Amfphp_Core_Amf_Util::applyFunctionToContainedObjects can call it&lt;/p&gt;</long-description>
          <tag line="137" name="param" description="" type="mixed" variable="$obj">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="137" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="146">
          <name>$obj</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Plugins\AmfphpDiscovery\AmfphpDiscovery.php" hash="a29fc525397c5e37d01538ab32a12abe" package="Amfphp\Plugins\Discovery">
    <docblock line="4">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="4" name="package" description="Amfphp_Plugins_Discovery"/>
    </docblock>
    <include line="17" type="Require Once" package="Default">
      <name/>
      <docblock line="14">
        <description>includes</description>
        <long-description/>
      </docblock>
    </include>
    <include line="18" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="19" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="20" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="29" package="Amfphp\Plugins\Discovery">
      <extends/>
      <name>AmfphpDiscovery</name>
      <full_name>\AmfphpDiscovery</full_name>
      <docblock line="22">
        <description>adds the discovery service, a service that returns information about available services.</description>
        <long-description>&lt;p&gt;Access is restricted by default(see restrictAccess below)&lt;/p&gt;</long-description>
        <tag line="22" name="package" description="Amfphp_Plugins_Discovery"/>
        <tag line="22" name="author" description="Ariel Sommeria-Klein"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="36" namespace="global" package="Default">
        <name>$excludePaths</name>
        <default>array('Vo/')</default>
        <docblock line="30">
          <description>array of files and folders to ignore during introspection of the services dir
e.g.</description>
          <long-description>&lt;p&gt;ignore dBug.php, an entire directory called 'classes' and also a subdirectory of one of the service directories (Vo/)
$this-&gt;pluginsConfig = array('AmfphpDiscovery'  =&gt; array('excludePaths' =&gt; array('dBug', 'classes', 'Vo/')));
default is for ignoring Vo/ folder&lt;/p&gt;</long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="42" namespace="global" package="Default">
        <name>$restrictAccess</name>
        <default>true</default>
        <docblock line="38">
          <description>restrict access to amfphp_admin.</description>
          <long-description>&lt;p&gt;default is true. Set to false if this is a private server.&lt;/p&gt;</long-description>
          <tag line="38" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="49" package="Amfphp\Plugins\Discovery">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="44">
          <description>constructor.</description>
          <long-description>&lt;p&gt;adds filters to grab config about services and add discovery service. Low priority so that other plugins can add their services first&lt;/p&gt;</long-description>
          <tag line="44" name="param" description="optional key/value pairs in an associative array. Used to override default configuration values." type="array" variable="$config">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$config</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="68" package="Amfphp\Plugins\Discovery">
        <name>filterServiceFolderPaths</name>
        <full_name>filterServiceFolderPaths</full_name>
        <docblock line="64">
          <description>grabs serviceFolderPaths from config</description>
          <long-description/>
          <tag line="64" name="param" description="serviceFolderPaths array of absolute paths" type="array" variable="$serviceFolderPaths">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$serviceFolderPaths</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="76" package="Amfphp\Plugins\Discovery">
        <name>filterServiceNames2ClassFindInfo</name>
        <full_name>filterServiceNames2ClassFindInfo</full_name>
        <docblock line="72">
          <description>grabs serviceNames2ClassFindInfo from config and add discovery service</description>
          <long-description/>
          <tag line="72" name="param" description="associative array of key -&gt; class find info" type="array" variable="$serviceNames2ClassFindInfo">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="76">
          <name>$serviceNames2ClassFindInfo</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Plugins\AmfphpDiscovery\AmfphpDiscoveryService.php" hash="7da699c893aca427726badfee35911e6" package="Amfphp\Plugins\Discovery">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Plugins_Discovery"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="19" package="Amfphp\Plugins\Discovery">
      <extends/>
      <name>AmfphpDiscoveryService</name>
      <full_name>\AmfphpDiscoveryService</full_name>
      <docblock line="13">
        <description>analyses existing services.</description>
        <long-description>&lt;p&gt;Warning: if 2 or more services have the same name, t-only one will appear in the returned data,
as it is an associative array using the service name as key.&lt;/p&gt;</long-description>
        <tag line="13" name="package" description="Amfphp_Plugins_Discovery"/>
        <tag line="13" name="author" description="Ariel Sommeria-Klein"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="25" namespace="global" package="Default">
        <name>$excludePaths</name>
        <default/>
        <docblock line="21">
          <description/>
          <long-description/>
          <tag line="21" name="see" description="\AmfphpDiscovery" refers="\AmfphpDiscovery"/>
          <tag line="21" name="var" description="of strings(patterns)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="31" namespace="global" package="Default">
        <name>$serviceFolderPaths</name>
        <default/>
        <docblock line="27">
          <description>paths to folders containing services(relative or absolute).</description>
          <long-description>&lt;p&gt;set by plugin.&lt;/p&gt;</long-description>
          <tag line="27" name="var" description="of paths" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="37" namespace="global" package="Default">
        <name>$serviceNames2ClassFindInfo</name>
        <default/>
        <docblock line="33">
          <description/>
          <long-description/>
          <tag line="33" name="var" description="of ClassFindInfo. set by plugin." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="43" namespace="global" package="Default">
        <name>$restrictAccess</name>
        <default/>
        <docblock line="39">
          <description>restrict access to amfphp_admin.</description>
          <long-description/>
          <tag line="39" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="50" package="Amfphp\Plugins\Discovery">
        <name>_getMethodRoles</name>
        <full_name>_getMethodRoles</full_name>
        <docblock line="45">
          <description>get method roles</description>
          <long-description/>
          <tag line="45" name="param" description="" type="string" variable="$methodName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="45" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$methodName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="63" package="Amfphp\Plugins\Discovery">
        <name>searchFolderForServices</name>
        <full_name>searchFolderForServices</full_name>
        <docblock line="56">
          <description>finds classes in folder.</description>
          <long-description>&lt;p&gt;If in subfolders add the relative path to the name.
recursive, so use with care.&lt;/p&gt;</long-description>
          <tag line="56" name="param" description="" type="string" variable="$rootPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="56" name="param" description="" type="string" variable="$subFolder">
            <type by_reference="false">string</type>
          </tag>
          <tag line="56" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$rootPath</name>
          <default/>
          <type/>
        </argument>
        <argument line="63">
          <name>$subFolder</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="87" package="Amfphp\Plugins\Discovery">
        <name>getServiceNames</name>
        <full_name>getServiceNames</full_name>
        <docblock line="81">
          <description>returns a list of available services</description>
          <long-description/>
          <tag line="81" name="param" description="" type="array" variable="$serviceFolderPaths">
            <type by_reference="false">array</type>
          </tag>
          <tag line="81" name="param" description="" type="array" variable="$serviceNames2ClassFindInfo">
            <type by_reference="false">array</type>
          </tag>
          <tag line="81" name="return" description="of service names" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="87">
          <name>$serviceFolderPaths</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="87">
          <name>$serviceNames2ClassFindInfo</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="108" package="Amfphp\Plugins\Discovery">
        <name>parseMethodComment</name>
        <full_name>parseMethodComment</full_name>
        <docblock line="100">
          <description>extracts
- types from param tags.</description>
          <long-description>&lt;p&gt;type is first word after tag name, name of the variable is second word ($ is removed)
- return tag&lt;/p&gt;</long-description>
          <tag line="100" name="param" description="" type="string" variable="$comment">
            <type by_reference="false">string</type>
          </tag>
          <tag line="100" name="return" description="=&gt; type, 'params' =&gt; array{var name =&gt; type}}" type="\array{'returns'">
            <type by_reference="false">\array{'returns'</type>
          </tag>
        </docblock>
        <argument line="108">
          <name>$comment</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="140" package="Amfphp\Plugins\Discovery">
        <name>discover</name>
        <full_name>discover</full_name>
        <docblock line="136">
          <description>does the actual collection of data about available services</description>
          <long-description/>
          <tag line="136" name="return" description="of AmfphpDiscovery_ServiceInfo" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Amfphp\Plugins\AmfphpDiscovery\MethodDescriptor.php" hash="38e24a97126e6d4f29ceadb56f4dd38c" package="Amfphp\Plugins\Discovery">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Plugins_Discovery"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="20" package="Amfphp\Plugins\Discovery">
      <extends/>
      <name>AmfphpDiscovery_MethodDescriptor</name>
      <full_name>\AmfphpDiscovery_MethodDescriptor</full_name>
      <docblock line="14">
        <description>Contains all collected information about a service method.</description>
        <long-description/>
        <tag line="14" name="author" description="Ariel Sommeria-klein"/>
        <tag line="14" name="package" description="Amfphp_Plugins_Discovery"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="26" namespace="global" package="Default">
        <name>$name</name>
        <default/>
        <docblock line="22">
          <description>name</description>
          <long-description/>
          <tag line="22" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="32" namespace="global" package="Default">
        <name>$parameters</name>
        <default/>
        <docblock line="28">
          <description/>
          <long-description/>
          <tag line="28" name="var" description="of ParameterInfo" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="38" namespace="global" package="Default">
        <name>$comment</name>
        <default/>
        <docblock line="34">
          <description/>
          <long-description/>
          <tag line="34" name="var" description="method level comment" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="44" namespace="global" package="Default">
        <name>$returnType</name>
        <default/>
        <docblock line="40">
          <description>return type</description>
          <long-description/>
          <tag line="40" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="53" package="Amfphp\Plugins\Discovery">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="46">
          <description>constructor</description>
          <long-description/>
          <tag line="46" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="46" name="param" description="" type="array" variable="$parameters">
            <type by_reference="false">array</type>
          </tag>
          <tag line="46" name="param" description="" type="string" variable="$comment">
            <type by_reference="false">string</type>
          </tag>
          <tag line="46" name="param" description="" type="string" variable="$returnType">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="53">
          <name>$parameters</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="53">
          <name>$comment</name>
          <default/>
          <type/>
        </argument>
        <argument line="53">
          <name>$returnType</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Plugins\AmfphpDiscovery\ParameterDescriptor.php" hash="ea15f86f6cb3b17379de7174a17b7a78" package="Amfphp\Plugins\Discovery">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Plugins_Discovery"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="20" package="Amfphp\Plugins\Discovery">
      <extends/>
      <name>AmfphpDiscovery_ParameterDescriptor</name>
      <full_name>\AmfphpDiscovery_ParameterDescriptor</full_name>
      <docblock line="14">
        <description>Contains all collected information about a service method parameter</description>
        <long-description/>
        <tag line="14" name="author" description="Ariel Sommeria-klein"/>
        <tag line="14" name="package" description="Amfphp_Plugins_Discovery"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="26" namespace="global" package="Default">
        <name>$name</name>
        <default/>
        <docblock line="22">
          <description>name</description>
          <long-description/>
          <tag line="22" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="32" namespace="global" package="Default">
        <name>$type</name>
        <default/>
        <docblock line="28">
          <description>This can be gathered in 2 manners: commentary tag analysis and type hinting analysis.</description>
          <long-description>&lt;p&gt;For starters only the second method is used&lt;/p&gt;</long-description>
          <tag line="28" name="var" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="45" package="Amfphp\Plugins\Discovery">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="40">
          <description>constructor</description>
          <long-description/>
          <tag line="40" name="param" description="" type="String" variable="$name">
            <type by_reference="false">String</type>
          </tag>
          <tag line="40" name="param" description="" type="String" variable="$type">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="45">
          <name>$type</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Plugins\AmfphpDiscovery\ServiceDescriptor.php" hash="e8a318b465d2569f12e22d3c047ca26f" package="Amfphp\Plugins\Discovery">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Plugins_Discovery"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="20" package="Amfphp\Plugins\Discovery">
      <extends/>
      <name>AmfphpDiscovery_ServiceDescriptor</name>
      <full_name>\AmfphpDiscovery_ServiceDescriptor</full_name>
      <docblock line="14">
        <description>Contains all collected information about a service.</description>
        <long-description>&lt;p&gt;This information will be used by the generator.&lt;/p&gt;</long-description>
        <tag line="14" name="author" description="Ariel Sommeria-klein"/>
        <tag line="14" name="package" description="Amfphp_Plugins_Discovery"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="25" namespace="global" package="Default">
        <name>$name</name>
        <default/>
        <docblock line="21">
          <description>name</description>
          <long-description/>
          <tag line="21" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="30" namespace="global" package="Default">
        <name>$methods</name>
        <default/>
        <docblock line="26">
          <description>methods</description>
          <long-description/>
          <tag line="26" name="var" description="of MethodInfo" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="36" namespace="global" package="Default">
        <name>$comment</name>
        <default/>
        <docblock line="32">
          <description>class level comment</description>
          <long-description/>
          <tag line="32" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="44" package="Amfphp\Plugins\Discovery">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="38">
          <description>constructor</description>
          <long-description/>
          <tag line="38" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="38" name="param" description="" type="array" variable="$methods">
            <type by_reference="false">array</type>
          </tag>
          <tag line="38" name="param" description="" type="string" variable="$comment">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="44">
          <name>$methods</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="44">
          <name>$comment</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Plugins\AmfphpDummy\AmfphpDummy.php" hash="11cd83acce2436047276cd83f8532bfe" package="Amfphp\Plugins\Dummy">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Plugins_Dummy"/>
    </docblock>
    <include line="92" type="Include" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="19" package="Amfphp\Plugins\Dummy">
      <extends/>
      <implements>\Amfphp_Core_Common_IDeserializer</implements>
      <implements>\Amfphp_Core_Common_IDeserializedRequestHandler</implements>
      <implements>\Amfphp_Core_Common_IExceptionHandler</implements>
      <implements>\Amfphp_Core_Common_ISerializer</implements>
      <name>AmfphpDummy</name>
      <full_name>\AmfphpDummy</full_name>
      <docblock line="13">
        <description>This catches browser requests to the gateway, to show something more helpful than an error message.</description>
        <long-description/>
        <tag line="13" name="package" description="Amfphp_Plugins_Dummy"/>
        <tag line="13" name="author" description="Ariel Sommeria-Klein, Daniel Hoffmann (intermedi8.de)"/>
      </docblock>
      <constant namespace="global" line="24" package="Amfphp\Plugins\Dummy">
        <name>CONTENT_TYPE</name>
        <full_name>CONTENT_TYPE</full_name>
        <value>"application/x-www-form-urlencoded"</value>
        <docblock line="20">
          <description>if content type is not set or content is set to "application/x-www-form-urlencoded", this plugin will handle the request</description>
          <long-description/>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="30" package="Amfphp\Plugins\Dummy">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="26">
          <description>constructor.</description>
          <long-description/>
          <tag line="26" name="param" description="optional key/value pairs in an associative array. Used to override default configuration values." type="array" variable="$config">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$config</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="45" package="Amfphp\Plugins\Dummy">
        <name>filterHandler</name>
        <full_name>filterHandler</full_name>
        <docblock line="39">
          <description>if no content type, then returns this.</description>
          <long-description/>
          <tag line="39" name="param" description="null at call in gateway." type="mixed" variable="$handler">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="39" name="param" description="" type="String" variable="$contentType">
            <type by_reference="false">String</type>
          </tag>
          <tag line="39" name="return" description="or null" type="\this">
            <type by_reference="false">\this</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$handler</name>
          <default/>
          <type/>
        </argument>
        <argument line="45">
          <name>$contentType</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="59" package="Amfphp\Plugins\Dummy">
        <name>deserialize</name>
        <full_name>deserialize</full_name>
        <docblock line="51">
          <description>deserialize</description>
          <long-description/>
          <tag line="51" name="see" description="\Amfphp_Core_Common_IDeserializer" refers="\Amfphp_Core_Common_IDeserializer"/>
          <tag line="51" name="param" description="" type="array" variable="$getData">
            <type by_reference="false">array</type>
          </tag>
          <tag line="51" name="param" description="" type="array" variable="$postData">
            <type by_reference="false">array</type>
          </tag>
          <tag line="51" name="param" description="" type="string" variable="$rawPostData">
            <type by_reference="false">string</type>
          </tag>
          <tag line="51" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="59">
          <name>$getData</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="59">
          <name>$postData</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="59">
          <name>$rawPostData</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="71" package="Amfphp\Plugins\Dummy">
        <name>handleDeserializedRequest</name>
        <full_name>handleDeserializedRequest</full_name>
        <docblock line="64">
          <description>handle deserialized request</description>
          <long-description/>
          <tag line="64" name="see" description="\Amfphp_Core_Common_IDeserializedRequestHandler" refers="\Amfphp_Core_Common_IDeserializedRequestHandler"/>
          <tag line="64" name="param" description="" type="mixed" variable="$deserializedRequest">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="64" name="param" description="" type="\Amfphp_Core_Common_ServiceRouter" variable="$serviceRouter">
            <type by_reference="false">\Amfphp_Core_Common_ServiceRouter</type>
          </tag>
          <tag line="64" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="71">
          <name>$deserializedRequest</name>
          <default/>
          <type/>
        </argument>
        <argument line="71">
          <name>$serviceRouter</name>
          <default/>
          <type>\Amfphp_Core_Common_ServiceRouter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="80" package="Amfphp\Plugins\Dummy">
        <name>handleException</name>
        <full_name>handleException</full_name>
        <docblock line="75">
          <description>handle exception</description>
          <long-description/>
          <tag line="75" name="see" description="\Amfphp_Core_Common_IExceptionHandler" refers="\Amfphp_Core_Common_IExceptionHandler"/>
          <tag line="75" name="param" description="" type="\Exception" variable="$exception">
            <type by_reference="false">\Exception</type>
          </tag>
        </docblock>
        <argument line="80">
          <name>$exception</name>
          <default/>
          <type>\Exception</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="90" package="Amfphp\Plugins\Dummy">
        <name>serialize</name>
        <full_name>serialize</full_name>
        <docblock line="84">
          <description>serialize.</description>
          <long-description>&lt;p&gt;just includes index.html&lt;/p&gt;</long-description>
          <tag line="84" name="see" description="\Amfphp_Core_Common_ISerializer" refers="\Amfphp_Core_Common_ISerializer"/>
          <tag line="84" name="param" description="" type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="84" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="90">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="101" package="Amfphp\Plugins\Dummy">
        <name>filterHeaders</name>
        <full_name>filterHeaders</full_name>
        <docblock line="95">
          <description>filter the headers to make sure the content type is set to text/html if the request was handled by the service browser</description>
          <long-description/>
          <tag line="95" name="param" description="" type="array" variable="$headers">
            <type by_reference="false">array</type>
          </tag>
          <tag line="95" name="param" description="" type="string" variable="$contentType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="95" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="101">
          <name>$headers</name>
          <default/>
          <type/>
        </argument>
        <argument line="101">
          <name>$contentType</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Plugins\AmfphpErrorHandler\AmfphpErrorHandler.php" hash="8d3c65ec16a6406a4f488b694b322374" package="Amfphp\Plugins\ErrorHandler">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Plugins_ErrorHandler"/>
    </docblock>
    <function namespace="global" line="40" package="Amfphp\Plugins\ErrorHandler">
      <name>custom_warning_handler</name>
      <full_name>\custom_warning_handler</full_name>
      <docblock line="31">
        <description>throw an exceptino containing error info</description>
        <long-description/>
        <tag line="31" name="param" description="" type="int" variable="$errno">
          <type by_reference="false">int</type>
        </tag>
        <tag line="31" name="param" description="" type="string" variable="$errstr">
          <type by_reference="false">string</type>
        </tag>
        <tag line="31" name="param" description="" type="string" variable="$errfile">
          <type by_reference="false">string</type>
        </tag>
        <tag line="31" name="param" description="" type="int" variable="$errline">
          <type by_reference="false">int</type>
        </tag>
        <tag line="31" name="param" description="" type="mixed" variable="$errcontext">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="31" name="throws" description="" type="\Exception">
          <type by_reference="false">\Exception</type>
        </tag>
      </docblock>
      <argument line="40">
        <name>$errno</name>
        <default/>
        <type/>
      </argument>
      <argument line="40">
        <name>$errstr</name>
        <default/>
        <type/>
      </argument>
      <argument line="40">
        <name>$errfile</name>
        <default/>
        <type/>
      </argument>
      <argument line="40">
        <name>$errline</name>
        <default/>
        <type/>
      </argument>
      <argument line="40">
        <name>$errcontext</name>
        <default/>
        <type/>
      </argument>
    </function>
    <class final="false" abstract="false" namespace="global" line="21" package="Amfphp\Plugins\ErrorHandler">
      <extends/>
      <name>AmfphpErrorHandler</name>
      <full_name>\AmfphpErrorHandler</full_name>
      <docblock line="12">
        <description>sets a custom error handler to catch notices and such and transform them to exceptions.</description>
        <long-description/>
        <tag line="12" name="todo" description="this could be enhanced to use filters so that at the end of the gateway execution the error handling is set back to normal. This could be useful especially for integration with frameworks."/>
        <tag line="12" name="package" description="Amfphp_Plugins_ErrorHandler"/>
        <tag line="12" name="author" description="Ariel Sommeria-Klein"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="26" package="Amfphp\Plugins\ErrorHandler">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="22">
          <description>constructor.</description>
          <long-description>&lt;p&gt;Add filters on the HookManager.&lt;/p&gt;</long-description>
          <tag line="22" name="param" description="optional key/value pairs in an associative array. Used to override default configuration values." type="array" variable="$config">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="26">
          <name>$config</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Plugins\AmfphpFlexMessaging\AcknowledgeMessage.php" hash="139fcdc005121eb48e70d0d56c87ec4d" package="Amfphp\Plugins\FlexMessaging">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Plugins_FlexMessaging"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="20" package="Amfphp\Plugins\FlexMessaging">
      <extends/>
      <name>AmfphpFlexMessaging_AcknowledgeMessage</name>
      <full_name>\AmfphpFlexMessaging_AcknowledgeMessage</full_name>
      <docblock line="13">
        <description>Used to generate a Flex Acknowledge message.</description>
        <long-description>&lt;p&gt;part of the AmfphpFlexMessaging plugin&lt;/p&gt;</long-description>
        <tag line="13" name="package" description="Amfphp_Plugins_FlexMessaging"/>
        <tag line="13" name="author" description="Ariel Sommeria-Klein"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="26" namespace="global" package="Default">
        <name>$correlationId</name>
        <default/>
        <docblock line="21">
          <description>correlation id.</description>
          <long-description>&lt;p&gt;guid&lt;/p&gt;</long-description>
          <tag line="21" name="see" description="\generateRandomId" refers="\generateRandomId"/>
          <tag line="21" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="33" namespace="global" package="Default">
        <name>$messageId</name>
        <default/>
        <docblock line="28">
          <description>message id.</description>
          <long-description>&lt;p&gt;guid&lt;/p&gt;</long-description>
          <tag line="28" name="see" description="\generateRandomId" refers="\generateRandomId"/>
          <tag line="28" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="40" namespace="global" package="Default">
        <name>$clientId</name>
        <default/>
        <docblock line="35">
          <description>client id.</description>
          <long-description>&lt;p&gt;guid&lt;/p&gt;</long-description>
          <tag line="35" name="see" description="\generateRandomId" refers="\generateRandomId"/>
          <tag line="35" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="46" namespace="global" package="Default">
        <name>$destination</name>
        <default/>
        <docblock line="42">
          <description>destination</description>
          <long-description/>
          <tag line="42" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="52" namespace="global" package="Default">
        <name>$body</name>
        <default/>
        <docblock line="48">
          <description>body</description>
          <long-description/>
          <tag line="48" name="var" description="" type="\stdClass">
            <type by_reference="false">\stdClass</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="58" namespace="global" package="Default">
        <name>$timeToLive</name>
        <default/>
        <docblock line="54">
          <description>time to live</description>
          <long-description/>
          <tag line="54" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="64" namespace="global" package="Default">
        <name>$timestamp</name>
        <default/>
        <docblock line="60">
          <description>time stamp</description>
          <long-description/>
          <tag line="60" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="70" namespace="global" package="Default">
        <name>$headers</name>
        <default/>
        <docblock line="66">
          <description>headers.</description>
          <long-description>&lt;p&gt;DSId(string), DSMessagingVersion(int)&lt;/p&gt;</long-description>
          <tag line="66" name="var" description="" type="\stdClass">
            <type by_reference="false">\stdClass</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="76" package="Amfphp\Plugins\FlexMessaging">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="72">
          <description>constructor</description>
          <long-description/>
          <tag line="72" name="param" description="" type="string" variable="$correlationId">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="76">
          <name>$correlationId</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="93" package="Amfphp\Plugins\FlexMessaging">
        <name>generateRandomId</name>
        <full_name>generateRandomId</full_name>
        <docblock line="89">
          <description>generate random id</description>
          <long-description/>
          <tag line="89" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Amfphp\Plugins\AmfphpFlexMessaging\AmfphpFlexMessaging.php" hash="08f2a080ab2ff8a4b78a1a785ef174e4" package="Amfphp\Plugins\FlexMessaging">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Plugins_FlexMessaging"/>
    </docblock>
    <include line="15" type="Require Once" package="Default">
      <name/>
      <docblock line="12">
        <description>includes</description>
        <long-description/>
      </docblock>
    </include>
    <include line="16" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="33" package="Amfphp\Plugins\FlexMessaging">
      <extends/>
      <name>AmfphpFlexMessaging</name>
      <full_name>\AmfphpFlexMessaging</full_name>
      <docblock line="18">
        <description>Support for flex messaging.</description>
        <long-description>&lt;p&gt;This plugin can be deactivated if the project doesn't need flex messaging, usually a RemoteObject in Flex.&lt;/p&gt;

&lt;p&gt;Flex doesn't use the basic packet system. When using a remote objct, first a CommandMessage is sent, expecting an AcknowledgeMessage in return.
Then a RemotingMessage is sent, expecting an AcknowledgeMessage in return.
This plugin adds support for this message flow.&lt;/p&gt;

&lt;p&gt;In case of an error, an ErrorMessage is expected&lt;/p&gt;</long-description>
        <tag line="18" name="link" description="http://livedocs.adobe.com/flex/3/html/help.html?content=data_access_4.html" link="http://livedocs.adobe.com/flex/3/html/help.html?content=data_access_4.html"/>
        <tag line="18" name="package" description="Amfphp_Plugins_FlexMessaging"/>
        <tag line="18" name="author" description="Ariel Sommeria-Klein"/>
      </docblock>
      <constant namespace="global" line="35" package="Amfphp\Plugins\FlexMessaging">
        <name>FLEX_TYPE_COMMAND_MESSAGE</name>
        <full_name>FLEX_TYPE_COMMAND_MESSAGE</full_name>
        <value>'flex.messaging.messages.CommandMessage'</value>
      </constant>
      <constant namespace="global" line="36" package="Amfphp\Plugins\FlexMessaging">
        <name>FLEX_TYPE_REMOTING_MESSAGE</name>
        <full_name>FLEX_TYPE_REMOTING_MESSAGE</full_name>
        <value>'flex.messaging.messages.RemotingMessage'</value>
      </constant>
      <constant namespace="global" line="37" package="Amfphp\Plugins\FlexMessaging">
        <name>FLEX_TYPE_ACKNOWLEDGE_MESSAGE</name>
        <full_name>FLEX_TYPE_ACKNOWLEDGE_MESSAGE</full_name>
        <value>'flex.messaging.messages.AcknowledgeMessage'</value>
      </constant>
      <constant namespace="global" line="38" package="Amfphp\Plugins\FlexMessaging">
        <name>FLEX_TYPE_ERROR_MESSAGE</name>
        <full_name>FLEX_TYPE_ERROR_MESSAGE</full_name>
        <value>'flex.messaging.messages.ErrorMessage'</value>
      </constant>
      <constant namespace="global" line="39" package="Amfphp\Plugins\FlexMessaging">
        <name>FIELD_MESSAGE_ID</name>
        <full_name>FIELD_MESSAGE_ID</full_name>
        <value>'messageId'</value>
      </constant>
      <property final="false" static="false" visibility="protected" line="45" namespace="global" package="Default">
        <name>$clientUsesFlexMessaging</name>
        <default/>
        <docblock line="41">
          <description>if this is set, special error handling applies</description>
          <long-description/>
          <tag line="41" name="var" description="" type="Boolean">
            <type by_reference="false">Boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="51" namespace="global" package="Default">
        <name>$lastFlexMessageId</name>
        <default/>
        <docblock line="47">
          <description>the messageId of the last flex message.</description>
          <long-description>&lt;p&gt;Used for error generation&lt;/p&gt;</long-description>
          <tag line="47" name="var" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="57" namespace="global" package="Default">
        <name>$lastFlexMessageResponseUri</name>
        <default/>
        <docblock line="53">
          <description>the response uri of the last flex message.</description>
          <long-description>&lt;p&gt;Used for error generation&lt;/p&gt;</long-description>
          <tag line="53" name="var" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="64" namespace="global" package="Default">
        <name>$returnErrorDetails</name>
        <default>false</default>
        <docblock line="59">
          <description>return error details.</description>
          <long-description/>
          <tag line="59" name="see" description="\Amfphp_Core_Config::CONFIG_RETURN_ERROR_DETAILS" refers="\Amfphp_Core_Config::CONFIG_RETURN_ERROR_DETAILS"/>
          <tag line="59" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="70" package="Amfphp\Plugins\FlexMessaging">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="66">
          <description>constructor.</description>
          <long-description/>
          <tag line="66" name="param" description="optional key/value pairs in an associative array. Used to override default configuration values." type="array" variable="$config">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="70">
          <name>$config</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="84" package="Amfphp\Plugins\FlexMessaging">
        <name>filterAmfRequestMessageHandler</name>
        <full_name>filterAmfRequestMessageHandler</full_name>
        <docblock line="77">
          <description>filter amf request message handler</description>
          <long-description/>
          <tag line="77" name="param" description="null at call. If the plugin takes over the handling of the request message,&#13;&#10;it must set this to a proper handler for the message, probably itself." type="Object" variable="$handler">
            <type by_reference="false">Object</type>
          </tag>
          <tag line="77" name="param" description="the request message" type="\Amfphp_Core_Amf_Message" variable="$requestMessage">
            <type by_reference="false">\Amfphp_Core_Amf_Message</type>
          </tag>
          <tag line="77" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="84">
          <name>$handler</name>
          <default/>
          <type/>
        </argument>
        <argument line="84">
          <name>$requestMessage</name>
          <default/>
          <type>\Amfphp_Core_Amf_Message</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="111" package="Amfphp\Plugins\FlexMessaging">
        <name>filterAmfExceptionHandler</name>
        <full_name>filterAmfExceptionHandler</full_name>
        <docblock line="105">
          <description>filter amf exception handler</description>
          <long-description/>
          <tag line="105" name="param" description="null at call. If the plugin takes over the handling of the request message,&#13;&#10;it must set this to a proper handler for the message, probably itself." type="Object" variable="$handler">
            <type by_reference="false">Object</type>
          </tag>
          <tag line="105" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="111">
          <name>$handler</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="123" package="Amfphp\Plugins\FlexMessaging">
        <name>handleRequestMessage</name>
        <full_name>handleRequestMessage</full_name>
        <docblock line="117">
          <description>handle the request message instead of letting the Amf Handler do it.</description>
          <long-description/>
          <tag line="117" name="param" description="" type="\Amfphp_Core_Amf_Message" variable="$requestMessage">
            <type by_reference="false">\Amfphp_Core_Amf_Message</type>
          </tag>
          <tag line="117" name="param" description="" type="\Amfphp_Core_Common_ServiceRouter" variable="$serviceRouter">
            <type by_reference="false">\Amfphp_Core_Common_ServiceRouter</type>
          </tag>
          <tag line="117" name="return" description="" type="\Amfphp_Core_Amf_Message">
            <type by_reference="false">\Amfphp_Core_Amf_Message</type>
          </tag>
        </docblock>
        <argument line="123">
          <name>$requestMessage</name>
          <default/>
          <type>\Amfphp_Core_Amf_Message</type>
        </argument>
        <argument line="123">
          <name>$serviceRouter</name>
          <default/>
          <type>\Amfphp_Core_Common_ServiceRouter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="154" package="Amfphp\Plugins\FlexMessaging">
        <name>generateErrorResponse</name>
        <full_name>generateErrorResponse</full_name>
        <docblock line="149">
          <description>flex expects error messages formatted in a special way, using the ErrorMessage object.</description>
          <long-description/>
          <tag line="149" name="return" description="" type="\Amfphp_Core_Amf_Packet">
            <type by_reference="false">\Amfphp_Core_Amf_Packet</type>
          </tag>
          <tag line="149" name="param" description="" type="\Exception" variable="$exception">
            <type by_reference="false">\Exception</type>
          </tag>
        </docblock>
        <argument line="154">
          <name>$exception</name>
          <default/>
          <type>\Exception</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Plugins\AmfphpFlexMessaging\ErrorMessage.php" hash="ec0d9eaf5c68e361dce8efdfaeff49a8" package="Amfphp\Plugins\FlexMessaging">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Plugins_FlexMessaging"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="20" package="Amfphp\Plugins\FlexMessaging">
      <extends/>
      <name>AmfphpFlexMessaging_ErrorMessage</name>
      <full_name>\AmfphpFlexMessaging_ErrorMessage</full_name>
      <docblock line="13">
        <description>Used to generate a Flex Error message.</description>
        <long-description>&lt;p&gt;part of the AmfphpFlexMessaging plugin&lt;/p&gt;</long-description>
        <tag line="13" name="package" description="Amfphp_Plugins_FlexMessaging"/>
        <tag line="13" name="author" description="Ariel Sommeria-Klein"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="26" namespace="global" package="Default">
        <name>$correlationId</name>
        <default/>
        <docblock line="22">
          <description>correlation id.</description>
          <long-description>&lt;p&gt;guid&lt;/p&gt;</long-description>
          <tag line="22" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="32" namespace="global" package="Default">
        <name>$faultCode</name>
        <default/>
        <docblock line="28">
          <description>fault code</description>
          <long-description/>
          <tag line="28" name="var" description="" type="float">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="38" namespace="global" package="Default">
        <name>$faultDetail</name>
        <default/>
        <docblock line="34">
          <description>fault detail</description>
          <long-description/>
          <tag line="34" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="44" namespace="global" package="Default">
        <name>$faultString</name>
        <default/>
        <docblock line="40">
          <description>fault string</description>
          <long-description/>
          <tag line="40" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="50" namespace="global" package="Default">
        <name>$rootCause</name>
        <default/>
        <docblock line="46">
          <description>an object describing the cause.</description>
          <long-description>&lt;p&gt;Whatever you need.&lt;/p&gt;</long-description>
          <tag line="46" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="56" package="Amfphp\Plugins\FlexMessaging">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="52">
          <description>constructor</description>
          <long-description/>
          <tag line="52" name="param" description="" type="\type" variable="$correlationId">
            <type by_reference="false">\type</type>
          </tag>
        </docblock>
        <argument line="56">
          <name>$correlationId</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Plugins\AmfphpGet\AmfphpGet.php" hash="8e01d6a5d1460ee5ac16b66ce74f2eea" package="Amfphp\Plugins\Get">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Plugins_Get"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="38" package="Amfphp\Plugins\Get">
      <extends/>
      <implements>\Amfphp_Core_Common_IDeserializer</implements>
      <implements>\Amfphp_Core_Common_IDeserializedRequestHandler</implements>
      <implements>\Amfphp_Core_Common_IExceptionHandler</implements>
      <implements>\Amfphp_Core_Common_ISerializer</implements>
      <name>AmfphpGet</name>
      <full_name>\AmfphpGet</full_name>
      <docblock line="12">
        <description>Adds support for HTTP GET requests to services, useful for simple test calls and for cross domain ajax calls.</description>
        <long-description>&lt;p&gt;This plugin can be deactivated if the project doesn't use GET requests.&lt;/p&gt;

&lt;p&gt;Cross Domain Ajax calls are normally not possible for security reasons, but by using a hack you can get around it.
This however must be done with HTTP GET. So this plugin is specifically for requesting json data from amfPHP using HTTP GET.
This comes with some limitations: GET is limited in size, and you can't send complex objects.
If you're on the same domain, you're probably better off using the AmfphpJson plugin as these limitations don't apply.&lt;/p&gt;

&lt;p&gt;You must add the 'text/amfphpget' content type, or set it in the headers so that it is recognized as a call to be handled by this plugin.
for example:
http://yourserver.com/?contentType=text/amfphpget&amp;amp;serviceName=YourService&amp;amp;methodName=yourMethod&amp;amp;p01=value1&amp;amp;p2=value2 etc.&lt;/p&gt;

&lt;p&gt;If you are using this for crossdomain ajax with JSONP, the expected format of the request is to add the extra 'callback' parameter.
If no callback id is found, the answer simply contains the json encoded return data.
If the callback is found, the answer is wrapped so that it can be used for JSONP.&lt;/p&gt;

&lt;p&gt;Thanks to nViso.ch who needed the cross domain ajax functionality.&lt;/p&gt;

&lt;p&gt;Requires at least PHP 5.2.&lt;/p&gt;</long-description>
        <tag line="12" name="see" description="\global\http://remysharp.com/2007/10/08/what-is-jsonp/" refers="\global\http://remysharp.com/2007/10/08/what-is-jsonp/"/>
        <tag line="12" name="see" description="\global\http://usejquery.com/posts/9/the-jquery-cross-domain-ajax-guide" refers="\global\http://usejquery.com/posts/9/the-jquery-cross-domain-ajax-guide"/>
        <tag line="12" name="package" description="Amfphp_Plugins_Get"/>
        <tag line="12" name="author" description="Ariel Sommeria-Klein."/>
      </docblock>
      <constant namespace="global" line="43" package="Amfphp\Plugins\Get">
        <name>CONTENT_TYPE</name>
        <full_name>CONTENT_TYPE</full_name>
        <value>'text/amfphpget'</value>
        <docblock line="40">
          <description>the content-type string indicating a cross domain ajax call</description>
          <long-description/>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="50" namespace="global" package="Default">
        <name>$returnErrorDetails</name>
        <default>false</default>
        <docblock line="45">
          <description>return error details.</description>
          <long-description/>
          <tag line="45" name="see" description="\Amfphp_Core_Config::CONFIG_RETURN_ERROR_DETAILS" refers="\Amfphp_Core_Config::CONFIG_RETURN_ERROR_DETAILS"/>
          <tag line="45" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="56" package="Amfphp\Plugins\Get">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="52">
          <description>constructor.</description>
          <long-description>&lt;p&gt;Add filters on the HookManager.&lt;/p&gt;</long-description>
          <tag line="52" name="param" description="optional key/value pairs in an associative array. Used to override default configuration values." type="array" variable="$config">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="56">
          <name>$config</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="73" package="Amfphp\Plugins\Get">
        <name>filterHandler</name>
        <full_name>filterHandler</full_name>
        <docblock line="67">
          <description>If the content type contains the 'json' string, returns this plugin</description>
          <long-description/>
          <tag line="67" name="param" description="null at call in gateway." type="mixed" variable="$handler">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="67" name="param" description="" type="String" variable="$contentType">
            <type by_reference="false">String</type>
          </tag>
          <tag line="67" name="return" description="or null" type="\this">
            <type by_reference="false">\this</type>
          </tag>
        </docblock>
        <argument line="73">
          <name>$handler</name>
          <default/>
          <type/>
        </argument>
        <argument line="73">
          <name>$contentType</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="87" package="Amfphp\Plugins\Get">
        <name>deserialize</name>
        <full_name>deserialize</full_name>
        <docblock line="79">
          <description>deserialize</description>
          <long-description/>
          <tag line="79" name="see" description="\Amfphp_Core_Common_IDeserializer" refers="\Amfphp_Core_Common_IDeserializer"/>
          <tag line="79" name="param" description="" type="array" variable="$getData">
            <type by_reference="false">array</type>
          </tag>
          <tag line="79" name="param" description="" type="array" variable="$postData">
            <type by_reference="false">array</type>
          </tag>
          <tag line="79" name="param" description="" type="string" variable="$rawPostData">
            <type by_reference="false">string</type>
          </tag>
          <tag line="79" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="87">
          <name>$getData</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="87">
          <name>$postData</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="87">
          <name>$rawPostData</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="100" package="Amfphp\Plugins\Get">
        <name>handleDeserializedRequest</name>
        <full_name>handleDeserializedRequest</full_name>
        <docblock line="91">
          <description>Retrieve the serviceName, methodName and parameters from the PHP object
representing the JSON string
call service</description>
          <long-description/>
          <tag line="91" name="see" description="\Amfphp_Core_Common_IDeserializedRequestHandler" refers="\Amfphp_Core_Common_IDeserializedRequestHandler"/>
          <tag line="91" name="param" description="" type="array" variable="$deserializedRequest">
            <type by_reference="false">array</type>
          </tag>
          <tag line="91" name="param" description="" type="\Amfphp_Core_Common_ServiceRouter" variable="$serviceRouter">
            <type by_reference="false">\Amfphp_Core_Common_ServiceRouter</type>
          </tag>
          <tag line="91" name="return" description="service call response" type="\the">
            <type by_reference="false">\the</type>
          </tag>
        </docblock>
        <argument line="100">
          <name>$deserializedRequest</name>
          <default/>
          <type/>
        </argument>
        <argument line="100">
          <name>$serviceRouter</name>
          <default/>
          <type>\Amfphp_Core_Common_ServiceRouter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="128" package="Amfphp\Plugins\Get">
        <name>handleException</name>
        <full_name>handleException</full_name>
        <docblock line="122">
          <description>handle exception</description>
          <long-description/>
          <tag line="122" name="see" description="\Amfphp_Core_Common_IExceptionHandler" refers="\Amfphp_Core_Common_IExceptionHandler"/>
          <tag line="122" name="param" description="" type="\Exception" variable="$exception">
            <type by_reference="false">\Exception</type>
          </tag>
          <tag line="122" name="return" description="" type="\stdClass">
            <type by_reference="false">\stdClass</type>
          </tag>
        </docblock>
        <argument line="128">
          <name>$exception</name>
          <default/>
          <type>\Exception</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="147" package="Amfphp\Plugins\Get">
        <name>serialize</name>
        <full_name>serialize</full_name>
        <docblock line="141">
          <description>Encode the PHP object returned from the service call into a JSON string</description>
          <long-description/>
          <tag line="141" name="see" description="\Amfphp_Core_Common_ISerializer" refers="\Amfphp_Core_Common_ISerializer"/>
          <tag line="141" name="param" description="" type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="141" name="return" description="the encoded JSON string sent to JavaScript" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="147">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="163" package="Amfphp\Plugins\Get">
        <name>filterHeaders</name>
        <full_name>filterHeaders</full_name>
        <docblock line="157">
          <description>sets return content type to json</description>
          <long-description/>
          <tag line="157" name="param" description="" type="array" variable="$headers">
            <type by_reference="false">array</type>
          </tag>
          <tag line="157" name="param" description="" type="string" variable="$contentType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="157" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="163">
          <name>$headers</name>
          <default/>
          <type/>
        </argument>
        <argument line="163">
          <name>$contentType</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Plugins\AmfphpIncludedRequest\AmfphpIncludedRequest.php" hash="81620bb003242ba6ca718a85cff4c894" package="Amfphp\Plugins\AmfphpIncludedRequest">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Plugins_AmfphpIncludedRequest"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="39" package="Amfphp\Plugins\AmfphpIncludedRequest">
      <extends/>
      <implements>\Amfphp_Core_Common_IDeserializer</implements>
      <implements>\Amfphp_Core_Common_IDeserializedRequestHandler</implements>
      <implements>\Amfphp_Core_Common_IExceptionHandler</implements>
      <implements>\Amfphp_Core_Common_ISerializer</implements>
      <name>AmfphpIncludedRequest</name>
      <full_name>\AmfphpIncludedRequest</full_name>
      <docblock line="13">
        <description>allows inclusion of an amfPHP entry point script.</description>
        <long-description>&lt;p&gt;This is so that a script running on the same server can
include the entry point script and execute a request.&lt;/p&gt;

&lt;p&gt;It works by setting the required globals describing the request, including the entry point script, and retrieving the response data.&lt;/p&gt;

&lt;p&gt;globals are:
$amfphpIncludedRequestServiceName
$amfphpIncludedRequestMethodName
$amfphpIncludedRequestParameters
$amfphpIncludedRequestReturnValue&lt;/p&gt;

&lt;p&gt;declare and them before including your entry point script. For example:&lt;/p&gt;

&lt;p&gt;$amfphpIncludedRequestServiceName = "AmfphpDiscoveryService";
$amfphpIncludedRequestMethodName = "discover";
$amfphpIncludedRequestParameters = array();
$amfphpIncludedRequestReturnValue = null;
require(dirname(&lt;strong&gt;FILE&lt;/strong&gt;) . '/../../Amfphp/index.php');
print_r($amfphpIncludedRequestReturnValue);&lt;/p&gt;

&lt;p&gt;the plugin considers that if $amfphpIncludedRequestServiceName is set, then the request is an included request and that it must be handled here.&lt;/p&gt;</long-description>
        <tag line="13" name="package" description="Amfphp_Plugins_AmfphpIncludedRequest"/>
        <tag line="13" name="author" description="Ariel Sommeria-Klein"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="45" package="Amfphp\Plugins\AmfphpIncludedRequest">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="41">
          <description>constructor.</description>
          <long-description/>
          <tag line="41" name="param" description="optional key/value pairs in an associative array. Used to override default configuration values." type="array" variable="$config">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$config</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="65" package="Amfphp\Plugins\AmfphpIncludedRequest">
        <name>filterHandler</name>
        <full_name>filterHandler</full_name>
        <docblock line="59">
          <description>if no content type, then returns this.</description>
          <long-description/>
          <tag line="59" name="param" description="null at call in gateway." type="mixed" variable="$handler">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="59" name="param" description="" type="String" variable="$contentType">
            <type by_reference="false">String</type>
          </tag>
          <tag line="59" name="return" description="or null" type="\this">
            <type by_reference="false">\this</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$handler</name>
          <default/>
          <type/>
        </argument>
        <argument line="65">
          <name>$contentType</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="80" package="Amfphp\Plugins\AmfphpIncludedRequest">
        <name>deserialize</name>
        <full_name>deserialize</full_name>
        <docblock line="72">
          <description>deserialize</description>
          <long-description/>
          <tag line="72" name="see" description="\Amfphp_Core_Common_IDeserializer" refers="\Amfphp_Core_Common_IDeserializer"/>
          <tag line="72" name="param" description="" type="array" variable="$getData">
            <type by_reference="false">array</type>
          </tag>
          <tag line="72" name="param" description="" type="array" variable="$postData">
            <type by_reference="false">array</type>
          </tag>
          <tag line="72" name="param" description="" type="string" variable="$rawPostData">
            <type by_reference="false">string</type>
          </tag>
          <tag line="72" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="80">
          <name>$getData</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="80">
          <name>$postData</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="80">
          <name>$rawPostData</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="94" package="Amfphp\Plugins\AmfphpIncludedRequest">
        <name>handleDeserializedRequest</name>
        <full_name>handleDeserializedRequest</full_name>
        <docblock line="87">
          <description>call service</description>
          <long-description/>
          <tag line="87" name="see" description="\Amfphp_Core_Common_IDeserializedRequestHandler" refers="\Amfphp_Core_Common_IDeserializedRequestHandler"/>
          <tag line="87" name="param" description="" type="array" variable="$deserializedRequest">
            <type by_reference="false">array</type>
          </tag>
          <tag line="87" name="param" description="" type="\Amfphp_Core_Common_ServiceRouter" variable="$serviceRouter">
            <type by_reference="false">\Amfphp_Core_Common_ServiceRouter</type>
          </tag>
          <tag line="87" name="return" description="service call response" type="\the">
            <type by_reference="false">\the</type>
          </tag>
        </docblock>
        <argument line="94">
          <name>$deserializedRequest</name>
          <default/>
          <type/>
        </argument>
        <argument line="94">
          <name>$serviceRouter</name>
          <default/>
          <type>\Amfphp_Core_Common_ServiceRouter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="104" package="Amfphp\Plugins\AmfphpIncludedRequest">
        <name>handleException</name>
        <full_name>handleException</full_name>
        <docblock line="98">
          <description>handle exception</description>
          <long-description/>
          <tag line="98" name="see" description="\Amfphp_Core_Common_IExceptionHandler" refers="\Amfphp_Core_Common_IExceptionHandler"/>
          <tag line="98" name="param" description="" type="\Exception" variable="$exception">
            <type by_reference="false">\Exception</type>
          </tag>
          <tag line="98" name="return" description="" type="\Exception">
            <type by_reference="false">\Exception</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$exception</name>
          <default/>
          <type>\Exception</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="114" package="Amfphp\Plugins\AmfphpIncludedRequest">
        <name>serialize</name>
        <full_name>serialize</full_name>
        <docblock line="108">
          <description>set the return data in global $amfphpIncludedRequestReturnValue</description>
          <long-description/>
          <tag line="108" name="see" description="\Amfphp_Core_Common_ISerializer" refers="\Amfphp_Core_Common_ISerializer"/>
          <tag line="108" name="param" description="" type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="108" name="return" description="the encoded JSON string sent to JavaScript" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="114">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="128" package="Amfphp\Plugins\AmfphpIncludedRequest">
        <name>filterHeaders</name>
        <full_name>filterHeaders</full_name>
        <docblock line="122">
          <description>filter the headers to make sure the content type is set to text/html if the request was handled by the service browser</description>
          <long-description/>
          <tag line="122" name="param" description="" type="array" variable="$headers">
            <type by_reference="false">array</type>
          </tag>
          <tag line="122" name="param" description="" type="string" variable="$contentType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="122" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="128">
          <name>$headers</name>
          <default/>
          <type/>
        </argument>
        <argument line="128">
          <name>$contentType</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Plugins\AmfphpJson\AmfphpJson.php" hash="ba621829a546ee88a748d583948eee31" package="Amfphp\Plugins\Json">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Plugins_Json"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="34" package="Amfphp\Plugins\Json">
      <extends/>
      <implements>\Amfphp_Core_Common_IDeserializer</implements>
      <implements>\Amfphp_Core_Common_IDeserializedRequestHandler</implements>
      <implements>\Amfphp_Core_Common_IExceptionHandler</implements>
      <implements>\Amfphp_Core_Common_ISerializer</implements>
      <name>AmfphpJson</name>
      <full_name>\AmfphpJson</full_name>
      <docblock line="13">
        <description>Enables amfPHP to receive and reply with JSON
This plugin can be deactivated if the project doesn't need to support JSON
strings and returned as JSON strings using POST parameters.</description>
        <long-description>&lt;p&gt;You must add the 'application/json' content type, or set it in the headers so that it is recognized as a call to be handled by this plugin.
for example:
http://yourserver.com/Amfphp/?contentType=application/json&lt;/p&gt;

&lt;p&gt;Here is some sample code using Javascript with JQuery:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var callDataObj = {"serviceName":"PizzaService", "methodName":"getPizza","parameters":[]};
var callData = JSON.stringify(callDataObj);
$.post("http://yourserver.com/Amfphp/?contentType=application/json", callData, onSuccess);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Requires at least PHP 5.2.&lt;/p&gt;</long-description>
        <tag line="13" name="package" description="Amfphp_Plugins_Json"/>
        <tag line="13" name="author" description="Yannick DOMINGUEZ"/>
      </docblock>
      <constant namespace="global" line="38" package="Amfphp\Plugins\Json">
        <name>JSON_CONTENT_TYPE</name>
        <full_name>JSON_CONTENT_TYPE</full_name>
        <value>'application/json'</value>
        <docblock line="35">
          <description>the content-type string indicating a JSON content</description>
          <long-description/>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="45" namespace="global" package="Default">
        <name>$returnErrorDetails</name>
        <default>false</default>
        <docblock line="40">
          <description>return error details.</description>
          <long-description/>
          <tag line="40" name="see" description="\Amfphp_Core_Config::CONFIG_RETURN_ERROR_DETAILS" refers="\Amfphp_Core_Config::CONFIG_RETURN_ERROR_DETAILS"/>
          <tag line="40" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="51" package="Amfphp\Plugins\Json">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="47">
          <description>constructor.</description>
          <long-description>&lt;p&gt;Add filters on the HookManager.&lt;/p&gt;</long-description>
          <tag line="47" name="param" description="optional key/value pairs in an associative array. Used to override default configuration values." type="array" variable="$config">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$config</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="66" package="Amfphp\Plugins\Json">
        <name>filterHandler</name>
        <full_name>filterHandler</full_name>
        <docblock line="60">
          <description>If the content type contains the 'json' string, returns this plugin</description>
          <long-description/>
          <tag line="60" name="param" description="null at call in gateway." type="mixed" variable="$handler">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="60" name="param" description="" type="String" variable="$contentType">
            <type by_reference="false">String</type>
          </tag>
          <tag line="60" name="return" description="or null" type="\this">
            <type by_reference="false">\this</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$handler</name>
          <default/>
          <type/>
        </argument>
        <argument line="66">
          <name>$contentType</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="81" package="Amfphp\Plugins\Json">
        <name>deserialize</name>
        <full_name>deserialize</full_name>
        <docblock line="73">
          <description>deserialize</description>
          <long-description/>
          <tag line="73" name="see" description="\Amfphp_Core_Common_IDeserializer" refers="\Amfphp_Core_Common_IDeserializer"/>
          <tag line="73" name="param" description="" type="array" variable="$getData">
            <type by_reference="false">array</type>
          </tag>
          <tag line="73" name="param" description="" type="array" variable="$postData">
            <type by_reference="false">array</type>
          </tag>
          <tag line="73" name="param" description="" type="string" variable="$rawPostData">
            <type by_reference="false">string</type>
          </tag>
          <tag line="73" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$getData</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="81">
          <name>$postData</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="81">
          <name>$rawPostData</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="137" package="Amfphp\Plugins\Json">
        <name>handleDeserializedRequest</name>
        <full_name>handleDeserializedRequest</full_name>
        <docblock line="128">
          <description>Retrieve the serviceName, methodName and parameters from the PHP object
representing the JSON string
call service</description>
          <long-description/>
          <tag line="128" name="see" description="\Amfphp_Core_Common_IDeserializedRequestHandler" refers="\Amfphp_Core_Common_IDeserializedRequestHandler"/>
          <tag line="128" name="param" description="" type="array" variable="$deserializedRequest">
            <type by_reference="false">array</type>
          </tag>
          <tag line="128" name="param" description="" type="\Amfphp_Core_Common_ServiceRouter" variable="$serviceRouter">
            <type by_reference="false">\Amfphp_Core_Common_ServiceRouter</type>
          </tag>
          <tag line="128" name="return" description="service call response" type="\the">
            <type by_reference="false">\the</type>
          </tag>
        </docblock>
        <argument line="137">
          <name>$deserializedRequest</name>
          <default/>
          <type/>
        </argument>
        <argument line="137">
          <name>$serviceRouter</name>
          <default/>
          <type>\Amfphp_Core_Common_ServiceRouter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="153" package="Amfphp\Plugins\Json">
        <name>handleException</name>
        <full_name>handleException</full_name>
        <docblock line="148">
          <description>don't format; just throw! In this way ajax libs will have their error functions triggered</description>
          <long-description/>
          <tag line="148" name="param" description="" type="\Exception" variable="$exception">
            <type by_reference="false">\Exception</type>
          </tag>
          <tag line="148" name="see" description="\Amfphp_Core_Common_IExceptionHandler" refers="\Amfphp_Core_Common_IExceptionHandler"/>
        </docblock>
        <argument line="153">
          <name>$exception</name>
          <default/>
          <type>\Exception</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="164" package="Amfphp\Plugins\Json">
        <name>serialize</name>
        <full_name>serialize</full_name>
        <docblock line="158">
          <description>Encode the PHP object returned from the service call into a JSON string</description>
          <long-description/>
          <tag line="158" name="see" description="\Amfphp_Core_Common_ISerializer" refers="\Amfphp_Core_Common_ISerializer"/>
          <tag line="158" name="param" description="" type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="158" name="return" description="encoded JSON string sent to JavaScript" type="\the">
            <type by_reference="false">\the</type>
          </tag>
        </docblock>
        <argument line="164">
          <name>$data</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Plugins\AmfphpLogger\AmfphpLogger.php" hash="80b2772142a66dd70a2b8605bf527047" package="Amfphp\Plugins\Logger">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Plugins_Logger"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="23" package="Amfphp\Plugins\Logger">
      <extends/>
      <name>AmfphpLogger</name>
      <full_name>\AmfphpLogger</full_name>
      <docblock line="13">
        <description>logs requests and responses in their serialized and deserialized forms.</description>
        <long-description>&lt;p&gt;deactivated by default.&lt;/p&gt;

&lt;p&gt;Note that this a crude logging system, with no levels, targets etc. like Log4j for example.
It is as such to be used for development purposes, but not for production&lt;/p&gt;</long-description>
        <tag line="13" name="package" description="Amfphp_Plugins_Logger"/>
        <tag line="13" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <constant namespace="global" line="25" package="Amfphp\Plugins\Logger">
        <name>LOG_FILE_PATH</name>
        <full_name>LOG_FILE_PATH</full_name>
        <value>'amfphplog.log'</value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="31" package="Amfphp\Plugins\Logger">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="27">
          <description>constructor.</description>
          <long-description/>
          <tag line="27" name="param" description="optional key/value pairs in an associative array. Used to override default configuration values." type="array" variable="$config">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$config</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="46" package="Amfphp\Plugins\Logger">
        <name>logMessage</name>
        <full_name>logMessage</full_name>
        <docblock line="40">
          <description>write éessage to log file at LOG_FILE_PATH</description>
          <long-description/>
          <tag line="40" name="see" description="\LOG_FILE_PATH" refers="\LOG_FILE_PATH"/>
          <tag line="40" name="param" description="" type="String" variable="$message">
            <type by_reference="false">String</type>
          </tag>
          <tag line="40" name="throws" description="" type="\Amfphp_Core_Exception">
            <type by_reference="false">\Amfphp_Core_Exception</type>
          </tag>
        </docblock>
        <argument line="46">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="59" package="Amfphp\Plugins\Logger">
        <name>filterSerializedRequest</name>
        <full_name>filterSerializedRequest</full_name>
        <docblock line="55">
          <description>logs the serialized incoming packet</description>
          <long-description/>
          <tag line="55" name="param" description="" type="String" variable="$rawData">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="59">
          <name>$rawData</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="67" package="Amfphp\Plugins\Logger">
        <name>filterDeserializedRequest</name>
        <full_name>filterDeserializedRequest</full_name>
        <docblock line="63">
          <description>logs the deserialized request</description>
          <long-description/>
          <tag line="63" name="param" description="" type="mixed" variable="$deserializedRequest">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="67">
          <name>$deserializedRequest</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="75" package="Amfphp\Plugins\Logger">
        <name>filterDeserializedResponse</name>
        <full_name>filterDeserializedResponse</full_name>
        <docblock line="71">
          <description>logs the deserialized response</description>
          <long-description/>
          <tag line="71" name="param" description="" type="\packet" variable="$deserializedResponse">
            <type by_reference="false">\packet</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$deserializedResponse</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="83" package="Amfphp\Plugins\Logger">
        <name>filterSerializedResponse</name>
        <full_name>filterSerializedResponse</full_name>
        <docblock line="79">
          <description>logs the deserialized incoming packet</description>
          <long-description/>
          <tag line="79" name="param" description="" type="mixed" variable="$rawData">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="83">
          <name>$rawData</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Amfphp\Services\ExampleService.php" hash="9107b7a612709ef4424401b061a607fc" package="Amfphp\Services">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Services"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="19" package="Amfphp\Services">
      <extends/>
      <name>ExampleService</name>
      <full_name>\ExampleService</full_name>
      <docblock line="13">
        <description>This is a test/example service.</description>
        <long-description>&lt;p&gt;Remove it for production use&lt;/p&gt;</long-description>
        <tag line="13" name="package" description="Amfphp_Services"/>
        <tag line="13" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="26" package="Amfphp\Services">
        <name>returnOneParam</name>
        <full_name>returnOneParam</full_name>
        <docblock line="21">
          <description>return the same data as what was sent</description>
          <long-description/>
          <tag line="21" name="param" description="" type="mixed" variable="$param">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="21" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="26">
          <name>$param</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="BackOffice\AccessManager.php" hash="82268112b864b3cf6c049fe100912068" package="Amfphp\Backoffice">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Backoffice"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="21" package="Amfphp\Backoffice">
      <extends/>
      <name>Amfphp_BackOffice_AccessManager</name>
      <full_name>\Amfphp_BackOffice_AccessManager</full_name>
      <docblock line="14">
        <description>controls access to back office, along with SignIn, SignOut scripts</description>
        <long-description/>
        <tag line="14" name="author" description="Ariel Sommeria-klein"/>
        <tag line="14" name="package" description="Amfphp_Backoffice"/>
      </docblock>
      <constant namespace="global" line="26" package="Amfphp\Backoffice">
        <name>SESSION_FIELD_ROLES</name>
        <full_name>SESSION_FIELD_ROLES</full_name>
        <value>'amfphp_roles'</value>
        <docblock line="22">
          <description>the field in the session where the roles array is stored</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="global" line="27" package="Amfphp\Backoffice">
        <name>AMFPHP_ADMIN_ROLE</name>
        <full_name>AMFPHP_ADMIN_ROLE</full_name>
        <value>'amfphp_admin'</value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="33" package="Amfphp\Backoffice">
        <name>isAccessGranted</name>
        <full_name>isAccessGranted</full_name>
        <docblock line="29">
          <description>checks if access should be granted, either because no sign in is required, or because the user is actually signed in.</description>
          <long-description>&lt;p&gt;note: must be called before output starts, as starting a session can change headers on some configs.&lt;/p&gt;</long-description>
        </docblock>
      </method>
    </class>
  </file>
  <file path="BackOffice\ClassLoader.php" hash="eea5ef3623f1a41c1d7408b0e2bbcc08" package="Amfphp\BackOffice">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_BackOffice"/>
    </docblock>
    <include line="25" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="26" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="27" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="28" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="29" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="30" type="Require Once" package="Default">
      <name/>
    </include>
    <constant namespace="global" line="24" package="Amfphp\BackOffice">
      <name>AMFPHP_BACKOFFICE_ROOTPATH</name>
      <full_name>\AMFPHP_BACKOFFICE_ROOTPATH</full_name>
      <value>dirname(__FILE__) . DIRECTORY_SEPARATOR</value>
    </constant>
  </file>
  <file path="BackOffice\ClientGenerator\GeneratorManager.php" hash="0b26622e0c93cfe26d9e2f5d1fcc7c64" package="Amfphp\\BackOffice\ClientGenerator">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp__BackOffice_ClientGenerator"/>
    </docblock>
    <include line="43" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="20" package="Amfphp\\BackOffice\ClientGenerator">
      <extends/>
      <name>Amfphp_BackOffice_ClientGenerator_GeneratorManager</name>
      <full_name>\Amfphp_BackOffice_ClientGenerator_GeneratorManager</full_name>
      <docblock line="14">
        <description>loads the generators</description>
        <long-description/>
        <tag line="14" name="author" description="Ariel Sommeria-klein"/>
        <tag line="14" name="package" description="Amfphp__BackOffice_ClientGenerator"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="25" package="Amfphp\\BackOffice\ClientGenerator">
        <name>loadGenerators</name>
        <full_name>loadGenerators</full_name>
        <docblock line="21">
          <description>load generators</description>
          <long-description/>
          <tag line="21" name="param" description="of strings $generatorFolders" type="array" variable="$generatorFolders">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="25">
          <name>$generatorFolders</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="BackOffice\ClientGenerator\Generators\AmfphpFlashClientGenerator\AmfphpFlashClientGenerator.php" hash="0c5041d965dc0775ac098240815e4d14" package="Amfphp\Backoffice\Generators">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Backoffice_Generators"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="19" package="Amfphp\Backoffice\Generators">
      <extends>\Amfphp_BackOffice_ClientGenerator_LocalClientGenerator</extends>
      <name>AmfphpFlashClientGenerator</name>
      <full_name>\AmfphpFlashClientGenerator</full_name>
      <docblock line="13">
        <description>generates a Flash project for consumption of amfPHP services</description>
        <long-description/>
        <tag line="13" name="author" description="Ariel Sommeria-klein"/>
        <tag line="13" name="package" description="Amfphp_Backoffice_Generators"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="24" package="Amfphp\Backoffice\Generators">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="21">
          <description>constructor</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="32" package="Amfphp\Backoffice\Generators">
        <name>getUiCallText</name>
        <full_name>getUiCallText</full_name>
        <docblock line="28">
          <description>get ui call text</description>
          <long-description/>
          <tag line="28" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="40" package="Amfphp\Backoffice\Generators">
        <name>getInfoUrl</name>
        <full_name>getInfoUrl</full_name>
        <docblock line="36">
          <description>info url</description>
          <long-description/>
          <tag line="36" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="BackOffice\ClientGenerator\Generators\AmfphpFlexClientGenerator\AmfphpFlexClientGenerator.php" hash="be3f4b27a915360b602540558dbe36c2" package="Amfphp\Backoffice\Generators">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Backoffice_Generators"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="18" package="Amfphp\Backoffice\Generators">
      <extends>\Amfphp_BackOffice_ClientGenerator_LocalClientGenerator</extends>
      <name>AmfphpFlexClientGenerator</name>
      <full_name>\AmfphpFlexClientGenerator</full_name>
      <docblock line="12">
        <description>generates a Flash project for consumption of amfPHP services</description>
        <long-description/>
        <tag line="12" name="author" description="Ariel Sommeria-klein"/>
        <tag line="12" name="package" description="Amfphp_Backoffice_Generators"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="23" package="Amfphp\Backoffice\Generators">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="20">
          <description>constructor</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="31" package="Amfphp\Backoffice\Generators">
        <name>getUiCallText</name>
        <full_name>getUiCallText</full_name>
        <docblock line="27">
          <description>get ui call text</description>
          <long-description/>
          <tag line="27" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="40" package="Amfphp\Backoffice\Generators">
        <name>getInfoUrl</name>
        <full_name>getInfoUrl</full_name>
        <docblock line="36">
          <description>info url</description>
          <long-description/>
          <tag line="36" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="BackOffice\ClientGenerator\Generators\AmfphpHtmlClientGenerator\AmfphpHtmlClientGenerator.php" hash="d9b608160b02a73f9c2d23dc446efd36" package="Amfphp\Backoffice\Generators">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Backoffice_Generators"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="20" package="Amfphp\Backoffice\Generators">
      <extends>\Amfphp_BackOffice_ClientGenerator_LocalClientGenerator</extends>
      <name>AmfphpHtmlClientGenerator</name>
      <full_name>\AmfphpHtmlClientGenerator</full_name>
      <docblock line="14">
        <description>generates a Flash project for consumption of amfPHP services</description>
        <long-description/>
        <tag line="14" name="author" description="Ariel Sommeria-klein"/>
        <tag line="14" name="package" description="Amfphp_Backoffice_Generators"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="25" package="Amfphp\Backoffice\Generators">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="22">
          <description>constructor</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="33" package="Amfphp\Backoffice\Generators">
        <name>getUiCallText</name>
        <full_name>getUiCallText</full_name>
        <docblock line="29">
          <description>get ui call text</description>
          <long-description/>
          <tag line="29" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="41" package="Amfphp\Backoffice\Generators">
        <name>getInfoUrl</name>
        <full_name>getInfoUrl</full_name>
        <docblock line="37">
          <description>info url</description>
          <long-description/>
          <tag line="37" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="49" package="Amfphp\Backoffice\Generators">
        <name>getTestUrlSuffix</name>
        <full_name>getTestUrlSuffix</full_name>
        <docblock line="45">
          <description>(non-PHPdoc)</description>
          <long-description/>
          <tag line="45" name="see" description="\ClientGenerator/Amfphp_BackOffice_ClientGenerator_LocalClientGenerator::getTestUrlSuffix()" refers="\ClientGenerator/Amfphp_BackOffice_ClientGenerator_LocalClientGenerator::getTestUrlSuffix()"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="BackOffice\ClientGenerator\LocalClientGenerator.php" hash="42956581f1af5b141974abafc73a3a64" package="Amfphp\Backoffice\Generators">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Backoffice_Generators"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="26" package="Amfphp\Backoffice\Generators">
      <extends/>
      <name>Amfphp_BackOffice_ClientGenerator_LocalClientGenerator</name>
      <full_name>\Amfphp_BackOffice_ClientGenerator_LocalClientGenerator</full_name>
      <docblock line="14">
        <description>Handles typical client generation, override various methods for customisation
1.</description>
        <long-description>&lt;p&gt;copies the template.
2. looks for template directives in the code. Usually these directives indicate a block of code that must be replicated.
Each directive starts with '/**ACG' and must end with * /
note that services in subfolders should get a special treatment, and ideally code would be generated in them
with additionnal sub-packages. This is technically too messy, so the '/' is simply replaced
by '__'.  This will be replaced by a '/' in Amfphp.&lt;/p&gt;</long-description>
        <tag line="14" name="author" description="Ariel Sommeria-klein"/>
        <tag line="14" name="package" description="Amfphp_Backoffice_Generators"/>
      </docblock>
      <constant namespace="global" line="83" package="Amfphp\Backoffice\Generators">
        <name>_SERVICE_</name>
        <full_name>_SERVICE_</full_name>
        <value>'_SERVICE_'</value>
      </constant>
      <constant namespace="global" line="84" package="Amfphp\Backoffice\Generators">
        <name>_METHOD_</name>
        <full_name>_METHOD_</full_name>
        <value>'_METHOD_'</value>
      </constant>
      <constant namespace="global" line="85" package="Amfphp\Backoffice\Generators">
        <name>_PARAMETER_</name>
        <full_name>_PARAMETER_</full_name>
        <value>'_PARAMETER_'</value>
      </constant>
      <constant namespace="global" line="87" package="Amfphp\Backoffice\Generators">
        <name>SERVICE</name>
        <full_name>SERVICE</full_name>
        <value>'SERVICE'</value>
      </constant>
      <constant namespace="global" line="88" package="Amfphp\Backoffice\Generators">
        <name>METHOD</name>
        <full_name>METHOD</full_name>
        <value>'METHOD'</value>
      </constant>
      <constant namespace="global" line="89" package="Amfphp\Backoffice\Generators">
        <name>PARAMETER</name>
        <full_name>PARAMETER</full_name>
        <value>'PARAMETER'</value>
      </constant>
      <constant namespace="global" line="90" package="Amfphp\Backoffice\Generators">
        <name>PARAMETER_COMMA</name>
        <full_name>PARAMETER_COMMA</full_name>
        <value>'PARAMETER_COMMA'</value>
      </constant>
      <property final="false" static="false" visibility="protected" line="33" namespace="global" package="Default">
        <name>$codeFileExtensions</name>
        <default/>
        <docblock line="28">
          <description>code file extensions to parse.</description>
          <long-description>&lt;p&gt;for example array('as')&lt;/p&gt;</long-description>
          <tag line="28" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="39" namespace="global" package="Default">
        <name>$templateFolderUrl</name>
        <default/>
        <docblock line="35">
          <description>absolute path to folder where template is</description>
          <long-description/>
          <tag line="35" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="45" namespace="global" package="Default">
        <name>$services</name>
        <default/>
        <docblock line="41">
          <description>services</description>
          <long-description/>
          <tag line="41" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="53" namespace="global" package="Default">
        <name>$serviceBeingProcessed</name>
        <default/>
        <docblock line="47">
          <description>service being processed.</description>
          <long-description>&lt;p&gt;untyped&lt;/p&gt;</long-description>
          <tag line="47" name="see" description="\AmfphpDiscovery_ServiceDescriptor" refers="\AmfphpDiscovery_ServiceDescriptor"/>
          <tag line="47" name="var" description="" type="\stdClass">
            <type by_reference="false">\stdClass</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="61" namespace="global" package="Default">
        <name>$methodBeingProcessed</name>
        <default/>
        <docblock line="55">
          <description>method being processed.</description>
          <long-description>&lt;p&gt;untyped&lt;/p&gt;</long-description>
          <tag line="55" name="see" description="\AmfphpDiscovery_MethodDescriptor" refers="\AmfphpDiscovery_MethodDescriptor"/>
          <tag line="55" name="var" description="" type="\stdClass">
            <type by_reference="false">\stdClass</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="67" namespace="global" package="Default">
        <name>$fileBeingProcessed</name>
        <default/>
        <docblock line="63">
          <description>file being processed, useful for error messages</description>
          <long-description/>
          <tag line="63" name="var" description="" type="\SplFileInfo">
            <type by_reference="false">\SplFileInfo</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="73" namespace="global" package="Default">
        <name>$amfphpEntryPointUrl</name>
        <default/>
        <docblock line="69">
          <description>url</description>
          <long-description/>
          <tag line="69" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="79" namespace="global" package="Default">
        <name>$targetFolder</name>
        <default>'ClientGenerator/Generated/'</default>
        <docblock line="75">
          <description>absolute!</description>
          <long-description/>
          <tag line="75" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="97" package="Amfphp\Backoffice\Generators">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="92">
          <description>constructor</description>
          <long-description/>
          <tag line="92" name="param" description="" type="array" variable="$codeFileExtensions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="92" name="param" description="" type="\type" variable="$templateFolderUrl">
            <type by_reference="false">\type</type>
          </tag>
        </docblock>
        <argument line="97">
          <name>$codeFileExtensions</name>
          <default/>
          <type>array</type>
        </argument>
        <argument line="97">
          <name>$templateFolderUrl</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="106" package="Amfphp\Backoffice\Generators">
        <name>getUiCallText</name>
        <full_name>getUiCallText</full_name>
        <docblock line="102">
          <description>override to provide a custom text in the Client Generator UI button for this generator.</description>
          <long-description/>
          <tag line="102" name="return" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="114" package="Amfphp\Backoffice\Generators">
        <name>getInfoUrl</name>
        <full_name>getInfoUrl</full_name>
        <docblock line="110">
          <description>override to provide a custom url for a page containing info for this generator.</description>
          <long-description/>
          <tag line="110" name="return" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="124" package="Amfphp\Backoffice\Generators">
        <name>getTestUrlSuffix</name>
        <full_name>getTestUrlSuffix</full_name>
        <docblock line="118">
          <description>added to the url of the generated code to go to its test page directly fro, the client generator ui
for example: 'testhtml'/index.html'
return false if none, for example if the generated client must be compiled first</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="135" package="Amfphp\Backoffice\Generators">
        <name>generate</name>
        <full_name>generate</full_name>
        <docblock line="128">
          <description>generate project based on template</description>
          <long-description/>
          <tag line="128" name="param" description=". note: here '/' in each service name is replaced by '__', to avoid dealing with packages" type="array" variable="$services">
            <type by_reference="false">array</type>
          </tag>
          <tag line="128" name="param" description="" type="string" variable="$amfphpEntryPointUrl">
            <type by_reference="false">string</type>
          </tag>
          <tag line="128" name="param" description="absolute url to folder where to put the generated code" type="String" variable="$targetFolder">
            <type by_reference="false">String</type>
          </tag>
          <tag line="128" name="return" description="" type="null">
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="135">
          <name>$services</name>
          <default/>
          <type/>
        </argument>
        <argument line="135">
          <name>$amfphpEntryPointUrl</name>
          <default/>
          <type/>
        </argument>
        <argument line="135">
          <name>$targetFolder</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="159" package="Amfphp\Backoffice\Generators">
        <name>searchForBlocksAndApplyProcessing</name>
        <full_name>searchForBlocksAndApplyProcessing</full_name>
        <docblock line="151">
          <description>looks for blocks delimited by the start and stop markers matching the directive, and applies a processing function to each
found block.</description>
          <long-description/>
          <tag line="151" name="param" description="the template code. Is modified continually" type="String" variable="$code">
            <type by_reference="false">String</type>
          </tag>
          <tag line="151" name="param" description="for example 'SERVICE'" type="String" variable="$directive">
            <type by_reference="false">String</type>
          </tag>
          <tag line="151" name="param" description="functionName" type="String" variable="$functionName">
            <type by_reference="false">String</type>
          </tag>
          <tag line="151" name="return" description="if there was a change, returns the modified code, else returns false" type="\mixed.">
            <type by_reference="false">\mixed.</type>
          </tag>
        </docblock>
        <argument line="159">
          <name>$code</name>
          <default/>
          <type/>
        </argument>
        <argument line="159">
          <name>$directive</name>
          <default/>
          <type/>
        </argument>
        <argument line="159">
          <name>$functionName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="214" package="Amfphp\Backoffice\Generators">
        <name>processSourceFile</name>
        <full_name>processSourceFile</full_name>
        <docblock line="207">
          <description>load the code, and look if either file is a service block, or il it contains service blocks.</description>
          <long-description>&lt;p&gt;If the file is a service block(detected by having '&lt;em&gt;SERVICE&lt;/em&gt;' in the file name), call generateServiceFiles
If not, look for block delimited by the 'SERVICE' directive and call processServiceListBlock on them
Also sets the amfphp entry point url&lt;/p&gt;</long-description>
          <tag line="207" name="param" description="" type="\SplFileInfo" variable="$file">
            <type by_reference="false">\SplFileInfo</type>
          </tag>
        </docblock>
        <argument line="214">
          <name>$file</name>
          <default/>
          <type>\SplFileInfo</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="238" package="Amfphp\Backoffice\Generators">
        <name>generateServiceFiles</name>
        <full_name>generateServiceFiles</full_name>
        <docblock line="232">
          <description>generate as many copies as there are services and
treat it as a service block.</description>
          <long-description/>
          <tag line="232" name="param" description="" type="String" variable="$code">
            <type by_reference="false">String</type>
          </tag>
          <tag line="232" name="param" description="" type="\SplFileInfo" variable="$file">
            <type by_reference="false">\SplFileInfo</type>
          </tag>
        </docblock>
        <argument line="238">
          <name>$code</name>
          <default/>
          <type/>
        </argument>
        <argument line="238">
          <name>$file</name>
          <default/>
          <type>\SplFileInfo</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="254" package="Amfphp\Backoffice\Generators">
        <name>generateOneServiceFileCode</name>
        <full_name>generateOneServiceFileCode</full_name>
        <docblock line="249">
          <description>generates code for one Service File.</description>
          <long-description/>
          <tag line="249" name="param" description="" type="String" variable="$code">
            <type by_reference="false">String</type>
          </tag>
          <tag line="249" name="return" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="254">
          <name>$code</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="269" package="Amfphp\Backoffice\Generators">
        <name>processServiceListBlock</name>
        <full_name>processServiceListBlock</full_name>
        <docblock line="263">
          <description>finds method blocks.</description>
          <long-description>&lt;p&gt;applies processMethodListBlock to each of them
then multiplies and adapts the resulting code for each service&lt;/p&gt;</long-description>
          <tag line="263" name="param" description="" type="\type" variable="$code">
            <type by_reference="false">\type</type>
          </tag>
        </docblock>
        <argument line="269">
          <name>$code</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="292" package="Amfphp\Backoffice\Generators">
        <name>processMethodListBlock</name>
        <full_name>processMethodListBlock</full_name>
        <docblock line="286">
          <description>finds parameter blocks.</description>
          <long-description>&lt;p&gt;applies processParameterListBlock to each of them
then multiplies and adapts the resulting code for each method&lt;/p&gt;</long-description>
          <tag line="286" name="param" description="" type="\type" variable="$code">
            <type by_reference="false">\type</type>
          </tag>
        </docblock>
        <argument line="292">
          <name>$code</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="315" package="Amfphp\Backoffice\Generators">
        <name>processParameterListBlock</name>
        <full_name>processParameterListBlock</full_name>
        <docblock line="311">
          <description>multiplies and adapts the code for each parameter</description>
          <long-description/>
          <tag line="311" name="param" description="" type="\type" variable="$code">
            <type by_reference="false">\type</type>
          </tag>
        </docblock>
        <argument line="315">
          <name>$code</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="328" package="Amfphp\Backoffice\Generators">
        <name>processParameterCommaListBlock</name>
        <full_name>processParameterCommaListBlock</full_name>
        <docblock line="324">
          <description>multiplies and adapts the code for each parameter, but adds a comma between each</description>
          <long-description/>
          <tag line="324" name="param" description="" type="\type" variable="$code">
            <type by_reference="false">\type</type>
          </tag>
        </docblock>
        <argument line="328">
          <name>$code</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="BackOffice\ClientGenerator\Util.php" hash="fe0b170a1f19b0eae0f9229ce3b73217" package="Amfphp\\BackOffice\ClientGenerator">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp__BackOffice_ClientGenerator"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="20" package="Amfphp\\BackOffice\ClientGenerator">
      <extends/>
      <name>Amfphp_BackOffice_ClientGenerator_Util</name>
      <full_name>\Amfphp_BackOffice_ClientGenerator_Util</full_name>
      <docblock line="14">
        <description>common utilities for generators</description>
        <long-description/>
        <tag line="14" name="author" description="Ariel Sommeria-klein"/>
        <tag line="14" name="package" description="Amfphp__BackOffice_ClientGenerator"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="27" package="Amfphp\\BackOffice\ClientGenerator">
        <name>recurseCopy</name>
        <full_name>recurseCopy</full_name>
        <docblock line="22">
          <description>recursively copies one folder to another.</description>
          <long-description/>
          <tag line="22" name="param" description="" type="string" variable="$src">
            <type by_reference="false">string</type>
          </tag>
          <tag line="22" name="param" description="must not exist yet" type="string" variable="$dst">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$src</name>
          <default/>
          <type/>
        </argument>
        <argument line="27">
          <name>$dst</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="48" package="Amfphp\\BackOffice\ClientGenerator">
        <name>zipFolder</name>
        <full_name>zipFolder</full_name>
        <docblock line="42">
          <description>zip folder</description>
          <long-description/>
          <tag line="42" name="param" description="" type="\type" variable="$sourcefolder">
            <type by_reference="false">\type</type>
          </tag>
          <tag line="42" name="param" description="" type="\type" variable="$zipfilename">
            <type by_reference="false">\type</type>
          </tag>
          <tag line="42" name="param" description="use to reduce paths inside zip" type="\type" variable="$removeFromLocalName">
            <type by_reference="false">\type</type>
          </tag>
        </docblock>
        <argument line="48">
          <name>$sourcefolder</name>
          <default/>
          <type/>
        </argument>
        <argument line="48">
          <name>$zipfilename</name>
          <default/>
          <type/>
        </argument>
        <argument line="48">
          <name>$removeFromLocalName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="91" package="Amfphp\\BackOffice\ClientGenerator">
        <name>recursive_remove_directory</name>
        <full_name>recursive_remove_directory</full_name>
        <docblock line="85">
          <description>unused for now.</description>
          <long-description/>
          <tag line="85" name="param" description="" type="string" variable="$directory">
            <type by_reference="false">string</type>
          </tag>
          <tag line="85" name="param" description="" type="boolean" variable="$empty">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="85" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="91">
          <name>$directory</name>
          <default/>
          <type/>
        </argument>
        <argument line="91">
          <name>$empty</name>
          <default>FALSE</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="BackOffice\ClientGenerator.php" hash="c34a476637ed04cbe6ae9bfca9ffcf1e" package="Amfphp\BackOffice\ClientGenerator">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_BackOffice_ClientGenerator"/>
    </docblock>
    <include line="14" type="Require Once" package="Default">
      <name/>
      <docblock line="11">
        <description>includes</description>
        <long-description/>
      </docblock>
    </include>
    <include line="15" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="21" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="25" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="39" type="Require Once" package="Default">
      <name/>
    </include>
  </file>
  <file path="BackOffice\Config.php" hash="75bd8d1297cb8b42a8e046567c0af18a" package="Amfphp\BackOffice">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_BackOffice"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="19" package="Amfphp\BackOffice">
      <extends/>
      <name>Amfphp_BackOffice_Config</name>
      <full_name>\Amfphp_BackOffice_Config</full_name>
      <docblock line="13">
        <description>config for the backoffice</description>
        <long-description/>
        <tag line="13" name="package" description="Amfphp_BackOffice"/>
        <tag line="13" name="author" description="Ariel Sommeria-Klein"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30" namespace="global" package="Default">
        <name>$amfphpEntryPointPath</name>
        <default>'../Examples/Php/index.php'</default>
        <docblock line="21">
          <description>path to amfPHP.</description>
          <long-description>&lt;p&gt;relative or absolute. If relative, be careful, it's relative to the script, not this file.
'http://silexlabs.org/Tests/TestData/';
some entry points that pertain to the code:
'../Amfphp/index.php'
'../Examples/Php/index.php'
'../Tests/TestData/index.php'&lt;/p&gt;</long-description>
          <tag line="21" name="var" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="39" namespace="global" package="Default">
        <name>$backOfficeCredentials</name>
        <default/>
        <docblock line="32">
          <description>set credentials for back office here.</description>
          <long-description>&lt;p&gt;expected format: username =&gt; password
See constructor for example code.&lt;/p&gt;</long-description>
          <tag line="32" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="46" namespace="global" package="Default">
        <name>$requireSignIn</name>
        <default>true</default>
        <docblock line="41">
          <description>set to false for private server.</description>
          <long-description>&lt;p&gt;Set to true for public server.
true by default&lt;/p&gt;</long-description>
          <tag line="41" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="51" package="Amfphp\BackOffice">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="48">
          <description>constructor</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="61" package="Amfphp\BackOffice">
        <name>resolveAmfphpEntryPointUrl</name>
        <full_name>resolveAmfphpEntryPointUrl</full_name>
        <docblock line="57">
          <description>determine url to amfphp.</description>
          <long-description>&lt;p&gt;If in config it contains 'http', we consider it's absolute. Otherwise it's relative, and we build it.&lt;/p&gt;</long-description>
          <tag line="57" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="BackOffice\HtmlHeader.inc.php" hash="23520d985bbeee7cb5f70cb3e3b0dad8" package="Amfphp\Backoffice">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;

&lt;p&gt;common header&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Backoffice"/>
    </docblock>
  </file>
  <file path="BackOffice\IncludeServiceCaller.php" hash="f3c446a443169b4be80d9bbaeba37f13" package="Amfphp\Backoffice">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Backoffice"/>
    </docblock>
    <include line="52" type="Require" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="21" package="Amfphp\Backoffice">
      <extends/>
      <name>Amfphp_BackOffice_IncludeServiceCaller</name>
      <full_name>\Amfphp_BackOffice_IncludeServiceCaller</full_name>
      <docblock line="14">
        <description>Makes a call to the amfphp entry point and returns the data</description>
        <long-description/>
        <tag line="14" name="author" description="Ariel Sommeria-klein"/>
        <tag line="14" name="package" description="Amfphp_Backoffice"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="27" namespace="global" package="Default">
        <name>$amfphpEntryPointPath</name>
        <default/>
        <docblock line="23">
          <description>path to amfphp entry point</description>
          <long-description/>
          <tag line="23" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="33" package="Amfphp\Backoffice">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="29">
          <description>constructor</description>
          <long-description/>
          <tag line="29" name="param" description="" type="string" variable="$amfphpEntryPointPath">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="33">
          <name>$amfphpEntryPointPath</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="44" package="Amfphp\Backoffice">
        <name>call</name>
        <full_name>call</full_name>
        <docblock line="37">
          <description>makes a request to the amfphp server</description>
          <long-description/>
          <tag line="37" name="param" description="" type="string" variable="$serviceName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="37" name="param" description="" type="string" variable="$methodName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="37" name="param" description="" type="string" variable="$parameters">
            <type by_reference="false">string</type>
          </tag>
          <tag line="37" name="return" description="whtever the service method returns. If it's an exception it's thrown again." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$serviceName</name>
          <default/>
          <type/>
        </argument>
        <argument line="44">
          <name>$methodName</name>
          <default/>
          <type/>
        </argument>
        <argument line="44">
          <name>$parameters</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="BackOffice\index.php" hash="fb0bd38b322b2185a96eff0f27193585" package="Amfphp\BackOffice">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_BackOffice"/>
    </docblock>
    <include line="19" type="Require Once" package="Default">
      <name/>
      <docblock line="16">
        <description>includes</description>
        <long-description/>
      </docblock>
    </include>
    <include line="20" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="25" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="27" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="41" type="Require Once" package="Default">
      <name/>
    </include>
  </file>
  <file path="BackOffice\JsonServiceCaller.php" hash="d4e3fb7f58f9aabe7dbecfd9f988c955" package="Amfphp\Backoffice">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Backoffice"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="21" package="Amfphp\Backoffice">
      <extends/>
      <name>Amfphp_BackOffice_JsonServiceCaller</name>
      <full_name>\Amfphp_BackOffice_JsonServiceCaller</full_name>
      <docblock line="14">
        <description>Makes a call to the amfphp entry point and returns the data.</description>
        <long-description>&lt;p&gt;unused at the moment, but useful later hopefully&lt;/p&gt;</long-description>
        <tag line="14" name="author" description="Ariel Sommeria-klein"/>
        <tag line="14" name="package" description="Amfphp_Backoffice"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="27" namespace="global" package="Default">
        <name>$amfphpEntryPointUrl</name>
        <default/>
        <docblock line="23">
          <description>path to amfphp entry point</description>
          <long-description/>
          <tag line="23" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="33" package="Amfphp\Backoffice">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="29">
          <description>constructor</description>
          <long-description/>
          <tag line="29" name="param" description="" type="string" variable="$amfphpEntryPointUrl">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="33">
          <name>$amfphpEntryPointUrl</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="44" package="Amfphp\Backoffice">
        <name>call</name>
        <full_name>call</full_name>
        <docblock line="37">
          <description>makes a request to the amfphp server</description>
          <long-description/>
          <tag line="37" name="param" description="" type="string" variable="$serviceName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="37" name="param" description="" type="string" variable="$methodName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="37" name="param" description="" type="string" variable="$parameters">
            <type by_reference="false">string</type>
          </tag>
          <tag line="37" name="return" description="array or object, json decoded" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$serviceName</name>
          <default/>
          <type/>
        </argument>
        <argument line="44">
          <name>$methodName</name>
          <default/>
          <type/>
        </argument>
        <argument line="44">
          <name>$parameters</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="BackOffice\LinkBar.inc.php" hash="210591bc2cee538954718a694da34cb0" package="Amfphp\Backoffice">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;top link bar&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Backoffice"/>
    </docblock>
  </file>
  <file path="BackOffice\MainMenu.inc.php" hash="5bd2abc1abab67597d5b8c7be51fad18" package="Amfphp\Backoffice">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;

&lt;p&gt;main menu&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Backoffice"/>
    </docblock>
  </file>
  <file path="BackOffice\ServiceBrowser.php" hash="6d8f0e5ea38ed413ff334ed269386cd3" package="Amfphp\BackOffice">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_BackOffice"/>
    </docblock>
    <include line="14" type="Require Once" package="Default">
      <name/>
      <docblock line="11">
        <description>includes</description>
        <long-description/>
      </docblock>
    </include>
    <include line="15" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="21" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="25" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="39" type="Require Once" package="Default">
      <name/>
    </include>
    <function namespace="global" line="49" package="Amfphp\BackOffice">
      <name>objToTreeData</name>
      <full_name>\objToTreeData</full_name>
      <docblock line="41">
        <description>create tree data string for the representation of a result object.</description>
        <long-description>&lt;p&gt;A bit like a var dump but for displaying with jstree
recursive.&lt;/p&gt;</long-description>
        <tag line="41" name="todo" description="reunderstand and comment this objname thing..."/>
        <tag line="41" name="param" description="" type="mixed" variable="$obj">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="41" name="param" description="" type="string" variable="$objName">
          <type by_reference="false">string</type>
        </tag>
        <tag line="41" name="return" description="" type="mixed">
          <type by_reference="false">mixed</type>
        </tag>
      </docblock>
      <argument line="49">
        <name>$obj</name>
        <default/>
        <type/>
      </argument>
      <argument line="49">
        <name>$objName</name>
        <default/>
        <type/>
      </argument>
    </function>
  </file>
  <file path="BackOffice\SignIn.php" hash="4c02db690918478706d6372d4ae792a2" package="Amfphp\Backoffice">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Backoffice"/>
    </docblock>
    <include line="21" type="Require Once" package="Default">
      <name/>
      <docblock line="18">
        <description>includes</description>
        <long-description/>
      </docblock>
    </include>
    <include line="22" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="61" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="72" type="Require Once" package="Default">
      <name/>
    </include>
  </file>
  <file path="BackOffice\SignOut.php" hash="3b08089dfc8a87b619c7aed8a95fb71b" package="Amfphp\Backoffice">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Backoffice"/>
    </docblock>
    <include line="23" type="Require Once" package="Default">
      <name/>
      <docblock line="20">
        <description>includes</description>
        <long-description/>
      </docblock>
    </include>
  </file>
  <file path="Examples\Php\ExampleServices\AuthenticationService.php" hash="429fb30c592ebf1e041580ce1ca182f6" package="Amfphp\Examples\Authentication">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Examples_Authentication"/>
    </docblock>
    <include line="15" type="Require Once" package="Default">
      <name/>
      <docblock line="12">
        <description>includes</description>
        <long-description/>
      </docblock>
    </include>
    <include line="16" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="24" package="Amfphp\Examples\Authentication">
      <extends/>
      <name>AuthenticationService</name>
      <full_name>\AuthenticationService</full_name>
      <docblock line="18">
        <description>Authentication and user administration service</description>
        <long-description/>
        <tag line="18" name="package" description="Amfphp_Examples_Authentication"/>
        <tag line="18" name="author" description="Sven Dens"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="30" namespace="global" package="Default">
        <name>$protectedMethods</name>
        <default>array()</default>
        <docblock line="26">
          <description>protected methods</description>
          <long-description/>
          <tag line="26" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="36" package="Amfphp\Examples\Authentication">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="32">
          <description>constructor</description>
          <long-description/>
          <tag line="32" name="throws" description="" type="\Exception">
            <type by_reference="false">\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="48" package="Amfphp\Examples\Authentication">
        <name>signIn</name>
        <full_name>signIn</full_name>
        <docblock line="42">
          <description>sign in</description>
          <long-description/>
          <tag line="42" name="param" description="" type="string" variable="$username">
            <type by_reference="false">string</type>
          </tag>
          <tag line="42" name="param" description="" type="string" variable="$password">
            <type by_reference="false">string</type>
          </tag>
          <tag line="42" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="48">
          <name>$username</name>
          <default/>
          <type/>
        </argument>
        <argument line="48">
          <name>$password</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="78" package="Amfphp\Examples\Authentication">
        <name>signOut</name>
        <full_name>signOut</full_name>
        <docblock line="75">
          <description>sign out function</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="88" package="Amfphp\Examples\Authentication">
        <name>_getMethodRoles</name>
        <full_name>_getMethodRoles</full_name>
        <docblock line="82">
          <description>function the authentication plugin uses to get accepted roles for each function
Here login and logout are not protected, however</description>
          <long-description/>
          <tag line="82" name="param" description="" type="String" variable="$methodName">
            <type by_reference="false">String</type>
          </tag>
          <tag line="82" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="88">
          <name>$methodName</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Examples\Php\ExampleServices\PizzaService.php" hash="14140ee8f0530f14ae04bdb68c82f288" package="Amfphp\Examples\ExampleService">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Examples_ExampleService"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="17" package="Amfphp\Examples\ExampleService">
      <extends/>
      <name>PizzaService</name>
      <full_name>\PizzaService</full_name>
      <docblock line="12">
        <description>an example service for the pizza examples</description>
        <long-description/>
        <tag line="12" name="package" description="Amfphp_Examples_ExampleService"/>
        <tag line="12" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="22" package="Amfphp\Examples\ExampleService">
        <name>getPizza</name>
        <full_name>getPizza</full_name>
        <docblock line="18">
          <description>get a pizza!</description>
          <long-description/>
          <tag line="18" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Examples\Php\ExampleServices\UserService.php" hash="d7e2e5c7d723c55b7f2cc4b09cea9f49" package="Amfphp\Examples\Authentication">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Examples_Authentication"/>
    </docblock>
    <include line="15" type="Require Once" package="Default">
      <name/>
      <docblock line="12">
        <description>includes</description>
        <long-description/>
      </docblock>
    </include>
    <include line="16" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="24" package="Amfphp\Examples\Authentication">
      <extends/>
      <name>UserService</name>
      <full_name>\UserService</full_name>
      <docblock line="18">
        <description>Authentication and user administration service</description>
        <long-description/>
        <tag line="18" name="package" description="Amfphp_Examples_Authentication"/>
        <tag line="18" name="author" description="Sven Dens"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="30" namespace="global" package="Default">
        <name>$adminOnlyMethods</name>
        <default>array("createUser", "deleteUser")</default>
        <docblock line="26">
          <description>admin only methods</description>
          <long-description/>
          <tag line="26" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="36" namespace="global" package="Default">
        <name>$protectedMethods</name>
        <default>array("updateUser", "getUsers")</default>
        <docblock line="32">
          <description>protected methods</description>
          <long-description/>
          <tag line="32" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="42" package="Amfphp\Examples\Authentication">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="38">
          <description>constructor</description>
          <long-description/>
          <tag line="38" name="throws" description="" type="\Exception">
            <type by_reference="false">\Exception</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="54" package="Amfphp\Examples\Authentication">
        <name>_getMethodRoles</name>
        <full_name>_getMethodRoles</full_name>
        <docblock line="48">
          <description>function the authentication plugin uses to get accepted roles for each function
Here login and logout are not protected, however</description>
          <long-description/>
          <tag line="48" name="param" description="" type="\&lt;String&gt;" variable="$methodName">
            <type by_reference="false">\&lt;String&gt;</type>
          </tag>
          <tag line="48" name="return" description="" type="\&lt;array&gt;">
            <type by_reference="false">\&lt;array&gt;</type>
          </tag>
        </docblock>
        <argument line="54">
          <name>$methodName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="75" package="Amfphp\Examples\Authentication">
        <name>createUser</name>
        <full_name>createUser</full_name>
        <docblock line="64">
          <description>function to create a new user to authenticate with AMFPHP</description>
          <long-description/>
          <tag line="64" name="param" description="" type="string" variable="$firstName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="param" description="" type="string" variable="$lastName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="param" description="" type="string" variable="$userName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="param" description="" type="string" variable="$password">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="param" description="" type="int" variable="$userRoleId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="64" name="return" description="" type="\stdClass">
            <type by_reference="false">\stdClass</type>
          </tag>
          <tag line="64" name="throws" description="" type="\Exception">
            <type by_reference="false">\Exception</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$firstName</name>
          <default/>
          <type/>
        </argument>
        <argument line="75">
          <name>$lastName</name>
          <default/>
          <type/>
        </argument>
        <argument line="75">
          <name>$userName</name>
          <default/>
          <type/>
        </argument>
        <argument line="75">
          <name>$password</name>
          <default/>
          <type/>
        </argument>
        <argument line="75">
          <name>$userRoleId</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="109" package="Amfphp\Examples\Authentication">
        <name>updateUser</name>
        <full_name>updateUser</full_name>
        <docblock line="98">
          <description>function to update an existing AMFPHP authentication user</description>
          <long-description/>
          <tag line="98" name="param" description="" type="string" variable="$firstName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="98" name="param" description="" type="string" variable="$lastName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="98" name="param" description="" type="string" variable="$userName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="98" name="param" description="" type="string" variable="$password">
            <type by_reference="false">string</type>
          </tag>
          <tag line="98" name="param" description="" type="int" variable="$userRoleId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="98" name="param" description="" type="int" variable="$id">
            <type by_reference="false">int</type>
          </tag>
          <tag line="98" name="return" description="" type="\type">
            <type by_reference="false">\type</type>
          </tag>
          <tag line="98" name="throws" description="" type="\Exception">
            <type by_reference="false">\Exception</type>
          </tag>
        </docblock>
        <argument line="109">
          <name>$firstName</name>
          <default/>
          <type/>
        </argument>
        <argument line="109">
          <name>$lastName</name>
          <default/>
          <type/>
        </argument>
        <argument line="109">
          <name>$userName</name>
          <default/>
          <type/>
        </argument>
        <argument line="109">
          <name>$password</name>
          <default/>
          <type/>
        </argument>
        <argument line="109">
          <name>$userRoleId</name>
          <default/>
          <type/>
        </argument>
        <argument line="109">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="137" package="Amfphp\Examples\Authentication">
        <name>deleteUser</name>
        <full_name>deleteUser</full_name>
        <docblock line="132">
          <description>function to delete an AMFPHP authentication user</description>
          <long-description/>
          <tag line="132" name="param" description="" type="int" variable="$id">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="137">
          <name>$id</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="156" package="Amfphp\Examples\Authentication">
        <name>getUsers</name>
        <full_name>getUsers</full_name>
        <docblock line="152">
          <description>get users</description>
          <long-description/>
          <tag line="152" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Examples\Php\ExampleServices\Vo\UserVo1.php" hash="8ad8836c8469a5dcd190b659f05d2968" package="Amfphp\Examples\ExampleService">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Examples_ExampleService"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="18" package="Amfphp\Examples\ExampleService">
      <extends/>
      <name>UserVo1</name>
      <full_name>\UserVo1</full_name>
      <docblock line="13">
        <description>an example service for the pizza examples</description>
        <long-description/>
        <tag line="13" name="package" description="Amfphp_Examples_ExampleService"/>
        <tag line="13" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="23" namespace="global" package="Default">
        <name>$name</name>
        <default/>
        <docblock line="19">
          <description>name</description>
          <long-description/>
          <tag line="19" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="29" namespace="global" package="Default">
        <name>$age</name>
        <default/>
        <docblock line="25">
          <description>age</description>
          <long-description/>
          <tag line="25" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="35" namespace="global" package="Default">
        <name>$status</name>
        <default/>
        <docblock line="31">
          <description>status</description>
          <long-description/>
          <tag line="31" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="Examples\Php\ExampleServices\VoService.php" hash="be4e0796064054d10f9b704b6dbbb30d" package="Amfphp\Examples\ExampleService">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Examples_ExampleService"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="17" package="Amfphp\Examples\ExampleService">
      <extends/>
      <name>VoService</name>
      <full_name>\VoService</full_name>
      <docblock line="12">
        <description>an example service for typed objects</description>
        <long-description/>
        <tag line="12" name="package" description="Amfphp_Examples_ExampleService"/>
        <tag line="12" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="25" package="Amfphp\Examples\ExampleService">
        <name>receiveAndReturnUserVo1</name>
        <full_name>receiveAndReturnUserVo1</full_name>
        <docblock line="19">
          <description>This method expects a UserVo1 object.</description>
          <long-description>&lt;p&gt;So amfPHP must receive a typed UserVo1 object, and the CustomClassConverter plugin
must find the UserVo1 class in its value object folders&lt;/p&gt;</long-description>
          <tag line="19" name="param" description="" type="\UserVo1" variable="$user">
            <type by_reference="false">\UserVo1</type>
          </tag>
          <tag line="19" name="return" description="" type="\UserVo1">
            <type by_reference="false">\UserVo1</type>
          </tag>
        </docblock>
        <argument line="25">
          <name>$user</name>
          <default/>
          <type>\UserVo1</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="40" package="Amfphp\Examples\ExampleService">
        <name>receiveAndReturnUserVo2</name>
        <full_name>receiveAndReturnUserVo2</full_name>
        <docblock line="30">
          <description>This method accepts any object.</description>
          <long-description>&lt;p&gt;The idea here is that you send an object that is typed(see client example prjects)
and it will be returned. This allows you to use typing on the client side without needing to create
corresponding PHP VO classes. If you do this exclusively, you can disable the CustomClassConverter plugin,
which will increase performance.
amfPHP does this by using the reserved '_explicitType' marker on anonymous PHP objects.&lt;/p&gt;</long-description>
          <tag line="30" name="param" description="" type="\type" variable="$user">
            <type by_reference="false">\type</type>
          </tag>
          <tag line="30" name="return" description="" type="\type">
            <type by_reference="false">\type</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$user</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Examples\Php\Includes\constants.php" hash="51d008b0bbbc7f902daa88a9e8073085" package="Amfphp\Examples\Authentication">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Examples_Authentication"/>
    </docblock>
    <constant namespace="global" line="18" package="Amfphp\Examples\Authentication">
      <name>USER_ROLE_ADMIN</name>
      <full_name>\USER_ROLE_ADMIN</full_name>
      <value>'admin'</value>
    </constant>
    <constant namespace="global" line="19" package="Amfphp\Examples\Authentication">
      <name>USER_ROLE_MANAGER</name>
      <full_name>\USER_ROLE_MANAGER</full_name>
      <value>'manager'</value>
    </constant>
    <constant namespace="global" line="20" package="Amfphp\Examples\Authentication">
      <name>USER_ROLE_EDITOR</name>
      <full_name>\USER_ROLE_EDITOR</full_name>
      <value>'editor'</value>
    </constant>
    <constant namespace="global" line="21" package="Amfphp\Examples\Authentication">
      <name>USER_ROLE_READER</name>
      <full_name>\USER_ROLE_READER</full_name>
      <value>'reader'</value>
    </constant>
    <constant namespace="global" line="24" package="Amfphp\Examples\Authentication">
      <name>MYSQL_USER</name>
      <full_name>\MYSQL_USER</full_name>
      <value>'root'</value>
    </constant>
    <constant namespace="global" line="25" package="Amfphp\Examples\Authentication">
      <name>MYSQL_PASS</name>
      <full_name>\MYSQL_PASS</full_name>
      <value>''</value>
    </constant>
    <constant namespace="global" line="26" package="Amfphp\Examples\Authentication">
      <name>MYSQL_DB</name>
      <full_name>\MYSQL_DB</full_name>
      <value>'amfphpexample'</value>
    </constant>
    <constant namespace="global" line="27" package="Amfphp\Examples\Authentication">
      <name>MYSQL_HOST</name>
      <full_name>\MYSQL_HOST</full_name>
      <value>'localhost'</value>
    </constant>
    <constant namespace="global" line="28" package="Amfphp\Examples\Authentication">
      <name>MYSQL_PORT</name>
      <full_name>\MYSQL_PORT</full_name>
      <value>'3306'</value>
    </constant>
  </file>
  <file path="Examples\Php\Includes\MySQLUtil.php" hash="7b4ea4cc4c8f08ad7c33925e738e0ae5" package="Amfphp\Examples\Authentication">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Examples_Authentication"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="17" package="Amfphp\Examples\Authentication">
      <extends/>
      <name>MySQLUtil</name>
      <full_name>\MySQLUtil</full_name>
      <docblock line="12">
        <description>MySql Util</description>
        <long-description/>
        <tag line="12" name="package" description="Amfphp_Examples_Authentication"/>
        <tag line="12" name="author" description="Sven Dens"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="22" package="Amfphp\Examples\Authentication">
        <name>getConnection</name>
        <full_name>getConnection</full_name>
        <docblock line="18">
          <description>get connection</description>
          <long-description/>
          <tag line="18" name="return" description="" type="\PDO">
            <type by_reference="false">\PDO</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="35" package="Amfphp\Examples\Authentication">
        <name>transactionsAvailable</name>
        <full_name>transactionsAvailable</full_name>
        <docblock line="31">
          <description>transactions available</description>
          <long-description/>
          <tag line="31" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="63" package="Amfphp\Examples\Authentication">
      <extends/>
      <name>DBUtils</name>
      <full_name>\DBUtils</full_name>
      <docblock line="58">
        <description>Db Util</description>
        <long-description/>
        <tag line="58" name="package" description="Amfphp_Examples_Authentication"/>
        <tag line="58" name="author" description="Sven Dens"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="68" package="Amfphp\Examples\Authentication">
        <name>pdoAvailable</name>
        <full_name>pdoAvailable</full_name>
        <docblock line="64">
          <description>pdo available?</description>
          <long-description/>
          <tag line="64" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="80" package="Amfphp\Examples\Authentication">
        <name>hashPassword</name>
        <full_name>hashPassword</full_name>
        <docblock line="75">
          <description>quick hash, with a simple method to work without a salt.</description>
          <long-description>&lt;p&gt;A salt is preferred of course, but this keeps things simple&lt;/p&gt;</long-description>
          <tag line="75" name="param" description="" type="string" variable="$password">
            <type by_reference="false">string</type>
          </tag>
          <tag line="75" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="80">
          <name>$password</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Examples\Php\index.php" hash="4c5b8fea09ce408b80baee37c8b80d5a" package="Amfphp\Examples">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Examples"/>
    </docblock>
    <include line="16" type="Require Once" package="Default">
      <name/>
      <docblock line="12">
        <description>a gateway php script like the normal gateway except that it uses example services</description>
        <long-description/>
        <tag line="12" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
    </include>
  </file>
  <file path="Examples\Php\TestPlugin\TestPlugin.php" hash="978e5fa6d38703a9c7ad5c6a7348d33c" package="Amfphp\Examples">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Examples"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="18" package="Amfphp\Examples">
      <extends/>
      <name>TestPlugin</name>
      <full_name>\TestPlugin</full_name>
      <docblock line="13">
        <description>an example plugin as in the documentation.</description>
        <long-description>&lt;p&gt;It takes a sourceUrl param in the configuration, and changes the deserialized request to 'bla'. Useless, but explanatory.&lt;/p&gt;</long-description>
        <tag line="13" name="author" description="Ariel Sommeria-klein"/>
        <tag line="13" name="package" description="Amfphp_Examples"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="24" namespace="global" package="Default">
        <name>$sourceUrl</name>
        <default/>
        <docblock line="20">
          <description>dummy parameter</description>
          <long-description/>
          <tag line="20" name="var" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="30" package="Amfphp\Examples">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="26">
          <description>constructor.</description>
          <long-description/>
          <tag line="26" name="param" description="optional key/value pairs in an associative array. Used to override default configuration values." type="array" variable="$config">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$config</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="48" package="Amfphp\Examples">
        <name>filterDeserializedRequest</name>
        <full_name>filterDeserializedRequest</full_name>
        <docblock line="43">
          <description>sets deserialized request to “bla”</description>
          <long-description/>
          <tag line="43" name="param" description="" type="mixed" variable="$deserializedRequest">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="43" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="48">
          <name>$deserializedRequest</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Tests\Amfphp\Core\Amf\Amf3DeserializationTest.php" hash="a9ecbcf0330607a02edd97802da32020" package="Tests\Amfphp\Core\Amf">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Tests_Amfphp_Core_Amf"/>
    </docblock>
    <include line="15" type="Require Once" package="Default">
      <name/>
      <docblock line="12">
        <description>includes</description>
        <long-description/>
      </docblock>
    </include>
    <include line="16" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="17" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="25" package="Tests\Amfphp\Core\Amf">
      <extends>\PHPUnit_Framework_TestCase</extends>
      <name>Amf3DeserializationTest</name>
      <full_name>\Amf3DeserializationTest</full_name>
      <docblock line="18">
        <description>Unit tests for Amfphp_Core_Amf_Serializer, but using amf3
note: phpunit dataProvider mechanism doesn't work well, so lots of boiler plate code here.</description>
        <long-description>&lt;p&gt;Oh well... A.S.&lt;/p&gt;</long-description>
        <tag line="18" name="package" description="Tests_Amfphp_Core_Amf"/>
        <tag line="18" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="29" package="Tests\Amfphp\Core\Amf">
        <name>testBasicMethods</name>
        <full_name>testBasicMethods</full_name>
        <docblock line="26">
          <description>test basic methods</description>
          <long-description/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Tests\Amfphp\Core\Amf\Amf3SerializationTest.php" hash="05fa981db3addd300e27a53e94929723" package="Tests\Amfphp\Core\Amf">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Tests_Amfphp_Core_Amf"/>
    </docblock>
    <include line="15" type="Require Once" package="Default">
      <name/>
      <docblock line="12">
        <description>includes</description>
        <long-description/>
      </docblock>
    </include>
    <include line="16" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="17" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="26" package="Tests\Amfphp\Core\Amf">
      <extends>\PHPUnit_Framework_TestCase</extends>
      <name>Amf3SerializationTest</name>
      <full_name>\Amf3SerializationTest</full_name>
      <docblock line="19">
        <description>Unit tests for Amfphp_Core_Amf_Serializer, but using amf3
note: phpunit dataProvider mechanism doesn't work well, so lots of boiler plate code here.</description>
        <long-description>&lt;p&gt;Oh well... A.S.&lt;/p&gt;</long-description>
        <tag line="19" name="package" description="Tests_Amfphp_Core_Amf"/>
        <tag line="19" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="31" package="Tests\Amfphp\Core\Amf">
        <name>testBasicMethods</name>
        <full_name>testBasicMethods</full_name>
        <docblock line="28">
          <description>test basic methods</description>
          <long-description/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Tests\Amfphp\Core\Amf\AmfDeserializerWrapper.php" hash="be697b93123570bba6b9a475b9c28f4f" package="Tests\Amfphp\Core\Amf">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Tests_Amfphp_Core_Amf"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="19" package="Tests\Amfphp\Core\Amf">
      <extends>\Amfphp_Core_Amf_Deserializer</extends>
      <name>AmfDeserializerWrapper</name>
      <full_name>\AmfDeserializerWrapper</full_name>
      <docblock line="13">
        <description>This class exports some internal (public) methods.</description>
        <long-description>&lt;p&gt;This way, those methods
can be tested separately.&lt;/p&gt;</long-description>
        <tag line="13" name="package" description="Tests_Amfphp_Core_Amf"/>
        <tag line="13" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="25" package="Tests\Amfphp\Core\Amf">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="21">
          <description>constructor</description>
          <long-description/>
          <tag line="21" name="param" description="" type="string" variable="$raw">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="25">
          <name>$raw</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="33" package="Tests\Amfphp\Core\Amf">
        <name>readByte</name>
        <full_name>readByte</full_name>
        <docblock line="29">
          <description>read byte</description>
          <long-description/>
          <tag line="29" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="41" package="Tests\Amfphp\Core\Amf">
        <name>readInt</name>
        <full_name>readInt</full_name>
        <docblock line="37">
          <description>read int</description>
          <long-description/>
          <tag line="37" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="49" package="Tests\Amfphp\Core\Amf">
        <name>readLong</name>
        <full_name>readLong</full_name>
        <docblock line="45">
          <description>read long</description>
          <long-description/>
          <tag line="45" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="57" package="Tests\Amfphp\Core\Amf">
        <name>readUtf</name>
        <full_name>readUtf</full_name>
        <docblock line="53">
          <description>read utf</description>
          <long-description/>
          <tag line="53" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="65" package="Tests\Amfphp\Core\Amf">
        <name>readDouble</name>
        <full_name>readDouble</full_name>
        <docblock line="61">
          <description>reaad double</description>
          <long-description/>
          <tag line="61" name="return" description="" type="float">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="73" package="Tests\Amfphp\Core\Amf">
        <name>readLongUtf</name>
        <full_name>readLongUtf</full_name>
        <docblock line="69">
          <description>read long utf</description>
          <long-description/>
          <tag line="69" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="82" package="Tests\Amfphp\Core\Amf">
        <name>readDate</name>
        <full_name>readDate</full_name>
        <docblock line="77">
          <description>read date</description>
          <long-description/>
          <tag line="77" name="return" description="a container with the date in ms." type="\Amfphp_Core_Amf_Types_Date">
            <type by_reference="false">\Amfphp_Core_Amf_Types_Date</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="90" package="Tests\Amfphp\Core\Amf">
        <name>readArray</name>
        <full_name>readArray</full_name>
        <docblock line="86">
          <description>read array</description>
          <long-description/>
          <tag line="86" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="98" package="Tests\Amfphp\Core\Amf">
        <name>readObject</name>
        <full_name>readObject</full_name>
        <docblock line="94">
          <description>read object</description>
          <long-description/>
          <tag line="94" name="return" description="" type="\stdClass">
            <type by_reference="false">\stdClass</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="106" package="Tests\Amfphp\Core\Amf">
        <name>readMixedArray</name>
        <full_name>readMixedArray</full_name>
        <docblock line="102">
          <description>read mixed array</description>
          <long-description/>
          <tag line="102" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="114" package="Tests\Amfphp\Core\Amf">
        <name>readReference</name>
        <full_name>readReference</full_name>
        <docblock line="110">
          <description>read reference</description>
          <long-description/>
          <tag line="110" name="return" description="" type="\stdClass">
            <type by_reference="false">\stdClass</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="122" package="Tests\Amfphp\Core\Amf">
        <name>readAmf3Data</name>
        <full_name>readAmf3Data</full_name>
        <docblock line="118">
          <description>read amf3 data</description>
          <long-description/>
          <tag line="118" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="130" package="Tests\Amfphp\Core\Amf">
        <name>readAmf3String</name>
        <full_name>readAmf3String</full_name>
        <docblock line="126">
          <description>read amf3 string</description>
          <long-description/>
          <tag line="126" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="138" package="Tests\Amfphp\Core\Amf">
        <name>readAmf3Array</name>
        <full_name>readAmf3Array</full_name>
        <docblock line="134">
          <description>read amf 3 array</description>
          <long-description/>
          <tag line="134" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="146" package="Tests\Amfphp\Core\Amf">
        <name>readAmf3Object</name>
        <full_name>readAmf3Object</full_name>
        <docblock line="142">
          <description>read amf 3 object</description>
          <long-description/>
          <tag line="142" name="return" description="" type="\stdClass">
            <type by_reference="false">\stdClass</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="154" package="Tests\Amfphp\Core\Amf">
        <name>readAmf3ByteArray</name>
        <full_name>readAmf3ByteArray</full_name>
        <docblock line="150">
          <description>read byte array</description>
          <long-description/>
          <tag line="150" name="return" description="" type="\Amfphp_Core_Amf_Types_ByteArray">
            <type by_reference="false">\Amfphp_Core_Amf_Types_ByteArray</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Tests\Amfphp\Core\Amf\AmfSerializerWrapper.php" hash="8ce31d715b57dde4d1c528c92ee901fd" package="Tests\Amfphp\Core\Amf">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Tests_Amfphp_Core_Amf"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="19" package="Tests\Amfphp\Core\Amf">
      <extends>\Amfphp_Core_Amf_Serializer</extends>
      <name>AmfSerializerWrapper</name>
      <full_name>\AmfSerializerWrapper</full_name>
      <docblock line="13">
        <description>This class exports some internal (public) methods.</description>
        <long-description>&lt;p&gt;This way, those methods
can be tested separately.&lt;/p&gt;</long-description>
        <tag line="13" name="package" description="Tests_Amfphp_Core_Amf"/>
        <tag line="13" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="25" package="Tests\Amfphp\Core\Amf">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="21">
          <description>constructor</description>
          <long-description/>
          <tag line="21" name="param" description="" type="\Amfphp_Core_Amf_Packet" variable="$packet">
            <type by_reference="false">\Amfphp_Core_Amf_Packet</type>
          </tag>
        </docblock>
        <argument line="25">
          <name>$packet</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="34" package="Tests\Amfphp\Core\Amf">
        <name>writeByte</name>
        <full_name>writeByte</full_name>
        <docblock line="30">
          <description>write byte</description>
          <long-description/>
          <tag line="30" name="param" description="" type="int" variable="$b">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="34">
          <name>$b</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="42" package="Tests\Amfphp\Core\Amf">
        <name>writeInt</name>
        <full_name>writeInt</full_name>
        <docblock line="38">
          <description>write int</description>
          <long-description/>
          <tag line="38" name="param" description="" type="int" variable="$n">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$n</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="50" package="Tests\Amfphp\Core\Amf">
        <name>writeLong</name>
        <full_name>writeLong</full_name>
        <docblock line="46">
          <description>write long</description>
          <long-description/>
          <tag line="46" name="param" description="" type="int" variable="$l">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$l</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="58" package="Tests\Amfphp\Core\Amf">
        <name>writeUtf</name>
        <full_name>writeUtf</full_name>
        <docblock line="54">
          <description>write utf string</description>
          <long-description/>
          <tag line="54" name="param" description="" type="string" variable="$s">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="58">
          <name>$s</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="66" package="Tests\Amfphp\Core\Amf">
        <name>writeDouble</name>
        <full_name>writeDouble</full_name>
        <docblock line="62">
          <description>write double</description>
          <long-description/>
          <tag line="62" name="param" description="" type="float" variable="$s">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$s</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="74" package="Tests\Amfphp\Core\Amf">
        <name>writeLongUtf</name>
        <full_name>writeLongUtf</full_name>
        <docblock line="70">
          <description>write long utf string</description>
          <long-description/>
          <tag line="70" name="param" description="" type="string" variable="$s">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="74">
          <name>$s</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="82" package="Tests\Amfphp\Core\Amf">
        <name>writeNumber</name>
        <full_name>writeNumber</full_name>
        <docblock line="78">
          <description>write number</description>
          <long-description/>
          <tag line="78" name="param" description="" type="float" variable="$d">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
        <argument line="82">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="90" package="Tests\Amfphp\Core\Amf">
        <name>writeBoolean</name>
        <full_name>writeBoolean</full_name>
        <docblock line="86">
          <description>write boolean</description>
          <long-description/>
          <tag line="86" name="param" description="" type="boolean" variable="$b">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="90">
          <name>$b</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="98" package="Tests\Amfphp\Core\Amf">
        <name>writeString</name>
        <full_name>writeString</full_name>
        <docblock line="94">
          <description>write  string</description>
          <long-description/>
          <tag line="94" name="param" description="" type="string" variable="$d">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="98">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="106" package="Tests\Amfphp\Core\Amf">
        <name>writeXML</name>
        <full_name>writeXML</full_name>
        <docblock line="102">
          <description>write xml</description>
          <long-description/>
          <tag line="102" name="param" description="" type="\Amfphp_Core_Amf_Types_Xml" variable="$d">
            <type by_reference="false">\Amfphp_Core_Amf_Types_Xml</type>
          </tag>
        </docblock>
        <argument line="106">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="114" package="Tests\Amfphp\Core\Amf">
        <name>writeDate</name>
        <full_name>writeDate</full_name>
        <docblock line="110">
          <description>write date</description>
          <long-description/>
          <tag line="110" name="param" description="" type="\Amfphp_Core_Amf_Types_Date" variable="$d">
            <type by_reference="false">\Amfphp_Core_Amf_Types_Date</type>
          </tag>
        </docblock>
        <argument line="114">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="121" package="Tests\Amfphp\Core\Amf">
        <name>writeNull</name>
        <full_name>writeNull</full_name>
        <docblock line="118">
          <description>write null</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="128" package="Tests\Amfphp\Core\Amf">
        <name>writeUndefined</name>
        <full_name>writeUndefined</full_name>
        <docblock line="125">
          <description>write undefined</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="135" package="Tests\Amfphp\Core\Amf">
        <name>writeObjectEnd</name>
        <full_name>writeObjectEnd</full_name>
        <docblock line="132">
          <description>write object end</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="143" package="Tests\Amfphp\Core\Amf">
        <name>writeArrayOrObject</name>
        <full_name>writeArrayOrObject</full_name>
        <docblock line="139">
          <description>write array or object</description>
          <long-description/>
          <tag line="139" name="param" description="" type="array" variable="$d">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="143">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="151" package="Tests\Amfphp\Core\Amf">
        <name>writeReference</name>
        <full_name>writeReference</full_name>
        <docblock line="147">
          <description>write reference</description>
          <long-description/>
          <tag line="147" name="param" description="" type="int" variable="$d">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="151">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="159" package="Tests\Amfphp\Core\Amf">
        <name>writeTypedObject</name>
        <full_name>writeTypedObject</full_name>
        <docblock line="155">
          <description>write typed object</description>
          <long-description/>
          <tag line="155" name="param" description="" type="\stdClass" variable="$d">
            <type by_reference="false">\stdClass</type>
          </tag>
        </docblock>
        <argument line="159">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="167" package="Tests\Amfphp\Core\Amf">
        <name>writeAmf3Data</name>
        <full_name>writeAmf3Data</full_name>
        <docblock line="163">
          <description>write amf3 datas</description>
          <long-description/>
          <tag line="163" name="param" description="" type="mixed" variable="$d">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="167">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="174" package="Tests\Amfphp\Core\Amf">
        <name>writeAmf3Null</name>
        <full_name>writeAmf3Null</full_name>
        <docblock line="171">
          <description>write amf3 null</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="181" package="Tests\Amfphp\Core\Amf">
        <name>writeAmf3Undefined</name>
        <full_name>writeAmf3Undefined</full_name>
        <docblock line="178">
          <description>write amf3 undefined</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="189" package="Tests\Amfphp\Core\Amf">
        <name>writeAmf3Bool</name>
        <full_name>writeAmf3Bool</full_name>
        <docblock line="185">
          <description>write amf3 boolean</description>
          <long-description/>
          <tag line="185" name="param" description="" type="boolean" variable="$d">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="189">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="197" package="Tests\Amfphp\Core\Amf">
        <name>writeAmf3Number</name>
        <full_name>writeAmf3Number</full_name>
        <docblock line="193">
          <description>write amf3 number</description>
          <long-description/>
          <tag line="193" name="param" description="" type="float" variable="$d">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
        <argument line="197">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="205" package="Tests\Amfphp\Core\Amf">
        <name>writeAmf3String</name>
        <full_name>writeAmf3String</full_name>
        <docblock line="201">
          <description>write amf3 string</description>
          <long-description/>
          <tag line="201" name="param" description="" type="string" variable="$d">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="205">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="213" package="Tests\Amfphp\Core\Amf">
        <name>writeAmf3Xml</name>
        <full_name>writeAmf3Xml</full_name>
        <docblock line="209">
          <description>write amf3 xml</description>
          <long-description/>
          <tag line="209" name="param" description="" type="\Amfphp_Core_Amf_Types_Xml" variable="$d">
            <type by_reference="false">\Amfphp_Core_Amf_Types_Xml</type>
          </tag>
        </docblock>
        <argument line="213">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="221" package="Tests\Amfphp\Core\Amf">
        <name>writeAmf3XmlDocument</name>
        <full_name>writeAmf3XmlDocument</full_name>
        <docblock line="217">
          <description>write amf3 xml doc</description>
          <long-description/>
          <tag line="217" name="param" description="" type="\Amfphp_Core_Amf_Types_XmlDocument" variable="$d">
            <type by_reference="false">\Amfphp_Core_Amf_Types_XmlDocument</type>
          </tag>
        </docblock>
        <argument line="221">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="229" package="Tests\Amfphp\Core\Amf">
        <name>writeAmf3Date</name>
        <full_name>writeAmf3Date</full_name>
        <docblock line="225">
          <description>write amf3 date</description>
          <long-description/>
          <tag line="225" name="param" description="" type="\Amfphp_Core_Amf_Types_Date" variable="$d">
            <type by_reference="false">\Amfphp_Core_Amf_Types_Date</type>
          </tag>
        </docblock>
        <argument line="229">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="237" package="Tests\Amfphp\Core\Amf">
        <name>writeAmf3Array</name>
        <full_name>writeAmf3Array</full_name>
        <docblock line="233">
          <description>write amf3 array</description>
          <long-description/>
          <tag line="233" name="param" description="" type="array" variable="$d">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="237">
          <name>$d</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="245" package="Tests\Amfphp\Core\Amf">
        <name>writeAmf3TypedObject</name>
        <full_name>writeAmf3TypedObject</full_name>
        <docblock line="241">
          <description>write amf3 typed object</description>
          <long-description/>
          <tag line="241" name="param" description="" type="\stdClass" variable="$d">
            <type by_reference="false">\stdClass</type>
          </tag>
        </docblock>
        <argument line="245">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="253" package="Tests\Amfphp\Core\Amf">
        <name>writeAmf3ByteArray</name>
        <full_name>writeAmf3ByteArray</full_name>
        <docblock line="249">
          <description>write Amfphp_Core_Amf_Types_ByteArray in amf3</description>
          <long-description/>
          <tag line="249" name="param" description="" type="\Amfphp_Core_Amf_Types_ByteArray" variable="$d">
            <type by_reference="false">\Amfphp_Core_Amf_Types_ByteArray</type>
          </tag>
        </docblock>
        <argument line="253">
          <name>$d</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Tests\Amfphp\Core\Amf\AmfUtilTest.php" hash="0bcdc2fef182ac99b814c72ef3cd6492" package="Tests\Amfphp\Core\Amf">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Tests_Amfphp_Core_Amf"/>
    </docblock>
    <include line="15" type="Require Once" package="Default">
      <name/>
      <docblock line="12">
        <description>includes</description>
        <long-description/>
      </docblock>
    </include>
    <class final="false" abstract="false" namespace="global" line="23" package="Tests\Amfphp\Core\Amf">
      <extends>\PHPUnit_Framework_TestCase</extends>
      <name>Amfphp_Core_Amf_UtilTest</name>
      <full_name>\Amfphp_Core_Amf_UtilTest</full_name>
      <docblock line="17">
        <description>Test class for Amfphp_Core_Amf_Util.</description>
        <long-description>&lt;p&gt;Generated by PHPUnit on 2011-01-20 at 15:43:40.&lt;/p&gt;</long-description>
        <tag line="17" name="package" description="Tests_Amfphp_Core_Amf"/>
        <tag line="17" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="29" namespace="global" package="Default">
        <name>$object</name>
        <default/>
        <docblock line="25">
          <description>object</description>
          <long-description/>
          <tag line="25" name="var" description="" type="\Amfphp_Core_Amf_Util">
            <type by_reference="false">\Amfphp_Core_Amf_Util</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="35" namespace="global" package="Default">
        <name>$counter</name>
        <default/>
        <docblock line="31">
          <description>for testApplyFunc</description>
          <long-description/>
          <tag line="31" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="41" package="Tests\Amfphp\Core\Amf">
        <name>setUp</name>
        <full_name>setUp</full_name>
        <docblock line="37">
          <description>Sets up the fixture, for example, opens a network connection.</description>
          <long-description>&lt;p&gt;This method is called before a test is executed.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="49" package="Tests\Amfphp\Core\Amf">
        <name>tearDown</name>
        <full_name>tearDown</full_name>
        <docblock line="45">
          <description>Tears down the fixture, for example, closes a network connection.</description>
          <long-description>&lt;p&gt;This method is called after a test is executed.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="56" package="Tests\Amfphp\Core\Amf">
        <name>testIsSystemBigEndian</name>
        <full_name>testIsSystemBigEndian</full_name>
        <docblock line="53">
          <description>test system is big endian</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="66" package="Tests\Amfphp\Core\Amf">
        <name>testApplyFunc</name>
        <full_name>testApplyFunc</full_name>
        <docblock line="61">
          <description>test apply func.</description>
          <long-description>&lt;p&gt;used by testApplyFunctionToContainedObjects&lt;/p&gt;</long-description>
          <tag line="61" name="param" description="" type="mixed" variable="$obj">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="61" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$obj</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="74" package="Tests\Amfphp\Core\Amf">
        <name>testApplyFunctionToContainedObjects</name>
        <full_name>testApplyFunctionToContainedObjects</full_name>
        <docblock line="71">
          <description>test apply function to contained objects</description>
          <long-description/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Tests\Amfphp\Core\Amf\DeserializationTest.php" hash="76178ff513e5ec6ea20ca8d48166dcea" package="Tests\Amfphp\Core\Amf">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Tests_Amfphp_Core_Amf"/>
    </docblock>
    <include line="15" type="Require Once" package="Default">
      <name/>
      <docblock line="12">
        <description>includes</description>
        <long-description/>
      </docblock>
    </include>
    <include line="16" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="17" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="26" package="Tests\Amfphp\Core\Amf">
      <extends>\PHPUnit_Framework_TestCase</extends>
      <name>DeserializationTest</name>
      <full_name>\DeserializationTest</full_name>
      <docblock line="19">
        <description>Unit tests for Amfphp_Core_Amf_Serializer
note: phpunit dataProvider mechanism doesn't work well, so lots of boiler plate code here.</description>
        <long-description>&lt;p&gt;Oh well... A.S.&lt;/p&gt;</long-description>
        <tag line="19" name="package" description="Tests_Amfphp_Core_Amf"/>
        <tag line="19" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="31" package="Tests\Amfphp\Core\Amf">
        <name>testBasicMethods</name>
        <full_name>testBasicMethods</full_name>
        <docblock line="28">
          <description>test basic methods</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="167" package="Tests\Amfphp\Core\Amf">
        <name>testDeserializingPackets</name>
        <full_name>testDeserializingPackets</full_name>
        <docblock line="164">
          <description>test deserializing packets</description>
          <long-description/>
        </docblock>
      </method>
    </class>
    <markers>
      <todo line="116">better tests for references</todo>
    </markers>
  </file>
  <file path="Tests\Amfphp\Core\Amf\SerializationTest.php" hash="18f854a8271191e6e2549f3f1a7ef5cd" package="Tests\Amfphp\Core\Amf">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Tests_Amfphp_Core_Amf"/>
    </docblock>
    <include line="15" type="Require Once" package="Default">
      <name/>
      <docblock line="12">
        <description>includes</description>
        <long-description/>
      </docblock>
    </include>
    <include line="16" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="17" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="26" package="Tests\Amfphp\Core\Amf">
      <extends>\PHPUnit_Framework_TestCase</extends>
      <name>SerializationTest</name>
      <full_name>\SerializationTest</full_name>
      <docblock line="19">
        <description>Unit tests for Amfphp_Core_Amf_Serializer
note: phpunit dataProvider mechanism doesn't work well, so lots of boiler plate code here.</description>
        <long-description>&lt;p&gt;Oh well... A.S.&lt;/p&gt;</long-description>
        <tag line="19" name="package" description="Tests_Amfphp_Core_Amf"/>
        <tag line="19" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="31" package="Tests\Amfphp\Core\Amf">
        <name>testBasicMethods</name>
        <full_name>testBasicMethods</full_name>
        <docblock line="28">
          <description>test basic methods</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="191" package="Tests\Amfphp\Core\Amf">
        <name>testSerializingPackets</name>
        <full_name>testSerializingPackets</full_name>
        <docblock line="188">
          <description>test serializing packets</description>
          <long-description/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Tests\Amfphp\Core\Common\ServiceRouterTest.php" hash="97acafc3a7b3a3b5b9caa57743bb9512" package="Tests\Amfphp\Core\Common">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Tests_Amfphp_Core_Common"/>
    </docblock>
    <include line="15" type="Require Once" package="Default">
      <name/>
      <docblock line="12">
        <description>includes</description>
        <long-description/>
      </docblock>
    </include>
    <include line="16" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="17" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="18" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="25" package="Tests\Amfphp\Core\Common">
      <extends>\PHPUnit_Framework_TestCase</extends>
      <name>Amfphp_Core_Common_ServiceRouterTest</name>
      <full_name>\Amfphp_Core_Common_ServiceRouterTest</full_name>
      <docblock line="20">
        <description>Test class for Amfphp_Core_Common_ServiceRouter.</description>
        <long-description/>
        <tag line="20" name="package" description="Tests_Amfphp_Core_Common"/>
        <tag line="20" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="31" namespace="global" package="Default">
        <name>$object</name>
        <default/>
        <docblock line="27">
          <description>object</description>
          <long-description/>
          <tag line="27" name="var" description="" type="\Amfphp_Core_Common_ServiceRouter">
            <type by_reference="false">\Amfphp_Core_Common_ServiceRouter</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="37" package="Tests\Amfphp\Core\Common">
        <name>setUp</name>
        <full_name>setUp</full_name>
        <docblock line="33">
          <description>Sets up the fixture, for example, opens a network connection.</description>
          <long-description>&lt;p&gt;This method is called before a test is executed.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="45" package="Tests\Amfphp\Core\Common">
        <name>testExecuteTestServiceCall</name>
        <full_name>testExecuteTestServiceCall</full_name>
        <docblock line="42">
          <description>test exceute service call</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="66" package="Tests\Amfphp\Core\Common">
        <name>testFindDummyServiceInFolder</name>
        <full_name>testFindDummyServiceInFolder</full_name>
        <docblock line="63">
          <description>test find fuééy service in folder</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="75" package="Tests\Amfphp\Core\Common">
        <name>testNoServiceException</name>
        <full_name>testNoServiceException</full_name>
        <docblock line="71">
          <description>test no service exception</description>
          <long-description/>
          <tag line="71" name="expectedException" description="Amfphp_Core_Exception"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="83" package="Tests\Amfphp\Core\Common">
        <name>testNoFunctionException</name>
        <full_name>testNoFunctionException</full_name>
        <docblock line="79">
          <description>test no function exception</description>
          <long-description/>
          <tag line="79" name="expectedException" description="Amfphp_Core_Exception"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="92" package="Tests\Amfphp\Core\Common">
        <name>testReservedMethodException</name>
        <full_name>testReservedMethodException</full_name>
        <docblock line="88">
          <description>test reserved method exception</description>
          <long-description/>
          <tag line="88" name="expectedException" description="Amfphp_Core_Exception"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Tests\Amfphp\Core\FilterManagerTest.php" hash="5133a3076e661b4e619929f046eff532" package="Tests\Amfphp\Core">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Tests_Amfphp_Core"/>
    </docblock>
    <include line="15" type="Require Once" package="Default">
      <name/>
      <docblock line="12">
        <description>includes</description>
        <long-description/>
      </docblock>
    </include>
    <class final="false" abstract="false" namespace="global" line="22" package="Tests\Amfphp\Core">
      <extends>\PHPUnit_Framework_TestCase</extends>
      <name>Amfphp_Core_FilterManagerTest</name>
      <full_name>\Amfphp_Core_FilterManagerTest</full_name>
      <docblock line="17">
        <description>Test class for Amfphp_Core_FilterManager.</description>
        <long-description/>
        <tag line="17" name="package" description="Tests_Amfphp_Core"/>
        <tag line="17" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="27" package="Tests\Amfphp\Core">
        <name>testFilter</name>
        <full_name>testFilter</full_name>
        <docblock line="24">
          <description>test filter</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="40" package="Tests\Amfphp\Core">
        <name>testPriorities</name>
        <full_name>testPriorities</full_name>
        <docblock line="37">
          <description>at the end of the test $testArray should contain 3, 1, 1, 2</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="61" package="Tests\Amfphp\Core">
        <name>double</name>
        <full_name>double</full_name>
        <docblock line="56">
          <description>note: this function must be public to be called.</description>
          <long-description>&lt;p&gt;This is called by filter&lt;/p&gt;</long-description>
          <tag line="56" name="param" description="" type="\number" variable="$valueToDouble">
            <type by_reference="false">\number</type>
          </tag>
          <tag line="56" name="return" description="" type="\number">
            <type by_reference="false">\number</type>
          </tag>
        </docblock>
        <argument line="61">
          <name>$valueToDouble</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="69" package="Tests\Amfphp\Core">
        <name>push1</name>
        <full_name>push1</full_name>
        <docblock line="65">
          <description>note: this function must be public to be called.</description>
          <long-description>&lt;p&gt;This is called by filter&lt;/p&gt;</long-description>
          <tag line="65" name="param" description="" type="array" variable="$testArray">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="69">
          <name>$testArray</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="78" package="Tests\Amfphp\Core">
        <name>push2</name>
        <full_name>push2</full_name>
        <docblock line="74">
          <description>note: this function must be public to be called.</description>
          <long-description>&lt;p&gt;This is called by filter&lt;/p&gt;</long-description>
          <tag line="74" name="param" description="" type="array" variable="$testArray">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="78">
          <name>$testArray</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="87" package="Tests\Amfphp\Core">
        <name>push3</name>
        <full_name>push3</full_name>
        <docblock line="83">
          <description>note: this function must be public to be called.</description>
          <long-description>&lt;p&gt;This is called by filter&lt;/p&gt;</long-description>
          <tag line="83" name="param" description="" type="array" variable="$testArray">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="87">
          <name>$testArray</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Tests\Amfphp\Core\GatewayTest.php" hash="5653874b657a1a5093c885ee3cca3555" package="Tests\Amfphp\Core">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Tests_Amfphp_Core"/>
    </docblock>
    <include line="15" type="Require Once" package="Default">
      <name/>
      <docblock line="12">
        <description>includes</description>
        <long-description/>
      </docblock>
    </include>
    <include line="16" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="17" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="24" package="Tests\Amfphp\Core">
      <extends>\PHPUnit_Framework_TestCase</extends>
      <name>Amfphp_Core_GatewayTest</name>
      <full_name>\Amfphp_Core_GatewayTest</full_name>
      <docblock line="19">
        <description>Test class for Amfphp_Core_Gateway.</description>
        <long-description/>
        <tag line="19" name="package" description="Tests_Amfphp_Core"/>
        <tag line="19" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="28" package="Tests\Amfphp\Core">
        <name>testService</name>
        <full_name>testService</full_name>
        <docblock line="25">
          <description>test service</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="41" package="Tests\Amfphp\Core">
        <name>testEmptyMessage</name>
        <full_name>testEmptyMessage</full_name>
        <docblock line="38">
          <description>test empty message</description>
          <long-description/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Tests\Amfphp\Core\PluginManagerTest.php" hash="eab1c7f9f8a1c6a310ee27bebdebfe02" package="Tests\Amfphp\Core">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Tests_Amfphp_Core"/>
    </docblock>
    <include line="15" type="Require Once" package="Default">
      <name/>
      <docblock line="12">
        <description>includes</description>
        <long-description/>
      </docblock>
    </include>
    <include line="16" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="23" package="Tests\Amfphp\Core">
      <extends>\PHPUnit_Framework_TestCase</extends>
      <name>Amfphp_Core_PluginManagerTest</name>
      <full_name>\Amfphp_Core_PluginManagerTest</full_name>
      <docblock line="18">
        <description>Test class for Amfphp_Core_PluginManager.</description>
        <long-description/>
        <tag line="18" name="package" description="Tests_Amfphp_Core"/>
        <tag line="18" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="29" namespace="global" package="Default">
        <name>$pluginManager</name>
        <default/>
        <docblock line="25">
          <description>plugin manager</description>
          <long-description/>
          <tag line="25" name="var" description="" type="\Amfphp_Core_PluginManager">
            <type by_reference="false">\Amfphp_Core_PluginManager</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="36" package="Tests\Amfphp\Core">
        <name>setUp</name>
        <full_name>setUp</full_name>
        <docblock line="32">
          <description>Sets up the fixture, for example, opens a network connection.</description>
          <long-description>&lt;p&gt;This method is called before a test is executed.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="44" package="Tests\Amfphp\Core">
        <name>testSimple</name>
        <full_name>testSimple</full_name>
        <docblock line="40">
          <description>the TestPlugins folder must be scanned and in it found the class DummyPlugin, which contains an instanication counter.</description>
          <long-description>&lt;p&gt;It is included and instanciated by the plugin manager, and the test looks at the instanciation counter to check that an instance was created&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="53" package="Tests\Amfphp\Core">
        <name>testDisabled</name>
        <full_name>testDisabled</full_name>
        <docblock line="50">
          <description>test disabled</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="63" package="Tests\Amfphp\Core">
        <name>testConfig</name>
        <full_name>testConfig</full_name>
        <docblock line="60">
          <description>test config</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="76" package="Tests\Amfphp\Core">
        <name>testBadFolder</name>
        <full_name>testBadFolder</full_name>
        <docblock line="72">
          <description>test bad folder</description>
          <long-description/>
          <tag line="72" name="expectedException" description="Amfphp_Core_Exception"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Tests\Amfphp\Plugins\AmfphpAuthentication\AmfphpAuthenticationTest.php" hash="37c6fd4004337a481474d91e1d8d22db" package="Tests\Amfphp\Plugins\Authentication">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Tests_Amfphp_Plugins_Authentication"/>
    </docblock>
    <include line="15" type="Require Once" package="Default">
      <name/>
      <docblock line="12">
        <description>includes</description>
        <long-description/>
      </docblock>
    </include>
    <include line="16" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="17" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="24" package="Tests\Amfphp\Plugins\Authentication">
      <extends>\PHPUnit_Framework_TestCase</extends>
      <name>AmfphpAuthenticationTest</name>
      <full_name>\AmfphpAuthenticationTest</full_name>
      <docblock line="19">
        <description>Test class for AmfphpAuthentication.</description>
        <long-description/>
        <tag line="19" name="package" description="Tests_Amfphp_Plugins_Authentication"/>
        <tag line="19" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="30" namespace="global" package="Default">
        <name>$object</name>
        <default/>
        <docblock line="26">
          <description>object</description>
          <long-description/>
          <tag line="26" name="var" description="" type="\AmfphpAuthentication">
            <type by_reference="false">\AmfphpAuthentication</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="36" namespace="global" package="Default">
        <name>$serviceObj</name>
        <default/>
        <docblock line="32">
          <description>service obj</description>
          <long-description/>
          <tag line="32" name="var" description="" type="\AuthenticationService">
            <type by_reference="false">\AuthenticationService</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="42" package="Tests\Amfphp\Plugins\Authentication">
        <name>setUp</name>
        <full_name>setUp</full_name>
        <docblock line="38">
          <description>Sets up the fixture, for example, opens a network connection.</description>
          <long-description>&lt;p&gt;This method is called before a test is executed.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="51" package="Tests\Amfphp\Plugins\Authentication">
        <name>tearDown</name>
        <full_name>tearDown</full_name>
        <docblock line="47">
          <description>Tears down the fixture, for example, closes a network connection.</description>
          <long-description>&lt;p&gt;This method is called after a test is executed.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="58" package="Tests\Amfphp\Plugins\Authentication">
        <name>testAddRole</name>
        <full_name>testAddRole</full_name>
        <docblock line="55">
          <description>test add role</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="67" package="Tests\Amfphp\Plugins\Authentication">
        <name>testClearSessionInfo</name>
        <full_name>testClearSessionInfo</full_name>
        <docblock line="64">
          <description>test clear session info</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="76" package="Tests\Amfphp\Plugins\Authentication">
        <name>testLoginAndAccess</name>
        <full_name>testLoginAndAccess</full_name>
        <docblock line="73">
          <description>test login and access</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="84" package="Tests\Amfphp\Plugins\Authentication">
        <name>testNormalAccessToUnprotectedMethods</name>
        <full_name>testNormalAccessToUnprotectedMethods</full_name>
        <docblock line="81">
          <description>test normal access to unprotected methods</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="92" package="Tests\Amfphp\Plugins\Authentication">
        <name>testLogout</name>
        <full_name>testLogout</full_name>
        <docblock line="88">
          <description>test logout</description>
          <long-description/>
          <tag line="88" name="expectedException" description="Amfphp_Core_Exception"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="103" package="Tests\Amfphp\Plugins\Authentication">
        <name>testAccessWithoutAuthentication</name>
        <full_name>testAccessWithoutAuthentication</full_name>
        <docblock line="99">
          <description>test access without authentication</description>
          <long-description/>
          <tag line="99" name="expectedException" description="Amfphp_Core_Exception"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="111" package="Tests\Amfphp\Plugins\Authentication">
        <name>testBadRole</name>
        <full_name>testBadRole</full_name>
        <docblock line="107">
          <description>test bad role</description>
          <long-description/>
          <tag line="107" name="expectedException" description="Amfphp_Core_Exception"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="119" package="Tests\Amfphp\Plugins\Authentication">
        <name>testGetAmfRequestHeaderHandlerFilter</name>
        <full_name>testGetAmfRequestHeaderHandlerFilter</full_name>
        <docblock line="116">
          <description>test get amf request header handler filter</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="138" package="Tests\Amfphp\Plugins\Authentication">
        <name>testWithFiltersBlockAccess</name>
        <full_name>testWithFiltersBlockAccess</full_name>
        <docblock line="134">
          <description>test with filters block access</description>
          <long-description/>
          <tag line="134" name="expectedException" description="Amfphp_Core_Exception"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="145" package="Tests\Amfphp\Plugins\Authentication">
        <name>testWithFiltersGrantAccess</name>
        <full_name>testWithFiltersGrantAccess</full_name>
        <docblock line="142">
          <description>test with filters grant access</description>
          <long-description/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Tests\Amfphp\Plugins\AmfphpCharsetConverter\AmfphpCharsetConverterTest.php" hash="535fda39b31dd73d39b3ea8ad65b4d85" package="Tests\Amfphp\Plugins\CharsetConverter">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Tests_Amfphp_Plugins_CharsetConverter"/>
    </docblock>
    <include line="15" type="Require Once" package="Default">
      <name/>
      <docblock line="12">
        <description>includes</description>
        <long-description/>
      </docblock>
    </include>
    <include line="16" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="24" package="Tests\Amfphp\Plugins\CharsetConverter">
      <extends>\PHPUnit_Framework_TestCase</extends>
      <name>AmfphpCharsetConverterTest</name>
      <full_name>\AmfphpCharsetConverterTest</full_name>
      <docblock line="18">
        <description>Test class for CharsetConverter.</description>
        <long-description/>
        <tag line="18" name="package" description="Tests_Amfphp_Plugins_CharsetConverter"/>
        <tag line="18" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="30" namespace="global" package="Default">
        <name>$object</name>
        <default/>
        <docblock line="26">
          <description>object</description>
          <long-description/>
          <tag line="26" name="var" description="" type="\CharsetConverter">
            <type by_reference="false">\CharsetConverter</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="36" namespace="global" package="Default">
        <name>$textInClientCharset</name>
        <default/>
        <docblock line="32">
          <description>text in client charset</description>
          <long-description/>
          <tag line="32" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="42" namespace="global" package="Default">
        <name>$textInPhpCharset</name>
        <default/>
        <docblock line="38">
          <description>text in php charset</description>
          <long-description/>
          <tag line="38" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="48" package="Tests\Amfphp\Plugins\CharsetConverter">
        <name>setUp</name>
        <full_name>setUp</full_name>
        <docblock line="44">
          <description>Sets up the fixture, for example, opens a network connection.</description>
          <long-description>&lt;p&gt;This method is called before a test is executed.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="60" package="Tests\Amfphp\Plugins\CharsetConverter">
        <name>tearDown</name>
        <full_name>tearDown</full_name>
        <docblock line="56">
          <description>Tears down the fixture, for example, closes a network connection.</description>
          <long-description>&lt;p&gt;This method is called after a test is executed.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="67" package="Tests\Amfphp\Plugins\CharsetConverter">
        <name>testRequestDeserializedFilter</name>
        <full_name>testRequestDeserializedFilter</full_name>
        <docblock line="64">
          <description>test request deserialized filter</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="78" package="Tests\Amfphp\Plugins\CharsetConverter">
        <name>testResponseDeserializedFilter</name>
        <full_name>testResponseDeserializedFilter</full_name>
        <docblock line="75">
          <description>test response deserialied filter</description>
          <long-description/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Tests\Amfphp\Plugins\AmfphpCustomClassConverter\AmfphpCustomClassConverterTest.php" hash="ec0f19ae14f5a2e972023a85f2dd01d9" package="Tests\Amfphp\Plugins\CustomClassConverter">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Tests_Amfphp_Plugins_CustomClassConverter"/>
    </docblock>
    <include line="15" type="Require Once" package="Default">
      <name/>
      <docblock line="12">
        <description>includes</description>
        <long-description/>
      </docblock>
    </include>
    <include line="16" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="17" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="18" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="25" package="Tests\Amfphp\Plugins\CustomClassConverter">
      <extends>\PHPUnit_Framework_TestCase</extends>
      <name>AmfphpCustomClassConverterTest</name>
      <full_name>\AmfphpCustomClassConverterTest</full_name>
      <docblock line="20">
        <description>Test class for CustomClassConverter.</description>
        <long-description/>
        <tag line="20" name="package" description="Tests_Amfphp_Plugins_CustomClassConverter"/>
        <tag line="20" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="31" namespace="global" package="Default">
        <name>$object</name>
        <default/>
        <docblock line="27">
          <description>object</description>
          <long-description/>
          <tag line="27" name="var" description="" type="\CustomClassConverter">
            <type by_reference="false">\CustomClassConverter</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="37" package="Tests\Amfphp\Plugins\CustomClassConverter">
        <name>setUp</name>
        <full_name>setUp</full_name>
        <docblock line="33">
          <description>Sets up the fixture, for example, opens a network connection.</description>
          <long-description>&lt;p&gt;This method is called before a test is executed.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="46" package="Tests\Amfphp\Plugins\CustomClassConverter">
        <name>tearDown</name>
        <full_name>tearDown</full_name>
        <docblock line="42">
          <description>Tears down the fixture, for example, closes a network connection.</description>
          <long-description>&lt;p&gt;This method is called after a test is executed.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="52" package="Tests\Amfphp\Plugins\CustomClassConverter">
        <name>testfilterDeserializedRequest</name>
        <full_name>testfilterDeserializedRequest</full_name>
        <docblock line="49">
          <description>test deserialiwed request</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="108" package="Tests\Amfphp\Plugins\CustomClassConverter">
        <name>testfilterDeserializedResponse</name>
        <full_name>testfilterDeserializedResponse</full_name>
        <docblock line="105">
          <description>test filter deserialized response</description>
          <long-description/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Tests\Amfphp\Plugins\AmfphpFlexMessaging\AmfphpFlexMessagingTest.php" hash="e5c8ad6e6e6fae7d4e7df8e86136bafe" package="Tests\Amfphp\Plugins\FlexMessaging">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Tests_Amfphp_Plugins_FlexMessaging"/>
    </docblock>
    <include line="15" type="Require Once" package="Default">
      <name/>
      <docblock line="12">
        <description>includes</description>
        <long-description/>
      </docblock>
    </include>
    <include line="16" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="17" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="24" package="Tests\Amfphp\Plugins\FlexMessaging">
      <extends>\PHPUnit_Framework_TestCase</extends>
      <name>AmfphpFlexMessagingTest</name>
      <full_name>\AmfphpFlexMessagingTest</full_name>
      <docblock line="19">
        <description>Test class for FlexMessaging.</description>
        <long-description/>
        <tag line="19" name="package" description="Tests_Amfphp_Plugins_FlexMessaging"/>
        <tag line="19" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="30" namespace="global" package="Default">
        <name>$object</name>
        <default/>
        <docblock line="26">
          <description>object</description>
          <long-description/>
          <tag line="26" name="var" description="" type="\FlexMessaging">
            <type by_reference="false">\FlexMessaging</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="36" namespace="global" package="Default">
        <name>$serviceRouter</name>
        <default/>
        <docblock line="32">
          <description>service router</description>
          <long-description/>
          <tag line="32" name="var" description="" type="\Amfphp_Core_Common_ServiceRouter">
            <type by_reference="false">\Amfphp_Core_Common_ServiceRouter</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="42" package="Tests\Amfphp\Plugins\FlexMessaging">
        <name>setUp</name>
        <full_name>setUp</full_name>
        <docblock line="38">
          <description>Sets up the fixture, for example, opens a network connection.</description>
          <long-description>&lt;p&gt;This method is called before a test is executed.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="52" package="Tests\Amfphp\Plugins\FlexMessaging">
        <name>tearDown</name>
        <full_name>tearDown</full_name>
        <docblock line="48">
          <description>Tears down the fixture, for example, closes a network connection.</description>
          <long-description>&lt;p&gt;This method is called after a test is executed.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="59" package="Tests\Amfphp\Plugins\FlexMessaging">
        <name>testGetAmfRequestMessageHandlerFilter</name>
        <full_name>testGetAmfRequestMessageHandlerFilter</full_name>
        <docblock line="56">
          <description>test get amf request message handler filter</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="73" package="Tests\Amfphp\Plugins\FlexMessaging">
        <name>testCommandMessage</name>
        <full_name>testCommandMessage</full_name>
        <docblock line="70">
          <description>test command message</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="94" package="Tests\Amfphp\Plugins\FlexMessaging">
        <name>testRemotingMessage</name>
        <full_name>testRemotingMessage</full_name>
        <docblock line="91">
          <description>test remoting message</description>
          <long-description/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Tests\Amfphp\Plugins\AmfphpLogger\AmfphpLoggerTest.php" hash="daaf1957cb334679a8936a96468ccdee" package="Tests\Amfphp\Plugins\Logger">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Tests_Amfphp_Plugins_Logger"/>
    </docblock>
    <include line="15" type="Require Once" package="Default">
      <name/>
      <docblock line="12">
        <description>includes</description>
        <long-description/>
      </docblock>
    </include>
    <include line="16" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="23" package="Tests\Amfphp\Plugins\Logger">
      <extends>\PHPUnit_Framework_TestCase</extends>
      <name>AmfphpLoggerTest</name>
      <full_name>\AmfphpLoggerTest</full_name>
      <docblock line="18">
        <description>Test class for AmfphpLogger.</description>
        <long-description/>
        <tag line="18" name="package" description="Tests_Amfphp_Plugins_Logger"/>
        <tag line="18" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="28" package="Tests\Amfphp\Plugins\Logger">
        <name>testSimple</name>
        <full_name>testSimple</full_name>
        <docblock line="25">
          <description>test simple</description>
          <long-description/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Tests\bootstrap.php" hash="2a259fd944d2f46385f998821a8391b2" package="Tests">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Tests"/>
    </docblock>
  </file>
  <file path="Tests\TestData\Amf3TestData.php" hash="d6c6579cf85b50e9b12fb0c7c562c155" package="Tests\TestData">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Tests_TestData"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="19" package="Tests\TestData">
      <extends/>
      <name>Amf3TestData</name>
      <full_name>\Amf3TestData</full_name>
      <docblock line="13">
        <description>See AmfTestData for details, this is the extension for Amf3</description>
        <long-description/>
        <tag line="13" name="package" description="Tests_TestData"/>
        <tag line="13" name="author" description="Ariel Sommeria-klein, based on work by ci-dev"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="24" namespace="global" package="Default">
        <name>$sUndefined</name>
        <default/>
        <docblock line="20">
          <description>serialized undefined</description>
          <long-description/>
          <tag line="20" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="29" namespace="global" package="Default">
        <name>$dUndefined</name>
        <default/>
        <docblock line="25">
          <description>undefined</description>
          <long-description/>
          <tag line="25" name="var" description="" type="\Amfphp_Core_Amf_Types_Undefined">
            <type by_reference="false">\Amfphp_Core_Amf_Types_Undefined</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="34" namespace="global" package="Default">
        <name>$sNull</name>
        <default/>
        <docblock line="30">
          <description>null</description>
          <long-description/>
          <tag line="30" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="39" namespace="global" package="Default">
        <name>$sFalse</name>
        <default/>
        <docblock line="35">
          <description>false</description>
          <long-description/>
          <tag line="35" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="44" namespace="global" package="Default">
        <name>$sTrue</name>
        <default/>
        <docblock line="40">
          <description>true</description>
          <long-description/>
          <tag line="40" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="49" namespace="global" package="Default">
        <name>$dInt1</name>
        <default/>
        <docblock line="45">
          <description>int 1</description>
          <long-description/>
          <tag line="45" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="54" namespace="global" package="Default">
        <name>$sInt1</name>
        <default/>
        <docblock line="50">
          <description>int 2</description>
          <long-description/>
          <tag line="50" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="59" namespace="global" package="Default">
        <name>$dInt2</name>
        <default/>
        <docblock line="55">
          <description>int 2</description>
          <long-description/>
          <tag line="55" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="65" namespace="global" package="Default">
        <name>$sInt2</name>
        <default/>
        <docblock line="61">
          <description>int 2</description>
          <long-description/>
          <tag line="61" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="71" namespace="global" package="Default">
        <name>$dDouble</name>
        <default/>
        <docblock line="67">
          <description>double</description>
          <long-description/>
          <tag line="67" name="var" description="" type="float">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="77" namespace="global" package="Default">
        <name>$sDouble</name>
        <default/>
        <docblock line="73">
          <description>double</description>
          <long-description/>
          <tag line="73" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="83" namespace="global" package="Default">
        <name>$dString</name>
        <default/>
        <docblock line="79">
          <description>string</description>
          <long-description/>
          <tag line="79" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="89" namespace="global" package="Default">
        <name>$sString</name>
        <default/>
        <docblock line="85">
          <description>string</description>
          <long-description/>
          <tag line="85" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="95" namespace="global" package="Default">
        <name>$sStringTwice</name>
        <default/>
        <docblock line="91">
          <description>string twice</description>
          <long-description/>
          <tag line="91" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="101" namespace="global" package="Default">
        <name>$dLongString</name>
        <default/>
        <docblock line="97">
          <description>long string</description>
          <long-description/>
          <tag line="97" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="107" namespace="global" package="Default">
        <name>$sLongString</name>
        <default/>
        <docblock line="103">
          <description>long string</description>
          <long-description/>
          <tag line="103" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="113" namespace="global" package="Default">
        <name>$dEmptyString</name>
        <default/>
        <docblock line="109">
          <description>empty string</description>
          <long-description/>
          <tag line="109" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="119" namespace="global" package="Default">
        <name>$sEmptyString</name>
        <default/>
        <docblock line="115">
          <description>empty string</description>
          <long-description/>
          <tag line="115" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="125" namespace="global" package="Default">
        <name>$dXmlDocument</name>
        <default/>
        <docblock line="121">
          <description>xml document</description>
          <long-description/>
          <tag line="121" name="var" description="" type="\Amfphp_Core_Amf_Types_XmlDocument">
            <type by_reference="false">\Amfphp_Core_Amf_Types_XmlDocument</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="131" namespace="global" package="Default">
        <name>$sXmlDocument</name>
        <default/>
        <docblock line="127">
          <description>xml document</description>
          <long-description/>
          <tag line="127" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="137" namespace="global" package="Default">
        <name>$dXml</name>
        <default/>
        <docblock line="133">
          <description>xml</description>
          <long-description/>
          <tag line="133" name="var" description="" type="\Amfphp_Core_Amf_Types_Xml">
            <type by_reference="false">\Amfphp_Core_Amf_Types_Xml</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="143" namespace="global" package="Default">
        <name>$sXml</name>
        <default/>
        <docblock line="139">
          <description>xml</description>
          <long-description/>
          <tag line="139" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="149" namespace="global" package="Default">
        <name>$dDate</name>
        <default/>
        <docblock line="145">
          <description>date</description>
          <long-description/>
          <tag line="145" name="var" description="" type="\Amfphp_Core_Amf_Types_Date">
            <type by_reference="false">\Amfphp_Core_Amf_Types_Date</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="155" namespace="global" package="Default">
        <name>$sDate</name>
        <default/>
        <docblock line="151">
          <description>date</description>
          <long-description/>
          <tag line="151" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="161" namespace="global" package="Default">
        <name>$dEmptyArray</name>
        <default/>
        <docblock line="157">
          <description>empty array</description>
          <long-description/>
          <tag line="157" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="167" namespace="global" package="Default">
        <name>$sEmptyArray</name>
        <default/>
        <docblock line="163">
          <description>empty array</description>
          <long-description/>
          <tag line="163" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="173" namespace="global" package="Default">
        <name>$dDenseArray</name>
        <default/>
        <docblock line="169">
          <description>dense array</description>
          <long-description/>
          <tag line="169" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="179" namespace="global" package="Default">
        <name>$sDenseArray</name>
        <default/>
        <docblock line="175">
          <description>dense array</description>
          <long-description/>
          <tag line="175" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="185" namespace="global" package="Default">
        <name>$dMixedArray</name>
        <default/>
        <docblock line="181">
          <description>mixed array</description>
          <long-description/>
          <tag line="181" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="191" namespace="global" package="Default">
        <name>$sMixedArray</name>
        <default/>
        <docblock line="187">
          <description>mixed array</description>
          <long-description/>
          <tag line="187" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="197" namespace="global" package="Default">
        <name>$dObject</name>
        <default/>
        <docblock line="193">
          <description>object</description>
          <long-description/>
          <tag line="193" name="var" description="" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="203" namespace="global" package="Default">
        <name>$sObject</name>
        <default/>
        <docblock line="199">
          <description>object</description>
          <long-description/>
          <tag line="199" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="209" namespace="global" package="Default">
        <name>$dByteArray</name>
        <default/>
        <docblock line="205">
          <description>byte array</description>
          <long-description/>
          <tag line="205" name="var" description="" type="\Amfphp_Core_Amf_Types_ByteArray">
            <type by_reference="false">\Amfphp_Core_Amf_Types_ByteArray</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="215" namespace="global" package="Default">
        <name>$sByteArray</name>
        <default/>
        <docblock line="211">
          <description>byte array</description>
          <long-description/>
          <tag line="211" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="220" package="Tests\TestData">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="217">
          <description>constructor</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="235" package="Tests\TestData">
        <name>buildBasics</name>
        <full_name>buildBasics</full_name>
        <docblock line="232">
          <description>simple.</description>
          <long-description>&lt;p&gt;..&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="247" package="Tests\TestData">
        <name>buildInt</name>
        <full_name>buildInt</full_name>
        <docblock line="244">
          <description>build int</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="275" package="Tests\TestData">
        <name>buildDouble</name>
        <full_name>buildDouble</full_name>
        <docblock line="271">
          <description>double: 0x05 as type marker, then 8 bytes.</description>
          <long-description>&lt;p&gt;Careful of little/big endian so that test runs with both systems&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="289" package="Tests\TestData">
        <name>buildString</name>
        <full_name>buildString</full_name>
        <docblock line="284">
          <description>note: no type markers here, because the method doesn't do it.</description>
          <long-description>&lt;p&gt;So only the raw data.&lt;/p&gt;</long-description>
          <tag line="284" name="todo" description="methods with a type marker included"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="318" package="Tests\TestData">
        <name>buildXml</name>
        <full_name>buildXml</full_name>
        <docblock line="315">
          <description>build xml</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="332" package="Tests\TestData">
        <name>buildDate</name>
        <full_name>buildDate</full_name>
        <docblock line="329">
          <description>build date</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="350" package="Tests\TestData">
        <name>buildArray</name>
        <full_name>buildArray</full_name>
        <docblock line="347">
          <description>build array</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="408" package="Tests\TestData">
        <name>buildObject</name>
        <full_name>buildObject</full_name>
        <docblock line="405">
          <description>build object</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="437" package="Tests\TestData">
        <name>buildByteArray</name>
        <full_name>buildByteArray</full_name>
        <docblock line="434">
          <description>build byte array</description>
          <long-description/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Tests\TestData\AmfTestData.php" hash="9a7788186558a3b2feab85b7676b7067" package="Tests\TestData">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Tests_TestData"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="22" package="Tests\TestData">
      <extends/>
      <name>AmfTestData</name>
      <full_name>\AmfTestData</full_name>
      <docblock line="13">
        <description>test data for the Amfphp unit tests
data types have the s prefix for 'serialized' and 'd' prefix for 'deserialized'
for Packets there is a flaw in the Amfphp design which means that serializng and deserializing is not symmetrical.</description>
        <long-description>&lt;p&gt;so use s for serialized, d for deserialized for the serialization tests and dd for the deserialation tests, the idea being that dd will disappear for v2&lt;/p&gt;</long-description>
        <tag line="13" name="package" description="Tests_TestData"/>
        <tag line="13" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="29" namespace="global" package="Default">
        <name>$sByte</name>
        <default/>
        <docblock line="25">
          <description>byte</description>
          <long-description/>
          <tag line="25" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="35" namespace="global" package="Default">
        <name>$dByte</name>
        <default/>
        <docblock line="31">
          <description>byte</description>
          <long-description/>
          <tag line="31" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="41" namespace="global" package="Default">
        <name>$sInt</name>
        <default/>
        <docblock line="37">
          <description>int</description>
          <long-description/>
          <tag line="37" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="47" namespace="global" package="Default">
        <name>$dInt</name>
        <default/>
        <docblock line="43">
          <description>int</description>
          <long-description/>
          <tag line="43" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="53" namespace="global" package="Default">
        <name>$sLong</name>
        <default/>
        <docblock line="49">
          <description>long</description>
          <long-description/>
          <tag line="49" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="59" namespace="global" package="Default">
        <name>$dLong</name>
        <default/>
        <docblock line="55">
          <description>long</description>
          <long-description/>
          <tag line="55" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="65" namespace="global" package="Default">
        <name>$sDouble</name>
        <default/>
        <docblock line="61">
          <description>double</description>
          <long-description/>
          <tag line="61" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="71" namespace="global" package="Default">
        <name>$dDouble</name>
        <default/>
        <docblock line="67">
          <description>double</description>
          <long-description/>
          <tag line="67" name="var" description="" type="float">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="77" namespace="global" package="Default">
        <name>$sUtf</name>
        <default/>
        <docblock line="73">
          <description>utf string</description>
          <long-description/>
          <tag line="73" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="83" namespace="global" package="Default">
        <name>$dUtf</name>
        <default/>
        <docblock line="79">
          <description>string</description>
          <long-description/>
          <tag line="79" name="var" description="" type="\"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="89" namespace="global" package="Default">
        <name>$sLongUtf</name>
        <default/>
        <docblock line="85">
          <description>long utf</description>
          <long-description/>
          <tag line="85" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="95" namespace="global" package="Default">
        <name>$dLongUtf</name>
        <default/>
        <docblock line="91">
          <description>long utf</description>
          <long-description/>
          <tag line="91" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="103" namespace="global" package="Default">
        <name>$sNumber</name>
        <default/>
        <docblock line="99">
          <description>number</description>
          <long-description/>
          <tag line="99" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="109" namespace="global" package="Default">
        <name>$dNumber</name>
        <default/>
        <docblock line="105">
          <description>number</description>
          <long-description/>
          <tag line="105" name="var" description="" type="float">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="115" namespace="global" package="Default">
        <name>$sBoolean</name>
        <default/>
        <docblock line="111">
          <description>boolean</description>
          <long-description/>
          <tag line="111" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="121" namespace="global" package="Default">
        <name>$dBoolean</name>
        <default/>
        <docblock line="117">
          <description>boolean</description>
          <long-description/>
          <tag line="117" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="127" namespace="global" package="Default">
        <name>$sString</name>
        <default/>
        <docblock line="123">
          <description>string</description>
          <long-description/>
          <tag line="123" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="133" namespace="global" package="Default">
        <name>$dString</name>
        <default/>
        <docblock line="129">
          <description>string</description>
          <long-description/>
          <tag line="129" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="139" namespace="global" package="Default">
        <name>$sObject</name>
        <default/>
        <docblock line="135">
          <description>object</description>
          <long-description/>
          <tag line="135" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="145" namespace="global" package="Default">
        <name>$dObject</name>
        <default/>
        <docblock line="141">
          <description>object</description>
          <long-description/>
          <tag line="141" name="var" description="" type="\stdClass">
            <type by_reference="false">\stdClass</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="151" namespace="global" package="Default">
        <name>$sNull</name>
        <default/>
        <docblock line="147">
          <description>null</description>
          <long-description/>
          <tag line="147" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="157" namespace="global" package="Default">
        <name>$dNull</name>
        <default/>
        <docblock line="153">
          <description>null</description>
          <long-description/>
          <tag line="153" name="var" description="" type="null">
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="163" namespace="global" package="Default">
        <name>$sUndefined</name>
        <default/>
        <docblock line="159">
          <description>undefined</description>
          <long-description/>
          <tag line="159" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="169" namespace="global" package="Default">
        <name>$dUndefined</name>
        <default/>
        <docblock line="165">
          <description>undefined</description>
          <long-description/>
          <tag line="165" name="var" description="" type="\Amfphp_Core_Amf_Types_Undefined">
            <type by_reference="false">\Amfphp_Core_Amf_Types_Undefined</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="175" namespace="global" package="Default">
        <name>$sReference</name>
        <default/>
        <docblock line="171">
          <description>string</description>
          <long-description/>
          <tag line="171" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="181" namespace="global" package="Default">
        <name>$dReference</name>
        <default/>
        <docblock line="177">
          <description>reference</description>
          <long-description/>
          <tag line="177" name="var" description="" type="\stdClass">
            <type by_reference="false">\stdClass</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="187" namespace="global" package="Default">
        <name>$sEcmaArray</name>
        <default/>
        <docblock line="183">
          <description>ecma array</description>
          <long-description/>
          <tag line="183" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="193" namespace="global" package="Default">
        <name>$dEcmaArray</name>
        <default/>
        <docblock line="189">
          <description>ecma array</description>
          <long-description/>
          <tag line="189" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="199" namespace="global" package="Default">
        <name>$sObjectEnd</name>
        <default/>
        <docblock line="195">
          <description>object end</description>
          <long-description/>
          <tag line="195" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="205" namespace="global" package="Default">
        <name>$dObjectEnd</name>
        <default/>
        <docblock line="201">
          <description>object end</description>
          <long-description/>
          <tag line="201" name="var" description="" type="null">
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="211" namespace="global" package="Default">
        <name>$sStrictArray</name>
        <default/>
        <docblock line="207">
          <description>strict array</description>
          <long-description/>
          <tag line="207" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="217" namespace="global" package="Default">
        <name>$dStrictArray</name>
        <default/>
        <docblock line="213">
          <description>strict array</description>
          <long-description/>
          <tag line="213" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="223" namespace="global" package="Default">
        <name>$sDate</name>
        <default/>
        <docblock line="219">
          <description>date</description>
          <long-description/>
          <tag line="219" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="229" namespace="global" package="Default">
        <name>$dDate</name>
        <default/>
        <docblock line="225">
          <description>date</description>
          <long-description/>
          <tag line="225" name="var" description="" type="\Amfphp_Core_Amf_Types_Date">
            <type by_reference="false">\Amfphp_Core_Amf_Types_Date</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="235" namespace="global" package="Default">
        <name>$sLongString</name>
        <default/>
        <docblock line="231">
          <description>long string</description>
          <long-description/>
          <tag line="231" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="241" namespace="global" package="Default">
        <name>$dLongString</name>
        <default/>
        <docblock line="237">
          <description>long string</description>
          <long-description/>
          <tag line="237" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="247" namespace="global" package="Default">
        <name>$sUnsupported</name>
        <default/>
        <docblock line="243">
          <description>unsupported</description>
          <long-description/>
          <tag line="243" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="253" namespace="global" package="Default">
        <name>$dUnsupported</name>
        <default/>
        <docblock line="249">
          <description>unsupported</description>
          <long-description/>
          <tag line="249" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="259" namespace="global" package="Default">
        <name>$sXml</name>
        <default/>
        <docblock line="255">
          <description>xml</description>
          <long-description/>
          <tag line="255" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="265" namespace="global" package="Default">
        <name>$dXml</name>
        <default/>
        <docblock line="261">
          <description>xml</description>
          <long-description/>
          <tag line="261" name="var" description="" type="\Amfphp_Core_Amf_Types_Xml">
            <type by_reference="false">\Amfphp_Core_Amf_Types_Xml</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="271" namespace="global" package="Default">
        <name>$sTypedObject</name>
        <default/>
        <docblock line="267">
          <description>typed object</description>
          <long-description/>
          <tag line="267" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="277" namespace="global" package="Default">
        <name>$dTypedObject</name>
        <default/>
        <docblock line="273">
          <description>typed object</description>
          <long-description/>
          <tag line="273" name="var" description="" type="\DummyClass">
            <type by_reference="false">\DummyClass</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="285" namespace="global" package="Default">
        <name>$sEmptyPacket</name>
        <default/>
        <docblock line="281">
          <description>empty packet</description>
          <long-description/>
          <tag line="281" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="291" namespace="global" package="Default">
        <name>$dEmptyPacket</name>
        <default/>
        <docblock line="287">
          <description>empty packet</description>
          <long-description/>
          <tag line="287" name="var" description="" type="\Amfphp_Core_Amf_Packet">
            <type by_reference="false">\Amfphp_Core_Amf_Packet</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="297" namespace="global" package="Default">
        <name>$sNullHeaderPacket</name>
        <default/>
        <docblock line="293">
          <description>null header packet</description>
          <long-description/>
          <tag line="293" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="303" namespace="global" package="Default">
        <name>$dNullHeaderPacket</name>
        <default/>
        <docblock line="299">
          <description>null header packet</description>
          <long-description/>
          <tag line="299" name="var" description="" type="\Amfphp_Core_Amf_Packet">
            <type by_reference="false">\Amfphp_Core_Amf_Packet</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="309" namespace="global" package="Default">
        <name>$sStringHeaderPacket</name>
        <default/>
        <docblock line="305">
          <description>string header packet</description>
          <long-description/>
          <tag line="305" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="315" namespace="global" package="Default">
        <name>$dStringHeaderPacket</name>
        <default/>
        <docblock line="311">
          <description>string header packet</description>
          <long-description/>
          <tag line="311" name="var" description="" type="\Amfphp_Core_Amf_Packet">
            <type by_reference="false">\Amfphp_Core_Amf_Packet</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="321" namespace="global" package="Default">
        <name>$sNullMessagePacket</name>
        <default/>
        <docblock line="317">
          <description>null message packet</description>
          <long-description/>
          <tag line="317" name="var" description="Amfphp_Core_Amf_Packet" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="327" namespace="global" package="Default">
        <name>$dNullMessagePacket</name>
        <default/>
        <docblock line="323">
          <description>null message packet</description>
          <long-description/>
          <tag line="323" name="var" description="" type="\Amfphp_Core_Amf_Packet">
            <type by_reference="false">\Amfphp_Core_Amf_Packet</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="333" namespace="global" package="Default">
        <name>$sStringMessagePacket</name>
        <default/>
        <docblock line="329">
          <description>string message packet</description>
          <long-description/>
          <tag line="329" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="339" namespace="global" package="Default">
        <name>$dStringMessagePacket</name>
        <default/>
        <docblock line="335">
          <description>string message packet</description>
          <long-description/>
          <tag line="335" name="var" description="" type="\Amfphp_Core_Amf_Packet">
            <type by_reference="false">\Amfphp_Core_Amf_Packet</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="345" namespace="global" package="Default">
        <name>$s2Headers2MessagesPacket</name>
        <default/>
        <docblock line="341">
          <description>2 headers, 2 messages packet</description>
          <long-description/>
          <tag line="341" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="351" namespace="global" package="Default">
        <name>$d2Headers2MessagesPacket</name>
        <default/>
        <docblock line="347">
          <description>2 headers, 2 messages packet</description>
          <long-description/>
          <tag line="347" name="var" description="" type="\Amfphp_Core_Amf_Packet">
            <type by_reference="false">\Amfphp_Core_Amf_Packet</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="357" namespace="global" package="Default">
        <name>$testServiceRequestPacket</name>
        <default/>
        <docblock line="353">
          <description>test service request packet</description>
          <long-description/>
          <tag line="353" name="var" description="" type="\Amfphp_Core_Amf_Packet">
            <type by_reference="false">\Amfphp_Core_Amf_Packet</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="363" namespace="global" package="Default">
        <name>$testServiceResponsePacket</name>
        <default/>
        <docblock line="359">
          <description>test service request packet</description>
          <long-description/>
          <tag line="359" name="var" description="" type="\Amfphp_Core_Amf_Packet">
            <type by_reference="false">\Amfphp_Core_Amf_Packet</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="368" package="Tests\TestData">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="365">
          <description>constructor</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="403" package="Tests\TestData">
        <name>buildByte</name>
        <full_name>buildByte</full_name>
        <docblock line="400">
          <description>byte</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="412" package="Tests\TestData">
        <name>buildInt</name>
        <full_name>buildInt</full_name>
        <docblock line="408">
          <description>int: 2 bytes</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="420" package="Tests\TestData">
        <name>buildLong</name>
        <full_name>buildLong</full_name>
        <docblock line="417">
          <description>long: 4 bytes</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="429" package="Tests\TestData">
        <name>buildDouble</name>
        <full_name>buildDouble</full_name>
        <docblock line="425">
          <description>double: 8 bytes.</description>
          <long-description>&lt;p&gt;Careful of little/big endian so that test runs with both systems&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="440" package="Tests\TestData">
        <name>buildUtf</name>
        <full_name>buildUtf</full_name>
        <docblock line="437">
          <description>utf: the length of the data on 2 bytes and then the char data</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="450" package="Tests\TestData">
        <name>buildLongUtf</name>
        <full_name>buildLongUtf</full_name>
        <docblock line="447">
          <description>long utf: the length of the data on 4 bytes and then the char data.</description>
          <long-description>&lt;p&gt;The char data is more than 65xxx long&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="464" package="Tests\TestData">
        <name>buildNumber</name>
        <full_name>buildNumber</full_name>
        <docblock line="461">
          <description>number: type is0, then value in (double)8 bytes.</description>
          <long-description>&lt;p&gt;See buildDouble for little/big endian&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="480" package="Tests\TestData">
        <name>buildBoolean</name>
        <full_name>buildBoolean</full_name>
        <docblock line="477">
          <description>build boolean</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="492" package="Tests\TestData">
        <name>buildString</name>
        <full_name>buildString</full_name>
        <docblock line="488">
          <description>build string</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="506" package="Tests\TestData">
        <name>buildObject</name>
        <full_name>buildObject</full_name>
        <docblock line="502">
          <description>build object</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="548" package="Tests\TestData">
        <name>buildNull</name>
        <full_name>buildNull</full_name>
        <docblock line="545">
          <description>build null</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="557" package="Tests\TestData">
        <name>buildUndefined</name>
        <full_name>buildUndefined</full_name>
        <docblock line="554">
          <description>build undefined</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="566" package="Tests\TestData">
        <name>buildReference</name>
        <full_name>buildReference</full_name>
        <docblock line="563">
          <description>TODO test with a real reference?</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="578" package="Tests\TestData">
        <name>buildEcmaArray</name>
        <full_name>buildEcmaArray</full_name>
        <docblock line="574">
          <description>the writeArray method looks at the keys.</description>
          <long-description>&lt;p&gt;If there are both numeric and string keys, the data is treated as an Ecma Array
it also sorts the data and writes the data with numerical keys first, then the data with string keys&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="622" package="Tests\TestData">
        <name>buildObjectEnd</name>
        <full_name>buildObjectEnd</full_name>
        <docblock line="619">
          <description>build object end</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="631" package="Tests\TestData">
        <name>buildStrictArray</name>
        <full_name>buildStrictArray</full_name>
        <docblock line="628">
          <description>build strict array</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="668" package="Tests\TestData">
        <name>buildDate</name>
        <full_name>buildDate</full_name>
        <docblock line="665">
          <description>build date</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="685" package="Tests\TestData">
        <name>buildLongString</name>
        <full_name>buildLongString</full_name>
        <docblock line="682">
          <description>build long string</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="699" package="Tests\TestData">
        <name>buildUnsupported</name>
        <full_name>buildUnsupported</full_name>
        <docblock line="696">
          <description>TODO: no writeUnsupported method, and no PHP for unsupported.</description>
          <long-description>&lt;p&gt;Write it A.S.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="708" package="Tests\TestData">
        <name>buildXml</name>
        <full_name>buildXml</full_name>
        <docblock line="705">
          <description>note: the writeXml method gets rids of CRs and LFs</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="721" package="Tests\TestData">
        <name>buildTypedObject</name>
        <full_name>buildTypedObject</full_name>
        <docblock line="718">
          <description>note: the writeXml method gets rids of CRs and LFs</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="756" package="Tests\TestData">
        <name>buildEmptyPacket</name>
        <full_name>buildEmptyPacket</full_name>
        <docblock line="749">
          <description>test serializing an empty Amfphp_Core_Amf_Packet.</description>
          <long-description>&lt;p&gt;expected output: 0x000000
1st int : version
2nd int : number of headers
3rd int : number of Messages&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="764" package="Tests\TestData">
        <name>buildNullHeaderPacket</name>
        <full_name>buildNullHeaderPacket</full_name>
        <docblock line="761">
          <description>one header containing a null, and with required set to true</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="796" package="Tests\TestData">
        <name>buildStringHeaderPacket</name>
        <full_name>buildStringHeaderPacket</full_name>
        <docblock line="793">
          <description>with one header containing a string</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="831" package="Tests\TestData">
        <name>buildNullMessagePacket</name>
        <full_name>buildNullMessagePacket</full_name>
        <docblock line="828">
          <description>no headers and a Message containing a null</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="864" package="Tests\TestData">
        <name>buildStringMessagePacket</name>
        <full_name>buildStringMessagePacket</full_name>
        <docblock line="861">
          <description>no headers and a Message containing a string</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="899" package="Tests\TestData">
        <name>build2HeadersAndTwoMessagesPacket</name>
        <full_name>build2HeadersAndTwoMessagesPacket</full_name>
        <docblock line="896">
          <description>an Amfphp_Core_Amf_Packet with two headers one with a string and one with a null , and two Messages, one with a string and one with a null</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1013" package="Tests\TestData">
        <name>buildSimpleTestServiceRequestAndResponse</name>
        <full_name>buildSimpleTestServiceRequestAndResponse</full_name>
        <docblock line="1010">
          <description>build simple test service reauest and response</description>
          <long-description/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="1106" package="Tests\TestData">
      <extends/>
      <name>DummyClass</name>
      <full_name>\DummyClass</full_name>
      <docblock line="1102">
        <description>used for testing with typed objects</description>
        <long-description/>
        <tag line="1102" name="package" description="Tests_TestData"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="1112" namespace="global" package="Default">
        <name>$data</name>
        <default/>
        <docblock line="1108">
          <description>data</description>
          <long-description/>
          <tag line="1108" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
    </class>
    <markers>
      <todo line="583">the spec says count of all sub objects(here 2) , whereas the code says count of objects with numerical keys(here 1). Clean? A.S.</todo>
    </markers>
  </file>
  <file path="Tests\TestData\CustomClasses\TestCustomClass1.php" hash="566f84792fa92f290cc7928bc24d9fad" package="Tests\TestData\CustomClasses">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Tests_TestData_CustomClasses"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="18" package="Tests\TestData\CustomClasses">
      <extends/>
      <name>TestCustomClass1</name>
      <full_name>\TestCustomClass1</full_name>
      <docblock line="12">
        <description>dummy class for testing custom class conversion</description>
        <long-description/>
        <tag line="12" name="package" description="Tests_TestData_CustomClasses"/>
        <tag line="12" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
    </class>
  </file>
  <file path="Tests\TestData\CustomClasses\TestCustomClass2.php" hash="2cb7fcd34aa442621cf66e0acebfd84a" package="Tests\TestData\CustomClasses">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Tests_TestData_CustomClasses"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="18" package="Tests\TestData\CustomClasses">
      <extends/>
      <name>TestCustomClass2</name>
      <full_name>\TestCustomClass2</full_name>
      <docblock line="12">
        <description>dummy class for testing custom class conversion</description>
        <long-description/>
        <tag line="12" name="package" description="Tests_TestData_CustomClasses"/>
        <tag line="12" name="author" description="Ariel Sommeria-Klein"/>
      </docblock>
    </class>
  </file>
  <file path="Tests\TestData\CustomClasses\TestCustomClass3.php" hash="df6a2d37a68128bb6e6a6b61fd0428cd" package="Tests\TestData\CustomClasses">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Tests_TestData_CustomClasses"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="18" package="Tests\TestData\CustomClasses">
      <extends/>
      <name>TestCustomClass3</name>
      <full_name>\TestCustomClass3</full_name>
      <docblock line="12">
        <description>dummy class for testing custom class conversion</description>
        <long-description/>
        <tag line="12" name="package" description="Tests_TestData_CustomClasses"/>
        <tag line="12" name="author" description="Ariel Sommeria-Klein"/>
      </docblock>
    </class>
  </file>
  <file path="Tests\TestData\index.php" hash="a2571c87e587a9f91fe13fbb167094f4" package="Tests\TestData">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Tests_TestData"/>
    </docblock>
    <include line="16" type="Require Once" package="Default">
      <name/>
      <docblock line="12">
        <description>a gateway php script like the normal gateway except that it uses test services</description>
        <long-description/>
        <tag line="12" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
    </include>
    <include line="17" type="Require Once" package="Default">
      <name/>
    </include>
  </file>
  <file path="Tests\TestData\MoreServices\EmptyMoreService.php" hash="f7f4a322a2620cccbd4044665cdd8983" package="Tests\TestData\CustomClasses">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Tests_TestData_CustomClasses"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="19" package="Tests\TestData\Services">
      <extends/>
      <name>EmptyMoreService</name>
      <full_name>\EmptyMoreService</full_name>
      <docblock line="13">
        <description>empty service, just to test support for multiple service folders</description>
        <long-description/>
        <tag line="13" name="package" description="Tests_TestData_Services"/>
        <tag line="13" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="24" package="Tests\TestData\Services">
        <name>bla</name>
        <full_name>bla</full_name>
        <docblock line="21">
          <description>dummy function bla</description>
          <long-description/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Tests\TestData\Services\AuthenticationService.php" hash="0225615573a3d6bb62b3940774bb3f15" package="Tests\TestData\Services">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Tests_TestData_Services"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="23" package="Tests\TestData\Services">
      <extends/>
      <name>AuthenticationService</name>
      <full_name>\AuthenticationService</full_name>
      <docblock line="17">
        <description>a simple authentication service, used for testing the AmfphpAuthentication plugin</description>
        <long-description/>
        <tag line="17" name="package" description="Tests_TestData_Services"/>
        <tag line="17" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="32" package="Tests\TestData\Services">
        <name>login</name>
        <full_name>login</full_name>
        <docblock line="25">
          <description>test login function</description>
          <long-description/>
          <tag line="25" name="param" description="" type="String" variable="$userId">
            <type by_reference="false">String</type>
          </tag>
          <tag line="25" name="param" description="" type="String" variable="$password">
            <type by_reference="false">String</type>
          </tag>
          <tag line="25" name="return" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$userId</name>
          <default/>
          <type/>
        </argument>
        <argument line="32">
          <name>$password</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="47" package="Tests\TestData\Services">
        <name>logout</name>
        <full_name>logout</full_name>
        <docblock line="44">
          <description>test logout function</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="57" package="Tests\TestData\Services">
        <name>_getMethodRoles</name>
        <full_name>_getMethodRoles</full_name>
        <docblock line="51">
          <description>function the authentication plugin uses to get accepted roles for each function
Here login and logout are not protected, however</description>
          <long-description/>
          <tag line="51" name="param" description="" type="String" variable="$methodName">
            <type by_reference="false">String</type>
          </tag>
          <tag line="51" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$methodName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="69" package="Tests\TestData\Services">
        <name>adminMethod</name>
        <full_name>adminMethod</full_name>
        <docblock line="65">
          <description>method that is protected by authentication.</description>
          <long-description>&lt;p&gt;Only 'admin' role is authorized. (see _getMethodRoles)&lt;/p&gt;</long-description>
          <tag line="65" name="return" description="'ok'" type="\&lt;String&gt;">
            <type by_reference="false">\&lt;String&gt;</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Tests\TestData\Services\BadSyntaxService.php" hash="240e9dd489e9894ca6580e60ef42e2c3" package="Tests\TestData\Services">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Tests_TestData_Services"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="18" package="Tests\TestData\Services">
      <extends/>
      <name>BadSyntaxService</name>
      <full_name>\BadSyntaxService</full_name>
      <docblock line="12">
        <description>bad syntax</description>
        <long-description/>
        <tag line="12" name="package" description="Tests_TestData_Services"/>
        <tag line="12" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="22" package="Tests\TestData\Services">
        <name>arghBad</name>
        <full_name>arghBad</full_name>
        <docblock line="19">
          <description>contains bad syntax</description>
          <long-description/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Tests\TestData\Services\bla\BlaService.php" hash="ae55b68fab453e4903f9db933e012a50" package="Amfphp\Services">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Amfphp_Services"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="19" package="Amfphp\Services">
      <extends/>
      <name>BlaService</name>
      <full_name>\BlaService</full_name>
      <docblock line="13">
        <description>simple service for testing service subfolder support</description>
        <long-description/>
        <tag line="13" name="package" description="Amfphp_Services"/>
        <tag line="13" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="26" package="Amfphp\Services">
        <name>returnDouble</name>
        <full_name>returnDouble</full_name>
        <docblock line="21">
          <description>retur double</description>
          <long-description/>
          <tag line="21" name="param" description="" type="float" variable="$param">
            <type by_reference="false">float</type>
          </tag>
          <tag line="21" name="return" description="" type="float">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
        <argument line="26">
          <name>$param</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Tests\TestData\Services\ByteArrayTestService.php" hash="8d567acd0ad294bd894b415219265639" package="Tests\TestData\Services">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Tests_TestData_Services"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="19" package="Tests\TestData\Services">
      <extends/>
      <name>ByteArrayTestService</name>
      <full_name>\ByteArrayTestService</full_name>
      <docblock line="12">
        <description>a service for tests on byte arrays</description>
        <long-description/>
        <tag line="12" name="package" description="Tests_TestData_Services"/>
        <tag line="12" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="26" package="Tests\TestData\Services">
        <name>uploadCompressedByteArray</name>
        <full_name>uploadCompressedByteArray</full_name>
        <docblock line="21">
          <description>uncompresses a bytearray, writes the uncompressed data to a file, received.jpg</description>
          <long-description/>
          <tag line="21" name="param" description="a comporessed bytearray" type="\Amfphp_Core_Amf_Types_ByteArray" variable="$ba">
            <type by_reference="false">\Amfphp_Core_Amf_Types_ByteArray</type>
          </tag>
          <tag line="21" name="return" description="" type="true">
            <type by_reference="false">true</type>
          </tag>
        </docblock>
        <argument line="26">
          <name>$ba</name>
          <default/>
          <type>\Amfphp_Core_Amf_Types_ByteArray</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Tests\TestData\Services\DummyService.php" hash="130e10dc2139b5807cdcf4bfb3cda32e" package="Tests\TestData\CustomClasses">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Tests_TestData_CustomClasses"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="19" package="Tests\TestData\Services">
      <extends/>
      <name>DummyService</name>
      <full_name>\DummyService</full_name>
      <docblock line="12">
        <description>a dummy service to test locating services in folders</description>
        <long-description/>
        <tag line="12" name="package" description="Tests_TestData_Services"/>
        <tag line="12" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="24" package="Tests\TestData\Services">
        <name>returnNull</name>
        <full_name>returnNull</full_name>
        <docblock line="20">
          <description>return null</description>
          <long-description/>
          <tag line="20" name="return" description="" type="null">
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Tests\TestData\Services\ExampleSerializationDebugService.php" hash="9a8240af91816bf7415384e947c3420a" package="Tests\TestData\Services">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Tests_TestData_Services"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="23" package="Tests\TestData\Services">
      <extends/>
      <name>ExampleSerializationDebugService</name>
      <full_name>\ExampleSerializationDebugService</full_name>
      <docblock line="12">
        <description>this service illustrates parsing a PHP serialized object to load test data.</description>
        <long-description>&lt;p&gt;Use this as an example when
illustrating a possible bug that involves specific data.
The getSerializedObject method shows how to PHP serialize an object.
The getDataThatCreatesProblems method is the one you need to implement.
MyVO is an example VO object.&lt;/p&gt;</long-description>
        <tag line="12" name="package" description="Tests_TestData_Services"/>
        <tag line="12" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="28" package="Tests\TestData\Services">
        <name>getDataThatCreatesProblems</name>
        <full_name>getDataThatCreatesProblems</full_name>
        <docblock line="24">
          <description>get data that creates problems</description>
          <long-description/>
          <tag line="24" name="return" description="" type="\MyVO">
            <type by_reference="false">\MyVO</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="36" package="Tests\TestData\Services">
        <name>getSerializedObject</name>
        <full_name>getSerializedObject</full_name>
        <docblock line="32">
          <description>get serialized object</description>
          <long-description/>
          <tag line="32" name="return" description="" type="\MyVO">
            <type by_reference="false">\MyVO</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="50" package="Tests\TestData\Services">
      <extends/>
      <name>MyVO</name>
      <full_name>\MyVO</full_name>
      <docblock line="46">
        <description>vo holder class</description>
        <long-description/>
        <tag line="46" name="package" description="Tests_TestData_Services"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="55" namespace="global" package="Default">
        <name>$var1</name>
        <default/>
        <docblock line="51">
          <description>var1</description>
          <long-description/>
          <tag line="51" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="61" namespace="global" package="Default">
        <name>$var2</name>
        <default/>
        <docblock line="57">
          <description>var2</description>
          <long-description/>
          <tag line="57" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="Tests\TestData\TestPlugins\DisabledPlugin\DisabledPlugin.php" hash="31d5e9920bb9e770e24b0ba74172635e" package="Tests\TestData\TestPlugins\DisabledPlugin">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Tests_TestData_TestPlugins_DisabledPlugin"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="18" package="Tests\TestData\TestPlugins\DisabledPlugin">
      <extends/>
      <name>DisabledPlugin</name>
      <full_name>\DisabledPlugin</full_name>
      <docblock line="12">
        <description>a dummy plugin to test if loading in the plugin manager works properly.</description>
        <long-description>&lt;p&gt;It does mothing except increment a static counter to count instanciation&lt;/p&gt;</long-description>
        <tag line="12" name="package" description="Tests_TestData_TestPlugins_DisabledPlugin"/>
        <tag line="12" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="23" namespace="global" package="Default">
        <name>$instanciationCounter</name>
        <default>0</default>
        <docblock line="19">
          <description>instanciation counter</description>
          <long-description/>
          <tag line="19" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="28" package="Tests\TestData\TestPlugins\DisabledPlugin">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="25">
          <description>constructor</description>
          <long-description/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="Tests\TestData\TestPlugins\DummyPlugin\DummyPlugin.php" hash="f6052b48f913716e8a3f2ac95519378b" package="Tests\TestData\TestPlugins\DummyPlugin">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Tests_TestData_TestPlugins_DummyPlugin"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="19" package="Tests\TestData\TestPlugins\DummyPlugin">
      <extends/>
      <name>DummyPlugin</name>
      <full_name>\DummyPlugin</full_name>
      <docblock line="13">
        <description>a dummy plugin to test if loading in the plugin manager works properly.</description>
        <long-description>&lt;p&gt;It does mothing except increment a static counter to count instanciation&lt;/p&gt;</long-description>
        <tag line="13" name="package" description="Tests_TestData_TestPlugins_DummyPlugin"/>
        <tag line="13" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <property final="false" static="true" visibility="public" line="25" namespace="global" package="Default">
        <name>$instanciationCounter</name>
        <default>0</default>
        <docblock line="21">
          <description>instanciation counter</description>
          <long-description/>
          <tag line="21" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="31" namespace="global" package="Default">
        <name>$dummyConfVar</name>
        <default>'default'</default>
        <docblock line="27">
          <description>dummy conf variable</description>
          <long-description/>
          <tag line="27" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="37" package="Tests\TestData\TestPlugins\DummyPlugin">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="33">
          <description>constructor</description>
          <long-description/>
          <tag line="33" name="param" description="" type="array" variable="$pluginConfig">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="37">
          <name>$pluginConfig</name>
          <default>null</default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="Tests\TestData\TestService.php" hash="e4b878240b8ffd93eb06bf2b50724df2" package="Amfphp\Services">
    <docblock line="3">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="3" name="package" description="Amfphp_Services"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="19" package="Amfphp\Services">
      <extends/>
      <name>TestService</name>
      <full_name>\TestService</full_name>
      <docblock line="13">
        <description>This is a test/example service.</description>
        <long-description></long-description>
        <tag line="13" name="package" description="Amfphp_Services"/>
        <tag line="13" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="26" package="Amfphp\Services">
        <name>returnOneParam</name>
        <full_name>returnOneParam</full_name>
        <docblock line="21">
          <description>return one param</description>
          <long-description></long-description>
          <tag line="21" name="param" description="" type="mixed" variable="$param">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="21" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="26">
          <name>$param</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="36" package="Amfphp\Services">
        <name>returnSum</name>
        <full_name>returnSum</full_name>
        <docblock line="30">
          <description>return sum</description>
          <long-description></long-description>
          <tag line="30" name="param" description="" type="int" variable="$number1">
            <type by_reference="false">int</type>
          </tag>
          <tag line="30" name="param" description="" type="int" variable="$number2">
            <type by_reference="false">int</type>
          </tag>
          <tag line="30" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="36">
          <name>$number1</name>
          <default></default>
          <type/>
        </argument>
        <argument line="36">
          <name>$number2</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="44" package="Amfphp\Services">
        <name>returnNull</name>
        <full_name>returnNull</full_name>
        <docblock line="40">
          <description>return null</description>
          <long-description></long-description>
          <tag line="40" name="return" description="" type="null">
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="52" package="Amfphp\Services">
        <name>returnBla</name>
        <full_name>returnBla</full_name>
        <docblock line="48">
          <description>return bla</description>
          <long-description></long-description>
          <tag line="48" name="return" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="61" package="Amfphp\Services">
        <name>throwException</name>
        <full_name>throwException</full_name>
        <docblock line="56">
          <description>throy exception</description>
          <long-description></long-description>
          <tag line="56" name="param" description="" type="string" variable="$arg1">
            <type by_reference="false">string</type>
          </tag>
          <tag line="56" name="throws" description="" type="\Exception">
            <type by_reference="false">\Exception</type>
          </tag>
        </docblock>
        <argument line="61">
          <name>$arg1</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="69" package="Amfphp\Services">
        <name>returnAfterOneSecond</name>
        <full_name>returnAfterOneSecond</full_name>
        <docblock line="65">
          <description>return after one second</description>
          <long-description></long-description>
          <tag line="65" name="return" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="78" package="Amfphp\Services">
        <name>returnTestHeader</name>
        <full_name>returnTestHeader</full_name>
        <docblock line="74">
          <description>return test header</description>
          <long-description></long-description>
          <tag line="74" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="86" package="Amfphp\Services">
        <name>_reservedMethod</name>
        <full_name>_reservedMethod</full_name>
        <docblock line="83">
          <description>shouldn't appear in the service browser or be available as a service</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="94" package="Amfphp\Services">
        <name>returnArray</name>
        <full_name>returnArray</full_name>
        <docblock line="90">
          <description>return array</description>
          <long-description></long-description>
          <tag line="90" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="103" package="Amfphp\Services">
        <name>returnOpposite</name>
        <full_name>returnOpposite</full_name>
        <docblock line="98">
          <description>return opposite</description>
          <long-description></long-description>
          <tag line="98" name="param" description="" type="boolean" variable="$value">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="98" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="103">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="113" package="Amfphp\Services">
        <name>returnBitwiseAnd</name>
        <full_name>returnBitwiseAnd</full_name>
        <docblock line="107">
          <description>return bitwise and</description>
          <long-description></long-description>
          <tag line="107" name="param" description="" type="boolean" variable="$value1">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="107" name="param" description="" type="boolean" variable="$value2">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="107" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="113">
          <name>$value1</name>
          <default></default>
          <type/>
        </argument>
        <argument line="113">
          <name>$value2</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="122" package="Amfphp\Services">
        <name>staticReturnOneParam</name>
        <full_name>staticReturnOneParam</full_name>
        <docblock line="117">
          <description>static return one param</description>
          <long-description></long-description>
          <tag line="117" name="param" description="" type="mixed" variable="$param">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="117" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="122">
          <name>$param</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="Tests\TestData\TestServicesConfig.php" hash="33b49236eea6224f99f3205b134b314e" package="Tests\TestData">
    <docblock line="2">
      <description>This file is part of amfPHP</description>
      <long-description>&lt;p&gt;LICENSE&lt;/p&gt;

&lt;p&gt;This source file is subject to the license that is bundled
with this package in the file license.txt.&lt;/p&gt;</long-description>
      <tag line="2" name="package" description="Tests_TestData"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="19" package="Tests\TestData">
      <extends>\Amfphp_Core_Config</extends>
      <name>TestServicesConfig</name>
      <full_name>\TestServicesConfig</full_name>
      <docblock line="13">
        <description>testing requires some services.</description>
        <long-description>&lt;p&gt;They are described here.&lt;/p&gt;</long-description>
        <tag line="13" name="package" description="Tests_TestData"/>
        <tag line="13" name="author" description="Ariel Sommeria-klein"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="24" package="Tests\TestData">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="21">
          <description>constructor</description>
          <long-description></long-description>
        </docblock>
      </method>
    </class>
  </file>
  <package name="Amfphp" full_name="Amfphp">
    <package name="BackOffice" full_name="Amfphp\BackOffice">
      <package name="ClientGenerator" full_name="Amfphp\BackOffice\ClientGenerator"/>
    </package>
    <package name="Backoffice" full_name="Amfphp\Backoffice">
      <package name="Generators" full_name="Amfphp\Backoffice\Generators"/>
    </package>
    <package name="Core" full_name="Amfphp\Core">
      <package name="Amf" full_name="Amfphp\Core\Amf">
        <package name="Types" full_name="Amfphp\Core\Amf\Types"/>
      </package>
      <package name="Common" full_name="Amfphp\Core\Common"/>
    </package>
    <package name="Examples" full_name="Amfphp\Examples">
      <package name="Authentication" full_name="Amfphp\Examples\Authentication"/>
      <package name="ExampleService" full_name="Amfphp\Examples\ExampleService"/>
    </package>
    <package name="Plugins" full_name="Amfphp\Plugins">
      <package name="AmfphpIncludedRequest" full_name="Amfphp\Plugins\AmfphpIncludedRequest"/>
      <package name="Authentication" full_name="Amfphp\Plugins\Authentication"/>
      <package name="CharsetConverter" full_name="Amfphp\Plugins\CharsetConverter"/>
      <package name="CustomClassConverter" full_name="Amfphp\Plugins\CustomClassConverter"/>
      <package name="Discovery" full_name="Amfphp\Plugins\Discovery"/>
      <package name="Dummy" full_name="Amfphp\Plugins\Dummy"/>
      <package name="ErrorHandler" full_name="Amfphp\Plugins\ErrorHandler"/>
      <package name="FlexMessaging" full_name="Amfphp\Plugins\FlexMessaging"/>
      <package name="Get" full_name="Amfphp\Plugins\Get"/>
      <package name="Json" full_name="Amfphp\Plugins\Json"/>
      <package name="Logger" full_name="Amfphp\Plugins\Logger"/>
    </package>
    <package name="Services" full_name="Amfphp\Services"/>
    <package name="" full_name="Amfphp\">
      <package name="BackOffice" full_name="Amfphp\\BackOffice">
        <package name="ClientGenerator" full_name="Amfphp\\BackOffice\ClientGenerator"/>
      </package>
    </package>
  </package>
  <package name="Default" full_name="Default"/>
  <package name="Tests" full_name="Tests">
    <package name="Amfphp" full_name="Tests\Amfphp">
      <package name="Core" full_name="Tests\Amfphp\Core">
        <package name="Amf" full_name="Tests\Amfphp\Core\Amf"/>
        <package name="Common" full_name="Tests\Amfphp\Core\Common"/>
      </package>
      <package name="Plugins" full_name="Tests\Amfphp\Plugins">
        <package name="Authentication" full_name="Tests\Amfphp\Plugins\Authentication"/>
        <package name="CharsetConverter" full_name="Tests\Amfphp\Plugins\CharsetConverter"/>
        <package name="CustomClassConverter" full_name="Tests\Amfphp\Plugins\CustomClassConverter"/>
        <package name="FlexMessaging" full_name="Tests\Amfphp\Plugins\FlexMessaging"/>
        <package name="Logger" full_name="Tests\Amfphp\Plugins\Logger"/>
      </package>
    </package>
    <package name="TestData" full_name="Tests\TestData">
      <package name="CustomClasses" full_name="Tests\TestData\CustomClasses"/>
      <package name="Services" full_name="Tests\TestData\Services"/>
      <package name="TestPlugins" full_name="Tests\TestData\TestPlugins">
        <package name="DisabledPlugin" full_name="Tests\TestData\TestPlugins\DisabledPlugin"/>
        <package name="DummyPlugin" full_name="Tests\TestData\TestPlugins\DummyPlugin"/>
      </package>
    </package>
  </package>
  <namespace name="global" full_name="global"/>
  <marker count="13">todo</marker>
  <marker count="0">fixme</marker>
  <deprecated count="0"/>
</project>
