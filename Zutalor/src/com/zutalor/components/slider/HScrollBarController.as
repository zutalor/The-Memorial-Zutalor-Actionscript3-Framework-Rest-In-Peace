package com.zutalor.components.slider{	import com.greensock.TweenMax;	import com.zutalor.utils.Scale;	import com.zutalor.utils.StageRef;	import flash.display.*;	import flash.events.*;		public class HScrollBarController extends ScrollBarController	{					public function HScrollBarController(base:DisplayObjectContainer, thumb:DisplayObjectContainer, track:DisplayObjectContainer, 												reveal:DisplayObjectContainer = null, tweenTime:Number = 0,												numSteps:uint = 0, onlyShowTrackOnMouseDown:Boolean=false):void		{			if (numSteps)				thumb.width = track.width / numSteps;				super(base, thumb, track, reveal, tweenTime, numSteps, onlyShowTrackOnMouseDown);		}				override protected function thumbDown(e:MouseEvent):void		{						_scale = Scale.accumulateXScale(_thumb, _thumb.scaleX);			_xMax = _track.width - _thumb.width;			_xOffset = _thumb.stage.mouseX - (_thumb.x * _scale);			super.thumbDown(e);		}		override protected function trackDown(e:MouseEvent):void		{			if (e.target.name == "_track" || e.target.name == "_reveal")			{				_percent = e.localX / _track.width;				setPercent(_percent);				super.trackDown(e);			}		}						override protected function thumbMoved(e:MouseEvent):void		{			var thumbX:int;						thumbX = _thumb.stage.mouseX - _xOffset;						if (_numSteps)				thumbX -= _thumb.stage.mouseX % (_track.width / _numSteps);							thumbX *= (1 / _scale);										if(thumbX < _xMin)				thumbX = _xMin;			else if(thumbX > _xMax)				thumbX = _xMax;						if (_tweenTime)					TweenMax.to(_thumb, _tweenTime, { x:thumbX } );			else				_thumb.x = thumbX;						_percent = thumbX / _xMax;				super.thumbMoved(e);			if (_reveal)				updateReveal(_percent);		}				override public function setPercent(p:Number):void		{			var thumbX:int;									_percent = p;					_xMax = _track.width - _thumb.width;						thumbX = _percent * _xMax;						if (thumbX < _xMin)				thumbX = _xMin;			else if (thumbX > _xMax)				thumbX = _xMax;						if (_tweenTime)					TweenMax.to(_thumb, _tweenTime, { x:thumbX } );			else				_thumb.x = thumbX;						if (_reveal)				updateReveal(_percent);		}				private function updateReveal(p:Number):void						{						_revealMask.graphics.clear();			_revealMask.graphics.beginFill(0x000000);			_revealMask.graphics.drawRect(0, 0, _thumb.x + (_thumb.width >> 1), _reveal.height);			_revealMask.graphics.endFill();			if (_tweenTime)				TweenMax.from(_revealMask, _tweenTime, { scaleX:0 } );		}	}}