package com.zutalor.components.slider{	import com.zutalor.events.UIEvent;	import flash.display.*;	import flash.events.*;		public class ScrollBarController extends EventDispatcher	{		protected var _yMin:Number;		protected var _yMax:Number;			protected var _yOffset:int;				protected var _xMin:Number;		protected var _xMax:Number;				protected var _xOffset:int;		protected var _scale:Number;		protected var _thumb:DisplayObjectContainer;		protected var _track:DisplayObjectContainer;		protected var _base:DisplayObjectContainer;		protected var _reveal:DisplayObjectContainer;		protected var _revealMask:Sprite;		protected var _dragging:Boolean;		protected var _percent:Number;		protected var _numSteps:uint;		protected var _tweenTime:Number;		protected var _onlyShowTrackOnMouseDown:Boolean;						public function ScrollBarController(base:DisplayObjectContainer, thumb:DisplayObjectContainer, track:DisplayObjectContainer,													reveal:DisplayObjectContainer, 													tweenTime:Number = 0, numSteps:uint = 0, onlyShowTrackOnMouseDown:Boolean=false):void		{			_thumb = thumb;			_track = track;			_reveal = reveal;			_onlyShowTrackOnMouseDown = onlyShowTrackOnMouseDown;			_base = base;						if (_reveal)			{				_track.addChild(_reveal);				_revealMask = new Sprite();				_reveal.mask = _revealMask;				_reveal.addChild(_revealMask);			}				_base.addChild(_track);			_base.addChild(_thumb);			_tweenTime = tweenTime;			_numSteps = numSteps;			init();		}				public function get dragging():Boolean		{			return _dragging;		}				public function set numSteps(r:uint):void		{			_numSteps = r;		}					protected function init():void		{			_xMin = 0;			_yMin = 0;				_track.name = "_track";			if (_reveal)			{				_reveal.name = "_reveal";				_reveal.addEventListener(MouseEvent.MOUSE_DOWN, trackDown, false, 0, true);			}			_track.addEventListener(MouseEvent.MOUSE_DOWN, trackDown, false, 0, true);				_thumb.addEventListener(MouseEvent.MOUSE_DOWN, thumbDown, false, 0, true);						if (_thumb is Sprite)				Sprite(_thumb).buttonMode = true;			if (_track is Sprite)				Sprite(_track).buttonMode = true;			if (_reveal is Sprite)				Sprite(_reveal).buttonMode = true;						if (_onlyShowTrackOnMouseDown)				_track.visible = false;		}				protected function thumbDown(e:MouseEvent):void		{			_thumb.stage.addEventListener(MouseEvent.MOUSE_MOVE, thumbMoved, false, 0, true);			_thumb.stage.addEventListener(MouseEvent.MOUSE_UP, thumbUp, false, 0, true);			_track.visible = true;			_dragging = true;		}				protected function trackDown(e:MouseEvent):void		{			if (e.target.name == "_track" || e.target.name == "_reveal")			{				dispatchEvent(new UIEvent(UIEvent.VALUE_CHANGED, null, null, null, _percent));				e.updateAfterEvent();			}		}						protected function thumbMoved(e:MouseEvent):void		{			dispatchEvent(new UIEvent(UIEvent.VALUE_CHANGED, null, null, null, _percent));			e.updateAfterEvent();		}				public function setPercent(p:Number):void		{			_percent = p;			dispatchEvent(new UIEvent(UIEvent.VALUE_CHANGED, null, null, null, _percent));		}				public function getPercent():Number		{			return _percent;		}				private function thumbUp(e:MouseEvent):void		{			_thumb.stage.removeEventListener(MouseEvent.MOUSE_UP, thumbUp);			_thumb.stage.removeEventListener(MouseEvent.MOUSE_MOVE, thumbMoved);			if (_onlyShowTrackOnMouseDown)				_track.visible = false;			_dragging = false;		}				public function dispose():void		{			_thumb.stage.removeEventListener(MouseEvent.MOUSE_UP, thumbUp);			_thumb.stage.removeEventListener(MouseEvent.MOUSE_MOVE, thumbMoved);			_thumb.removeEventListener(MouseEvent.MOUSE_DOWN, thumbDown);			_track.removeEventListener(MouseEvent.CLICK, trackDown);		}			}}