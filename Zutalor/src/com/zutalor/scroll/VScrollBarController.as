package com.zutalor.scroll {	import com.greensock.TweenMax;	import com.zutalor.events.UIEvent;	import com.zutalor.ui.Button;	import com.zutalor.utils.Scale;	import flash.display.*;	import flash.events.*;		public class VScrollBarController extends ScrollBarController	{					public function VScrollBarController(base:DisplayObjectContainer, thumb:DisplayObjectContainer,											track:DisplayObjectContainer, reveal:DisplayObjectContainer, 											tweenTime:Number = 0, numSteps:uint = 0, onlyShowTrackOnMouseDown:Boolean=false)		{						if (numSteps)				thumb.height = track.height / numSteps;				super(base, thumb, track, reveal, tweenTime, numSteps, onlyShowTrackOnMouseDown);		}							override protected function init():void		{							_base.addEventListener(Event.ADDED_TO_STAGE, addedToStage);			super.init();		}				private function addedToStage(e:Event):void		{			_base.removeEventListener(Event.ADDED_TO_STAGE, addedToStage);			_base.parent.addEventListener(MouseEvent.MOUSE_WHEEL, mouseWheel, false, 0, true);					}		private function mouseWheel(e:MouseEvent):void		{			if (_thumb.parent.visible)			{				_yMax = _track.height - _thumb.height;								_thumb.y -= e.delta * 10;				checkLimits();				_percent = _thumb.y / _yMax;				dispatchEvent(new UIEvent(UIEvent.VALUE_CHANGED, null, null, null, String(_percent)));				e.updateAfterEvent();			}			}				override protected function thumbDown(e:MouseEvent):void		{			_scale = Scale.accumulateYScale(_thumb, _thumb.scaleY);			_yMax = _track.height - _thumb.height;							_yOffset = _thumb.stage.mouseY - (_thumb.y * _scale);			super.thumbDown(e);		}				override protected function trackDown(e:MouseEvent):void		{			if (e.target.name == "_track" || e.target.name == "_reveal")			{				_percent = e.localY / _track.height;				setPercent(_percent);				super.trackDown(e);			}		}						override protected function thumbMoved(e:MouseEvent):void		{				var thumbY:int;						thumbY = _thumb.stage.mouseY - _yOffset;									if (_numSteps)				thumbY -= _thumb.stage.mouseY % (_track.height / _numSteps);						thumbY *= (1 / _scale);									if(thumbY <= _yMin)				thumbY = _yMin;			if(thumbY >= _yMax)				thumbY = _yMax;												if (_tweenTime)					TweenMax.to(_thumb, _tweenTime, { y:thumbY } );			else				_thumb.y = thumbY;						_percent = thumbY / _yMax;			super.thumbMoved(e);						if (_reveal)				updateReveal(_percent);				}					override public function setPercent(p:Number):void		{			var thumbY:int;						_percent = p;			_yMax = _track.height - _thumb.height;										thumbY = p * _yMax;									if (thumbY < _yMin)				thumbY = _yMin;			else if (thumbY > _yMax)				thumbY = _yMax;			if (_tweenTime)					TweenMax.to(_thumb, _tweenTime, { y:thumbY } );			else				_thumb.y = thumbY;							if (_reveal)				updateReveal(p);			}				private function checkLimits():void		{			if(_thumb.y <= _yMin)				_thumb.y = _yMin;			if(_thumb.y >= _yMax)				_thumb.y = _yMax;		}					private function updateReveal(p:Number):void						{			_revealMask.graphics.beginFill(0x000000);			_revealMask.graphics.drawRect(0, 0, _reveal.width, _thumb.y + (_thumb.height >> 1));			_revealMask.graphics.endFill();			if (_tweenTime)				TweenMax.from(_revealMask, _tweenTime, { scaleY:0 } );		}			}}